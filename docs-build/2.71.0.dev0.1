.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "TODO" "1" "May 21, 2023" "2.71.0.dev0" "pytermor"
.SH NAME
Todo \- pytermor 2.71.0.dev0
.sp
(yet another) Python library initially designed for formatting terminal output using ANSI escape codes.
.sp
Provides \fI\%high\-level\fP methods for working with text sections, colors, formats, alignment and wrapping, as well as \fI\%low\-level\fP \fI\%ansi\fP module which allows operating with SGR \fI\%sequences\fP and also implements automatic \(dqsoft\(dq format termination. Depending on the context and technical requirements either approach can be used. Also includes a set of additional number/string/date formatters for pretty output.
.sp
Key feature of this library is extendability and a variety of formatters (called \fI\%renderers\fP), which determine the output syntax:
.INDENT 0.0
.IP \(bu 2
\fI\%SgrRenderer\fP (global default)
.IP \(bu 2
\fI\%TmuxRenderer\fP
.IP \(bu 2
\fI\%HtmlRenderer\fP
.IP \(bu 2
\fI\%SgrDebugger\fP (mostly for development)
.IP \(bu 2
etc.
.UNINDENT
.sp
No dependencies required, only Python Standard Library (there are some for testing and docs building, though).
.INDENT 0.0
.INDENT 3.5
.sp
This is how you \fBshould\fP format examples:
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 2.5
[image]
\fI\%https://chrisyeh96.github.io/2020/03/28/terminal\-colors.html#color\-schemes\fP.UNINDENT
.UNINDENT
.SH GUIDE
.SS Getting started
.SS Installation
.sp
Python 3.8 or later should be installed and available in \fB$PATH\fP; that\(aqs
basically it if intended usage of the package is as a library.
.sp
Installing into a project
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python \-m pip install pytermor
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Standalone installation (for developing or experimenting)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ git clone git@github.com:delameter/pytermor.git .
$ python \-m venv venv
$ PYTHONPATH=. venv/bin/python \-m pytermor
v2.41.1\-dev1:Feb\-23
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Library structure
.TS
center;
|l|l|l|l|.
_
T{
A L
T}	T{
Module
T}	T{
Class(es)
T}	T{
Purpose
T}
_
T{
Hi
T}	T{
\fI\%text\fP
T}	T{
\fI\%Text\fP
T}	T{
Container consisting of text pieces each with attached \fBStyle\fP\&.
Renders into specified format keeping all the formatting.
T}
_
T{
\fI\%Style\fP
\fI\%Styles\fP
T}	T{
Reusable abstractions defining colors and text attributes (text
color, bg color, \fIbold\fP attribute, \fIunderlined\fP attribute etc).
T}
_
T{
\fI\%SgrRenderer\fP
\fI\%HtmlRenderer\fP
\fI\%TmuxRenderer\fP etc.
T}	T{
\fBSgrRenderer\fP transforms \fBStyle\fP instances into \fBColor\fP, \fBSpan\fP
and \fBSequenceSGR\fP instances and assembles it all up. There are
several other implementations depending on what output
format is required.
T}
_
T{
\fI\%color\fP
T}	T{
\fI\%Color16\fP
\fI\%Color256\fP
\fI\%ColorRGB\fP
T}	T{
Abstractions for color operations in different color modes
(default 16\-color, 256\-color, RGB). Tools for color approximation
and transformations.
T}
_
T{
\fI\%pytermor\fP
T}	T{
Color registry.
T}
_
T{
Lo
T}	T{
\fI\%ansi\fP
T}	T{
\fBSpan\fP
T}	T{
Abstraction consisting of \(dqopening\(dq SGR sequence defined by the
developer (or taken from preset list) and complementary \(dqclosing\(dq
SGR sequence that is built automatically.
T}
_
T{
\fBSpans\fP
T}	T{
Registry of predefined instances in case the developer doesn\(aqt need dynamic
output formatting and just wants to colorize an error message.
T}
_
T{
\fI\%SequenceSGR\fP
\fI\%SeqIndex\fP
T}	T{
Abstractions for manipulating ANSI control sequences and
classes\-factories, plus a registry of preset SGRs.
T}
_
T{
\fBIntCodes\fP
T}	T{
Registry of escape control sequence parameters.
T}
_
T{
\fButil\fP
T}	T{
*
T}	T{
Additional formatters and common methods for manipulating strings with
SGRs inside.
T}
_
.TE
.SS Features
.sp
One of the core concepts of the library is \fBSpan\fP class. \fBSpan\fP is a combination of two control sequences;
it wraps specified string with pre\-defined leading and trailing SGR definitions.
.sp
Example code:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import Spans

print(Spans.RED(\(aqFeat\(aq) + Spans.BOLD(\(aqures\(aq))

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Content\-aware format nesting
.sp
Compose text spans with automatic content\-aware span termination. Preset spans can safely overlap with each
other (as long as they require different \fIbreaker\fP sequences to reset).
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import Span

span1 = Span(\(aqblue\(aq, \(aqbold\(aq)
span2 = Span(\(aqcyan\(aq, \(aqinversed\(aq, \(aqunderlined\(aq, \(aqitalic\(aq)

msg = span1(f\(aqContent{span2(\(dq\-aware format\(dq)} nesting\(aq)
print(msg)

.ft P
.fi
.UNINDENT
.UNINDENT
[image]
.sp
Flexible sequence builder
.sp
Create your own \fI\%SGR sequences\fP using default constructor, which accepts color/attribute keys,
integer codes and even existing \fISGRs\fP, in any amount and in any order. Key resolving is case\-insensitive.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import SeqIndex, SequenceSGR

seq1 = SequenceSGR(\(aqhi_blue\(aq, 1)  # keys or integer codes
seq2 = SequenceSGR(seq1, SeqIndex.ITALIC)  # existing SGRs
seq3 = SequenceSGR(\(aqunderlined\(aq, \(aqYELLOW\(aq)  # case\-insensitive

msg = f\(aq{seq1}Flexible{SeqIndex.RESET} \(aq + \e
      f\(aq{seq2}sequence{SeqIndex.RESET} \(aq + \e
      str(seq3) + \(aqbuilder\(aq + str(SeqIndex.RESET)
print(msg)

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
256 colors / True Color support
.sp
The library supports extended color modes:
.INDENT 0.0
.IP \(bu 2
XTerm 256 colors indexed mode (see \fI\%ANSI preset list\fP);
.IP \(bu 2
True Color RGB mode (16M colors).
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import SequenceSGR, SeqIndex

start_color = 41
boxchr = \(dq\eu2588\(dq
for idx, c in enumerate(range(start_color, start_color+(36*6), 36)):
    print(f\(aq{SequenceSGR.new_color_256(c)}{boxchr*3}{SeqIndex.COLOR_OFF}\(aq, end=\(aq\(aq)

print(\(aq\en\(aq)
for idx, c in enumerate(range(0, 256, 256//17)):
    r = max(0, 255\-c)
    g = max(0, min(255, 127\-(c*2)))
    b = c
    print(f\(aq{SequenceSGR.new_color_rgb(r, g, b)}{boxchr}{SeqIndex.COLOR_OFF}\(aq, end=\(aq\(aq)

.ft P
.fi
.UNINDENT
.UNINDENT
[image]
.sp
Customizable output formats
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
@TODOTODO
.UNINDENT
.UNINDENT
.sp
String and number formatters
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
@TODOTODO
.UNINDENT
.UNINDENT
.SS CLI usage
.sp
Commands like the ones below can be used for quick experimenting without loading the IDE:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
One\-liner for system\-wide installation (which is not recommended):
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
$ python \-c \(dqimport pytermor as pt; pt.echo(\(aqRED\(aq, \(aqred\(aq)\(dq
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
One\-liner for virtual environment (\fBvenv\fP) with \fI\%pytermor\fP pre\-installed (see \fI\%Installation\fP)
(note that the library source code root folder should be used as current working directory):
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
$ PYTHONPATH=. venv/bin/python \-c \(dqimport pytermor as pt; pt.echo(\(aqGREEN\(aq, \(aqgreen\(aq)\(dq
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Interactive mode for virtual environment with \fI\%pytermor\fP pre\-installed
(again, current working directory should be sources root dir):
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
$ PYTHONSTARTUP=.run\-startup.py PYTHONPATH=. venv/bin/python \-qi
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
python 3.8.10
pytermor 2.41.1\-dev1
>>> pt.echo(\(dqThis is warning, be warned\(dq, pt.Styles.WARNING)
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS High\-level core API
.sp
Glossary
.INDENT 0.0
.TP
.B rendering
A process of transforming text\-describing instances into specified
output format, e.g. instance of \fI\%Fragment\fP class with content and
\fI\%Style\fP class containing colors and other text formatting can be
rendered into terminal\-compatible string with \fI\%SgrRenderer\fP, or into
HTML markup with \fI\%HtmlRenderer\fP, etc.
.TP
.B style
Class describing text format options: text color, background color,
boldness, underlining, etc. Styles can be inherited and merged
with each other. See \fI\%Style\fP constructor description for the details.
.TP
.B color
Three different classes describing the color options: \fI\%Color16\fP, \fI\%Color256\fP
and \fI\%ColorRGB\fP\&. The first one corresponds to 16\-color terminal mode, the
second \-\- to 256\-color mode, and the last one represents full RGB color
space rather than color index palette. The first two also contain terminal
\fI\%SGR\fP bindings.
.UNINDENT
.SS Core methods
.TS
center;
|l|l|.
_
T{
\fI\%text.render\fP([string, fmt, renderer, no_log])
T}	T{
\&.
T}
_
T{
\fI\%text.echo\fP([string, fmt, renderer, nl, file, ...])
T}	T{
\&.
T}
_
T{
\fI\%color.resolve_color\fP(subject[, color_type, ...])
T}	T{
Suggested usage is to transform the user input in a free form in an attempt to find any matching color.
T}
_
T{
\fI\%style.make_style\fP([fmt])
T}	T{
General \fI\%Style\fP constructor.
T}
_
T{
\fI\%style.merge_styles\fP([base, fallbacks, overwrites])
T}	T{
Bulk style merging method.
T}
_
.TE
.SS Colors
.SS Styles
.SS Output format control
.SS Color mode fallbacks
.SS Class hierarchy
.IP "System Message: ERROR/3 (/home/a.shavykin/dl/pytermor/docs/guide/high-level.rst:, line 81)"
Unknown directive type \(dqgrid\(dq.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&.. grid:: 2
   :class\-container: inheritance\-columns

   .. grid\-item::

      .. inheritance\-diagram:: pytermor.color
         :top\-classes:         pytermor.color.IColor
         :caption:             \(ga\(gaIColor\(ga\(ga inheritance diagram
         :parts: 1

   .. grid\-item::

      .. inheritance\-diagram:: pytermor.text
         :top\-classes:         pytermor.text.IRenderable
         :caption:             \(gaIRenderable\(ga inheritance diagram
         :parts: 1
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Renderers
.INDENT 0.0
.INDENT 2.5
\fI\%IRenderer\fP inheritance tree.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
Win32Renderer ?
.UNINDENT
.UNINDENT
.SS String filters
.IP "System Message: ERROR/3 (/home/a.shavykin/dl/pytermor/docs/guide/str-filters.rst:, line 7)"
Unknown directive type \(dqgrid\(dq.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&.. grid:: 1
   :class\-container: inheritance\-columns

   .. grid\-item::

      .. inheritance\-diagram::   pytermor.filter
         :parts: 1
         :top\-classes:           pytermor.filter.IFilter
         :caption:               \(gaIFilter\(ga inheritance tree
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Number formatters
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
The library contains @TODO
.UNINDENT
.UNINDENT
.SS Auto\-float formatter
.SS Prefixed\-unit formatter
.SS Time delta formatter
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import pytermor.numfmt
from pytermor import RendererManager, SgrRenderer
from pytermor.numfmt import time_delta

seconds_list = [2, 10, 60, 2700, 32340, 273600, 4752000, 864000000]
max_len_list = [3, 6, 10]

for max_len in max_len_list:
    formatter = pytermor.numfmt.dual_registry.find_matching(max_len)

RendererManager.set_default(SgrRenderer)
for seconds in seconds_list:
    for max_len in max_len_list:
        formatter = pytermor.numfmt.dual_registry.get_by_max_len(max_len)
        print(formatter.format(seconds), end=\(aq \(aq)
    print()

.ft P
.fi
.UNINDENT
.UNINDENT
[image]
.IP "System Message: ERROR/3 (/home/a.shavykin/dl/pytermor/docs/guide/num-formatters.rst:, line 34)"
Unknown directive type \(dqgrid\(dq.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&.. grid:: 1
   :class\-container: inheritance\-columns

   .. grid\-item::

      .. inheritance\-diagram::   pytermor.numfmt
         :parts: 1
         :top\-classes:           pytermor.numfmt.NumFormatter
         :caption:               \(gaNumFormatter\(ga inheritance tree

.ft P
.fi
.UNINDENT
.UNINDENT
.SS ColorRGB collection
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
@TODO
.UNINDENT
.UNINDENT
.SS Low\-level core API
.sp
So, what\(aqs happening under the hood?
.SS Glossary
.INDENT 0.0
.TP
.B ANSI escape sequence
is a standard for in\-band signaling to control cursor location, color,
font styling, and other options on video text terminals and terminal
emulators. Certain sequences of bytes, most starting with an ASCII escape
character and a bracket character, are embedded into text. The terminal
interprets these sequences as commands, rather than text to display
verbatim. [1]
.TP
.B SGR
\fI\%ANSI escape sequence\fP with varying amount of parameters. SGR sequences
allow to change the color of text or/and terminal background (in 3 different
color spaces) as well as decorate text with italic style, underlining,
overlining, cross\-lining, making it bold or blinking etc. Represented by
\fI\%SequenceSGR\fP class.
.UNINDENT
.SS Core methods
.TS
center;
|l|l|.
_
T{
\fI\%ansi.SequenceSGR\fP(*params)
T}	T{
Class representing SGR\-type escape sequence with varying amount of parameters.
T}
_
T{
\fI\%ansi.make_color_256\fP(code[, target])
T}	T{
Wrapper for creation of \fI\%SequenceSGR\fP that sets foreground (or background) to one of 256\-color palette value.:
T}
_
T{
\fI\%ansi.make_color_rgb\fP(r, g, b[, target])
T}	T{
Wrapper for creation of \fI\%SequenceSGR\fP operating in True Color mode (16M). Valid values for \fBr\fP, \fBg\fP and \fBb\fP are in range of [0; 255]. This range linearly translates into [0x00; 0xFF] for each channel. The result value is composed as \(dq#RRGGBB\(dq. For example, a sequence with color of #ff3300 can be created with::.
T}
_
.TE
.SS Format soft reset
.sp
There are two ways to manage color and attribute termination:
.INDENT 0.0
.IP \(bu 2
hard reset (SGR\-0 or \fBESC [0m\fP)
.IP \(bu 2
soft reset (SGR\-22, 23, 24 etc.)
.UNINDENT
.sp
The main difference between them is that \fIhard\fP reset disables all formatting after itself, while \fIsoft\fP
reset disables only actually necessary attributes (i.e. used as opening sequence in \fBSpan\fP instance\(aqs context)
and keeps the other.
.sp
That\(aqs what \fBSpan\fP class is designed for: to simplify creation of soft\-resetting text spans, so that developer
doesn\(aqt have to restore all previously applied formats after every closing sequence.
.sp
Example
.sp
We are given a text span which is initially \fIbold\fP and \fIunderlined\fP\&. We want to recolor a few words inside of this
span. By default this will result in losing all the formatting to the right of updated text span (because
\fI\%RESET\fP, or \fBESC [0m\fP, clears all text attributes).
.sp
However, there is an option to specify what attributes should be disabled or let the library do that for you:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import Span, Spans, SeqIndex

# implicitly:
span_warn = Span(93, 4)
# or explicitly:
span_warn = Span.init_explicit(
    SeqIndex.HI_YELLOW + SeqIndex.UNDERLINED,  # sequences can be summed up, remember?
    SeqIndex.COLOR_OFF + SeqIndex.UNDERLINED_OFF,  # \(dqcounteractive\(dq sequences
    hard_reset_after=False
)

orig_text = Spans.BOLD(f\(aqthis is {SeqIndex.BG_GRAY}the original{SeqIndex.RESET} string\(aq)
updated_text = orig_text.replace(\(aqoriginal\(aq, span_warn(\(aqupdated\(aq), 1)
print(orig_text, \(aq\en\(aq, updated_text)

.ft P
.fi
.UNINDENT
.UNINDENT
[image]
.sp
As you can see, the update went well \-\- we kept all the previously applied formatting. Of course, this method
cannot be 100% applicable; for example, imagine that original text was colored blue. After the update \(dqstring\(dq
word won\(aqt be blue anymore, as we used \fBSeqIndex.COLOR_OFF\fP escape sequence to neutralize our own yellow color.
But it still can be helpful for a majority of cases (especially when text is generated and formatted by the same
program and in one go).
.SS Working with Spans
.sp
Use \fBSpan\fP constructor to create new instance with specified control sequence(s) as a opening/starter sequence
and \fBautomatically composed\fP closing sequence that will terminate attributes defined in opening sequence while
keeping the others (soft reset).
.sp
Resulting sequence params\(aq order is the same as argument\(aqs order.
.sp
Each sequence param can be specified as:
.INDENT 0.0
.IP \(bu 2
string key (see \fI\%ANSI preset list\fP);
.IP \(bu 2
integer param value;
.IP \(bu 2
existing \fI\%SequenceSGR\fP instance (params will be extracted).
.UNINDENT
.sp
It\(aqs also possible to avoid auto\-composing mechanism and create \fBSpan\fP with
explicitly set parameters using \fBSpan.init_explicit()\fP\&.
.SS Creating and applying SGRs
.sp
You can use any of predefined sequences from \fI\%SeqIndex\fP registry or create your own via standard constructor. Valid
argument values as well as preset constants are described in \fI\%ANSI preset list\fP page.
.sp
\fBIMPORTANT:\fP
.INDENT 0.0
.INDENT 3.5
\fBSequenceSGR\fP with zero params was specifically implemented to translate into an empty string and not
into \fBESC [m\fP, which would make sense, but also could be very entangling, as terminal emulators interpret
that sequence as \fBESC [0m\fP, which is \fIhard\fP reset sequence.
.UNINDENT
.UNINDENT
.sp
There is also a set of methods for dynamic \fBSequenceSGR\fP creation:
.INDENT 0.0
.IP \(bu 2
\fI\%make_color_256()\fP will produce sequence operating in 256\-colors mode (for a complete list
see \fI\%ANSI preset list\fP);
.IP \(bu 2
\fI\%make_color_rgb()\fP will create a sequence capable of setting the colors in True Color 16M mode (however, some terminal emulators doesn\(aqt
support it).
.UNINDENT
.sp
To get the resulting sequence chars use \fI\%assemble()\fP method or cast instance to \fIstr\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import SequenceSGR

seq = SequenceSGR(4, 7)
msg = f\(aq({seq})\(aq

print(msg + f\(aq{SequenceSGR(0).assemble()}\(aq)
print(str(msg.assemble()))
print(msg.assemble().hex(\(aq:\(aq))

.ft P
.fi
.UNINDENT
.UNINDENT
[image]
.INDENT 0.0
.IP \(bu 2
First line is the string with encoded escape sequence;
.IP \(bu 2
Second line shows up the string in raw mode, as if sequences were ignored by the terminal;
.IP \(bu 2
Third line is hexadecimal string representation.
.UNINDENT
.SS \fI\%SGR\fP sequence structure
.INDENT 0.0
.IP 1. 3
\fBESC\fP is escape \fIcontrol character\fP, which opens a control sequence (can also be
written as \fB\ex1b\fP, \fB\e033\fP or \fB\ee\fP).
.IP 2. 3
\fB[\fP is sequence \fIintroducer\fP; it determines the type of control sequence (in this case
it\(aqs CSI).
.IP 3. 3
\fB4\fP and \fB7\fP are \fIparameters\fP of the escape sequence; they mean \(dqunderlined\(dq and \(dqinversed\(dq
attributes respectively. Those parameters must be separated by \fB;\fP\&.
.IP 4. 3
\fBm\fP is sequence \fIterminator\fP; it also determines the sub\-type of sequence, in our
case SGR\&. Sequences of this kind are most commonly encountered.
.UNINDENT
.SS Combining SGRs
.sp
One instance of \fI\%SequenceSGR\fP can be added to another. This will result in a new \fBSequenceSGR\fP with combined params.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import SequenceSGR, SeqIndex

combined = SequenceSGR(1, 31) + SequenceSGR(4)
print(f\(aq{combined}combined{SeqIndex.RESET}\(aq, str(combined).assemble())

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Class hierarchy
.INDENT 0.0
.INDENT 2.5
\fI\%ISequence\fP inheritance tree.UNINDENT
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.sp
Sources
.IP [1] 5
\fI\%https://en.wikipedia.org/wiki/ANSI_escape_code\fP
.INDENT 0.0
.IP 2. 3
\fI\%XTerm Control Sequences\fP
.IP 3. 3
\fI\%ECMA\-48 specification\fP
.UNINDENT
.SS ANSI preset list
.sp
Preset lists are omitted from API docs to avoid unnesessary duplication;
summary list of all presets defined in the library (excluding \fButil*\fP)
is displayed here.
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
USAGE \- list all memthods that accept string keys of those prsets.
.UNINDENT
.UNINDENT
.sp
There are two types of color palettes used in modern terminals \-\- first one
containing 16 colors (\fI\%Color16\fP), and second one consisting of 256 colors
(\fI\%Color256\fP). There is also True Color mode (referenced as \fIRGB\fP mode),
but it is not palette\-based.
.SS Meta, attributes, resetters
.TS
center;
|l|l|l|l|l|.
_
T{
T}	T{
\fBName\fP
T}	T{
int
T}	T{
sty
T}	T{
\fBDescription\fP
T}
_
T{
Meta
T}
_
T{
T}	T{
\fBNOOP\fP
T}	T{
T}	T{
\fBV\fP
T}	T{
No\-operation; always assembled as empty string
T}
_
T{
T}	T{
\fBRESET\fP
T}	T{
\fB0\fP
T}	T{
T}	T{
Reset all attributes and colors
T}
_
T{
Attributes
T}
_
T{
T}	T{
\fBBOLD\fP
T}	T{
\fB1\fP
T}	T{
\fBV\fP\ [1]
T}	T{
Bold or increased intensity
T}
_
T{
T}	T{
\fBDIM\fP
T}	T{
\fB2\fP
T}	T{
\fBV\fP
T}	T{
Faint, decreased intensity
T}
_
T{
T}	T{
\fBITALIC\fP
T}	T{
\fB3\fP
T}	T{
\fBV\fP
T}	T{
Italic; \fInot widely supported\fP
T}
_
T{
T}	T{
\fBUNDERLINED\fP
T}	T{
\fB4\fP
T}	T{
\fBV\fP
T}	T{
Underline
T}
_
T{
T}	T{
\fBBLINK_SLOW\fP
T}	T{
\fB5\fP
T}	T{
\fBV\fP\ [2]
T}	T{
Set blinking to < 150 cpm
T}
_
T{
T}	T{
\fBBLINK_FAST\fP
T}	T{
\fB6\fP
T}	T{
T}	T{
Set blinking to 150+ cpm; \fInot widely supported\fP
T}
_
T{
T}	T{
\fBINVERSED\fP
T}	T{
\fB7\fP
T}	T{
\fBV\fP
T}	T{
Swap foreground and background colors
T}
_
T{
T}	T{
\fBHIDDEN\fP
T}	T{
\fB8\fP
T}	T{
T}	T{
Conceal characters; \fInot widely supported\fP
T}
_
T{
T}	T{
\fBCROSSLINED\fP
T}	T{
\fB9\fP
T}	T{
\fBV\fP
T}	T{
Strikethrough
T}
_
T{
T}	T{
\fBDOUBLE_UNDERLINED\fP
T}	T{
\fB21\fP
T}	T{
T}	T{
Double\-underline; \fIon several terminals disables\fP \fBBOLD\fP \fIinstead\fP
T}
_
T{
T}	T{
\fBCOLOR_EXTENDED\fP
T}	T{
\fB38\fP
T}	T{
T}	T{
Set foreground color [\fIindexed\fP/\fIRGB\fP mode];
\fIuse\fP \fI\%make_color_256\fP \fIand\fP \fI\%make_color_rgb\fP \fIinstead\fP
T}
_
T{
T}	T{
\fBBG_COLOR_EXTENDED\fP
T}	T{
\fB48\fP
T}	T{
T}	T{
Set background color [\fIindexed\fP/\fIRGB\fP mode];
\fIuse\fP \fI\%make_color_256\fP \fIand\fP \fI\%make_color_rgb\fP \fIinstead\fP
T}
_
T{
T}	T{
\fBOVERLINED\fP
T}	T{
\fB53\fP
T}	T{
\fBV\fP
T}	T{
Overline; \fInot widely supported\fP
T}
_
T{
Resetters
T}
_
T{
T}	T{
\fBBOLD_DIM_OFF\fP
T}	T{
\fB22\fP
T}	T{
T}	T{
Disable \fBBOLD\fP and \fBDIM\fP attributes. \fISpecial aspects... It\(aqs
impossible to reliably disable them on a separate basis.\fP
T}
_
T{
T}	T{
\fBITALIC_OFF\fP
T}	T{
\fB23\fP
T}	T{
T}	T{
Disable italic
T}
_
T{
T}	T{
\fBUNDERLINED_OFF\fP
T}	T{
\fB24\fP
T}	T{
T}	T{
Disable underlining
T}
_
T{
T}	T{
\fBBLINK_OFF\fP
T}	T{
\fB25\fP
T}	T{
T}	T{
Disable blinking
T}
_
T{
T}	T{
\fBINVERSED_OFF\fP
T}	T{
\fB27\fP
T}	T{
T}	T{
Disable inversing
T}
_
T{
T}	T{
\fBHIDDEN_OFF\fP
T}	T{
\fB28\fP
T}	T{
T}	T{
Disable conecaling
T}
_
T{
T}	T{
\fBCROSSLINED_OFF\fP
T}	T{
\fB29\fP
T}	T{
T}	T{
Disable strikethrough
T}
_
T{
T}	T{
\fBCOLOR_OFF\fP
T}	T{
\fB39\fP
T}	T{
T}	T{
Reset foreground color
T}
_
T{
T}	T{
\fBBG_COLOR_OFF\fP
T}	T{
\fB49\fP
T}	T{
T}	T{
Reset background color
T}
_
T{
T}	T{
\fBOVERLINED_OFF\fP
T}	T{
\fB55\fP
T}	T{
T}	T{
Disable overlining
T}
_
T{
.IP [1] 5
for this and subsequent items in \(dqAttributes\(dq section: as boolean flags.
.IP [2] 5
as \fBblink\fP\&.
T}
_
.TE
.SS Color16 presets
.TS
center;
|l|l|l|l|l|l|.
_
T{
T}	T{
\fBName\fP
T}	T{
int
T}	T{
sty
T}	T{
\fBRGB code\fP
T}	T{
\fBXTerm name\fP
T}
_
T{
Foreground \fIdefault\fP colors
T}
_
T{
[image]
T}	T{
\fBBLACK\fP
T}	T{
\fB30\fP
T}	T{
T}	T{
\fB#000000\fP
T}	T{
Black
T}
_
T{
[image]
T}	T{
\fBRED\fP
T}	T{
\fB31\fP
T}	T{
T}	T{
\fB#800000\fP
T}	T{
Maroon
T}
_
T{
[image]
T}	T{
\fBGREEN\fP
T}	T{
\fB32\fP
T}	T{
T}	T{
\fB#008000\fP
T}	T{
Green
T}
_
T{
[image]
T}	T{
\fBYELLOW\fP
T}	T{
\fB33\fP
T}	T{
T}	T{
\fB#808000\fP
T}	T{
Olive
T}
_
T{
[image]
T}	T{
\fBBLUE\fP
T}	T{
\fB34\fP
T}	T{
T}	T{
\fB#000080\fP
T}	T{
Navy
T}
_
T{
[image]
T}	T{
\fBMAGENTA\fP
T}	T{
\fB35\fP
T}	T{
T}	T{
\fB#800080\fP
T}	T{
Purple
T}
_
T{
[image]
T}	T{
\fBCYAN\fP
T}	T{
\fB36\fP
T}	T{
T}	T{
\fB#008080\fP
T}	T{
Teal
T}
_
T{
[image]
T}	T{
\fBWHITE\fP
T}	T{
\fB37\fP
T}	T{
T}	T{
\fB#c0c0c0\fP
T}	T{
Silver
T}
_
T{
Background \fIdefault\fP colors
T}
_
T{
[image]
T}	T{
\fBBG_BLACK\fP
T}	T{
\fB40\fP
T}	T{
T}	T{
\fB#000000\fP
T}	T{
Black
T}
_
T{
[image]
T}	T{
\fBBG_RED\fP
T}	T{
\fB41\fP
T}	T{
T}	T{
\fB#800000\fP
T}	T{
Maroon
T}
_
T{
[image]
T}	T{
\fBBG_GREEN\fP
T}	T{
\fB42\fP
T}	T{
T}	T{
\fB#008000\fP
T}	T{
Green
T}
_
T{
[image]
T}	T{
\fBBG_YELLOW\fP
T}	T{
\fB43\fP
T}	T{
T}	T{
\fB#808000\fP
T}	T{
Olive
T}
_
T{
[image]
T}	T{
\fBBG_BLUE\fP
T}	T{
\fB44\fP
T}	T{
T}	T{
\fB#000080\fP
T}	T{
Navy
T}
_
T{
[image]
T}	T{
\fBBG_MAGENTA\fP
T}	T{
\fB45\fP
T}	T{
T}	T{
\fB#800080\fP
T}	T{
Purple
T}
_
T{
[image]
T}	T{
\fBBG_CYAN\fP
T}	T{
\fB46\fP
T}	T{
T}	T{
\fB#008080\fP
T}	T{
Teal
T}
_
T{
[image]
T}	T{
\fBBG_WHITE\fP
T}	T{
\fB47\fP
T}	T{
T}	T{
\fB#c0c0c0\fP
T}	T{
Silver
T}
_
T{
High\-intensity foreground \fIdefault\fP colors
T}
_
T{
[image]
T}	T{
\fBGRAY\fP
T}	T{
\fB90\fP
T}	T{
T}	T{
\fB#808080\fP
T}	T{
Grey
T}
_
T{
[image]
T}	T{
\fBHI_RED\fP
T}	T{
\fB91\fP
T}	T{
T}	T{
\fB#ff0000\fP
T}	T{
Red
T}
_
T{
[image]
T}	T{
\fBHI_GREEN\fP
T}	T{
\fB92\fP
T}	T{
T}	T{
\fB#00ff00\fP
T}	T{
Lime
T}
_
T{
[image]
T}	T{
\fBHI_YELLOW\fP
T}	T{
\fB93\fP
T}	T{
T}	T{
\fB#ffff00\fP
T}	T{
Yellow
T}
_
T{
[image]
T}	T{
\fBHI_BLUE\fP
T}	T{
\fB94\fP
T}	T{
T}	T{
\fB#0000ff\fP
T}	T{
Blue
T}
_
T{
[image]
T}	T{
\fBHI_MAGENTA\fP
T}	T{
\fB95\fP
T}	T{
T}	T{
\fB#ff00ff\fP
T}	T{
Fuchsia
T}
_
T{
[image]
T}	T{
\fBHI_CYAN\fP
T}	T{
\fB96\fP
T}	T{
T}	T{
\fB#00ffff\fP
T}	T{
Aqua
T}
_
T{
[image]
T}	T{
\fBHI_WHITE\fP
T}	T{
\fB97\fP
T}	T{
T}	T{
\fB#ffffff\fP
T}	T{
White
T}
_
T{
High\-intensity background \fIdefault\fP colors
T}
_
T{
[image]
T}	T{
\fBBG_GRAY\fP
T}	T{
\fB100\fP
T}	T{
T}	T{
\fB#808080\fP
T}	T{
Grey
T}
_
T{
[image]
T}	T{
\fBBG_HI_RED\fP
T}	T{
\fB101\fP
T}	T{
T}	T{
\fB#ff0000\fP
T}	T{
Red
T}
_
T{
[image]
T}	T{
\fBBG_HI_GREEN\fP
T}	T{
\fB102\fP
T}	T{
T}	T{
\fB#00ff00\fP
T}	T{
Lime
T}
_
T{
[image]
T}	T{
\fBBG_HI_YELLOW\fP
T}	T{
\fB103\fP
T}	T{
T}	T{
\fB#ffff00\fP
T}	T{
Yellow
T}
_
T{
[image]
T}	T{
\fBBG_HI_BLUE\fP
T}	T{
\fB104\fP
T}	T{
T}	T{
\fB#0000ff\fP
T}	T{
Blue
T}
_
T{
[image]
T}	T{
\fBBG_HI_MAGENTA\fP
T}	T{
\fB105\fP
T}	T{
T}	T{
\fB#ff00ff\fP
T}	T{
Fuchsia
T}
_
T{
[image]
T}	T{
\fBBG_HI_CYAN\fP
T}	T{
\fB106\fP
T}	T{
T}	T{
\fB#00ffff\fP
T}	T{
Aqua
T}
_
T{
[image]
T}	T{
\fBBG_HI_WHITE\fP
T}	T{
\fB107\fP
T}	T{
T}	T{
\fB#ffffff\fP
T}	T{
White
T}
_
.TE
.SS Color256 presets
.TS
center;
|l|l|l|l|l|l|.
_
T{
T}	T{
\fBName\fP
T}	T{
int
T}	T{
sty
T}	T{
\fBRGB code\fP
T}	T{
\fBXTerm name\fP
T}
_
T{
T}	T{
\fBXTERM_BLACK\fP [3]
T}	T{
\fB0\fP
T}	T{
T}	T{
\fB#000000\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_MAROON\fP
T}	T{
\fB1\fP
T}	T{
T}	T{
\fB#800000\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREEN\fP
T}	T{
\fB2\fP
T}	T{
T}	T{
\fB#008000\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_OLIVE\fP
T}	T{
\fB3\fP
T}	T{
T}	T{
\fB#808000\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_NAVY\fP
T}	T{
\fB4\fP
T}	T{
T}	T{
\fB#000080\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_PURPLE_5\fP
T}	T{
\fB5\fP
T}	T{
T}	T{
\fB#800080\fP
T}	T{
\fBPurple\fP [4]
T}
_
T{
T}	T{
\fBXTERM_TEAL\fP
T}	T{
\fB6\fP
T}	T{
T}	T{
\fB#008080\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_SILVER\fP
T}	T{
\fB7\fP
T}	T{
T}	T{
\fB#c0c0c0\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY\fP
T}	T{
\fB8\fP
T}	T{
T}	T{
\fB#808080\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_RED\fP
T}	T{
\fB9\fP
T}	T{
T}	T{
\fB#ff0000\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_LIME\fP
T}	T{
\fB10\fP
T}	T{
T}	T{
\fB#00ff00\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_YELLOW\fP
T}	T{
\fB11\fP
T}	T{
T}	T{
\fB#ffff00\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_BLUE\fP
T}	T{
\fB12\fP
T}	T{
T}	T{
\fB#0000ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_FUCHSIA\fP
T}	T{
\fB13\fP
T}	T{
T}	T{
\fB#ff00ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_AQUA\fP
T}	T{
\fB14\fP
T}	T{
T}	T{
\fB#00ffff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_WHITE\fP
T}	T{
\fB15\fP
T}	T{
T}	T{
\fB#ffffff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_0\fP
T}	T{
\fB16\fP
T}	T{
T}	T{
\fB#000000\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_NAVY_BLUE\fP
T}	T{
\fB17\fP
T}	T{
T}	T{
\fB#00005f\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DARK_BLUE\fP
T}	T{
\fB18\fP
T}	T{
T}	T{
\fB#000087\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_BLUE_3\fP
T}	T{
\fB19\fP
T}	T{
T}	T{
\fB#0000af\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_BLUE_2\fP
T}	T{
\fB20\fP
T}	T{
T}	T{
\fB#0000d7\fP
T}	T{
\fBBlue3\fP
T}
_
T{
T}	T{
\fBXTERM_BLUE_1\fP
T}	T{
\fB21\fP
T}	T{
T}	T{
\fB#0000ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DARK_GREEN\fP
T}	T{
\fB22\fP
T}	T{
T}	T{
\fB#005f00\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DEEP_SKY_BLUE_7\fP
T}	T{
\fB23\fP
T}	T{
T}	T{
\fB#005f5f\fP
T}	T{
\fBDeepSkyBlue4\fP
T}
_
T{
T}	T{
\fBXTERM_DEEP_SKY_BLUE_6\fP
T}	T{
\fB24\fP
T}	T{
T}	T{
\fB#005f87\fP
T}	T{
\fBDeepSkyBlue4\fP
T}
_
T{
T}	T{
\fBXTERM_DEEP_SKY_BLUE_5\fP
T}	T{
\fB25\fP
T}	T{
T}	T{
\fB#005faf\fP
T}	T{
\fBDeepSkyBlue4\fP
T}
_
T{
T}	T{
\fBXTERM_DODGER_BLUE_3\fP
T}	T{
\fB26\fP
T}	T{
T}	T{
\fB#005fd7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DODGER_BLUE_2\fP
T}	T{
\fB27\fP
T}	T{
T}	T{
\fB#005fff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREEN_5\fP
T}	T{
\fB28\fP
T}	T{
T}	T{
\fB#008700\fP
T}	T{
\fBGreen4\fP
T}
_
T{
T}	T{
\fBXTERM_SPRING_GREEN_4\fP
T}	T{
\fB29\fP
T}	T{
T}	T{
\fB#00875f\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_TURQUOISE_4\fP
T}	T{
\fB30\fP
T}	T{
T}	T{
\fB#008787\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DEEP_SKY_BLUE_4\fP
T}	T{
\fB31\fP
T}	T{
T}	T{
\fB#0087af\fP
T}	T{
\fBDeepSkyBlue3\fP
T}
_
T{
T}	T{
\fBXTERM_DEEP_SKY_BLUE_3\fP
T}	T{
\fB32\fP
T}	T{
T}	T{
\fB#0087d7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DODGER_BLUE_1\fP
T}	T{
\fB33\fP
T}	T{
T}	T{
\fB#0087ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREEN_4\fP
T}	T{
\fB34\fP
T}	T{
T}	T{
\fB#00af00\fP
T}	T{
\fBGreen3\fP
T}
_
T{
T}	T{
\fBXTERM_SPRING_GREEN_5\fP
T}	T{
\fB35\fP
T}	T{
T}	T{
\fB#00af5f\fP
T}	T{
\fBSpringGreen3\fP
T}
_
T{
T}	T{
\fBXTERM_DARK_CYAN\fP
T}	T{
\fB36\fP
T}	T{
T}	T{
\fB#00af87\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_LIGHT_SEA_GREEN\fP
T}	T{
\fB37\fP
T}	T{
T}	T{
\fB#00afaf\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DEEP_SKY_BLUE_2\fP
T}	T{
\fB38\fP
T}	T{
T}	T{
\fB#00afd7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DEEP_SKY_BLUE_1\fP
T}	T{
\fB39\fP
T}	T{
T}	T{
\fB#00afff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREEN_3\fP
T}	T{
\fB40\fP
T}	T{
T}	T{
\fB#00d700\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_SPRING_GREEN_3\fP
T}	T{
\fB41\fP
T}	T{
T}	T{
\fB#00d75f\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_SPRING_GREEN_6\fP
T}	T{
\fB42\fP
T}	T{
T}	T{
\fB#00d787\fP
T}	T{
\fBSpringGreen2\fP
T}
_
T{
T}	T{
\fBXTERM_CYAN_3\fP
T}	T{
\fB43\fP
T}	T{
T}	T{
\fB#00d7af\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DARK_TURQUOISE\fP
T}	T{
\fB44\fP
T}	T{
T}	T{
\fB#00d7d7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_TURQUOISE_2\fP
T}	T{
\fB45\fP
T}	T{
T}	T{
\fB#00d7ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREEN_2\fP
T}	T{
\fB46\fP
T}	T{
T}	T{
\fB#00ff00\fP
T}	T{
\fBGreen1\fP
T}
_
T{
T}	T{
\fBXTERM_SPRING_GREEN_2\fP
T}	T{
\fB47\fP
T}	T{
T}	T{
\fB#00ff5f\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_SPRING_GREEN_1\fP
T}	T{
\fB48\fP
T}	T{
T}	T{
\fB#00ff87\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_MEDIUM_SPRING_GREEN\fP
T}	T{
\fB49\fP
T}	T{
T}	T{
\fB#00ffaf\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_CYAN_2\fP
T}	T{
\fB50\fP
T}	T{
T}	T{
\fB#00ffd7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_CYAN_1\fP
T}	T{
\fB51\fP
T}	T{
T}	T{
\fB#00ffff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DARK_RED_2\fP
T}	T{
\fB52\fP
T}	T{
T}	T{
\fB#5f0000\fP
T}	T{
\fBDarkRed\fP
T}
_
T{
T}	T{
\fBXTERM_DEEP_PINK_8\fP
T}	T{
\fB53\fP
T}	T{
T}	T{
\fB#5f005f\fP
T}	T{
\fBDeepPink4\fP
T}
_
T{
T}	T{
\fBXTERM_PURPLE_6\fP
T}	T{
\fB54\fP
T}	T{
T}	T{
\fB#5f0087\fP
T}	T{
\fBPurple4\fP
T}
_
T{
T}	T{
\fBXTERM_PURPLE_4\fP
T}	T{
\fB55\fP
T}	T{
T}	T{
\fB#5f00af\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_PURPLE_3\fP
T}	T{
\fB56\fP
T}	T{
T}	T{
\fB#5f00d7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_BLUE_VIOLET\fP
T}	T{
\fB57\fP
T}	T{
T}	T{
\fB#5f00ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_ORANGE_4\fP
T}	T{
\fB58\fP
T}	T{
T}	T{
\fB#5f5f00\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_37\fP
T}	T{
\fB59\fP
T}	T{
T}	T{
\fB#5f5f5f\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_MEDIUM_PURPLE_7\fP
T}	T{
\fB60\fP
T}	T{
T}	T{
\fB#5f5f87\fP
T}	T{
\fBMediumPurple4\fP
T}
_
T{
T}	T{
\fBXTERM_SLATE_BLUE_3\fP
T}	T{
\fB61\fP
T}	T{
T}	T{
\fB#5f5faf\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_SLATE_BLUE_2\fP
T}	T{
\fB62\fP
T}	T{
T}	T{
\fB#5f5fd7\fP
T}	T{
\fBSlateBlue3\fP
T}
_
T{
T}	T{
\fBXTERM_ROYAL_BLUE_1\fP
T}	T{
\fB63\fP
T}	T{
T}	T{
\fB#5f5fff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_CHARTREUSE_6\fP
T}	T{
\fB64\fP
T}	T{
T}	T{
\fB#5f8700\fP
T}	T{
\fBChartreuse4\fP
T}
_
T{
T}	T{
\fBXTERM_DARK_SEA_GREEN_9\fP
T}	T{
\fB65\fP
T}	T{
T}	T{
\fB#5f875f\fP
T}	T{
\fBDarkSeaGreen4\fP
T}
_
T{
T}	T{
\fBXTERM_PALE_TURQUOISE_4\fP
T}	T{
\fB66\fP
T}	T{
T}	T{
\fB#5f8787\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_STEEL_BLUE\fP
T}	T{
\fB67\fP
T}	T{
T}	T{
\fB#5f87af\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_STEEL_BLUE_3\fP
T}	T{
\fB68\fP
T}	T{
T}	T{
\fB#5f87d7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_CORNFLOWER_BLUE\fP
T}	T{
\fB69\fP
T}	T{
T}	T{
\fB#5f87ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_CHARTREUSE_5\fP
T}	T{
\fB70\fP
T}	T{
T}	T{
\fB#5faf00\fP
T}	T{
\fBChartreuse3\fP
T}
_
T{
T}	T{
\fBXTERM_DARK_SEA_GREEN_8\fP
T}	T{
\fB71\fP
T}	T{
T}	T{
\fB#5faf5f\fP
T}	T{
\fBDarkSeaGreen4\fP
T}
_
T{
T}	T{
\fBXTERM_CADET_BLUE_2\fP
T}	T{
\fB72\fP
T}	T{
T}	T{
\fB#5faf87\fP
T}	T{
\fBCadetBlue\fP
T}
_
T{
T}	T{
\fBXTERM_CADET_BLUE\fP
T}	T{
\fB73\fP
T}	T{
T}	T{
\fB#5fafaf\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_SKY_BLUE_3\fP
T}	T{
\fB74\fP
T}	T{
T}	T{
\fB#5fafd7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_STEEL_BLUE_2\fP
T}	T{
\fB75\fP
T}	T{
T}	T{
\fB#5fafff\fP
T}	T{
\fBSteelBlue1\fP
T}
_
T{
T}	T{
\fBXTERM_CHARTREUSE_4\fP
T}	T{
\fB76\fP
T}	T{
T}	T{
\fB#5fd700\fP
T}	T{
\fBChartreuse3\fP
T}
_
T{
T}	T{
\fBXTERM_PALE_GREEN_4\fP
T}	T{
\fB77\fP
T}	T{
T}	T{
\fB#5fd75f\fP
T}	T{
\fBPaleGreen3\fP
T}
_
T{
T}	T{
\fBXTERM_SEA_GREEN_3\fP
T}	T{
\fB78\fP
T}	T{
T}	T{
\fB#5fd787\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_AQUAMARINE_3\fP
T}	T{
\fB79\fP
T}	T{
T}	T{
\fB#5fd7af\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_MEDIUM_TURQUOISE\fP
T}	T{
\fB80\fP
T}	T{
T}	T{
\fB#5fd7d7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_STEEL_BLUE_1\fP
T}	T{
\fB81\fP
T}	T{
T}	T{
\fB#5fd7ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_CHARTREUSE_2\fP
T}	T{
\fB82\fP
T}	T{
T}	T{
\fB#5fff00\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_SEA_GREEN_4\fP
T}	T{
\fB83\fP
T}	T{
T}	T{
\fB#5fff5f\fP
T}	T{
\fBSeaGreen2\fP
T}
_
T{
T}	T{
\fBXTERM_SEA_GREEN_2\fP
T}	T{
\fB84\fP
T}	T{
T}	T{
\fB#5fff87\fP
T}	T{
\fBSeaGreen1\fP
T}
_
T{
T}	T{
\fBXTERM_SEA_GREEN_1\fP
T}	T{
\fB85\fP
T}	T{
T}	T{
\fB#5fffaf\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_AQUAMARINE_2\fP
T}	T{
\fB86\fP
T}	T{
T}	T{
\fB#5fffd7\fP
T}	T{
\fBAquamarine1\fP
T}
_
T{
T}	T{
\fBXTERM_DARK_SLATE_GRAY_2\fP
T}	T{
\fB87\fP
T}	T{
T}	T{
\fB#5fffff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DARK_RED\fP
T}	T{
\fB88\fP
T}	T{
T}	T{
\fB#870000\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DEEP_PINK_7\fP
T}	T{
\fB89\fP
T}	T{
T}	T{
\fB#87005f\fP
T}	T{
\fBDeepPink4\fP
T}
_
T{
T}	T{
\fBXTERM_DARK_MAGENTA_2\fP
T}	T{
\fB90\fP
T}	T{
T}	T{
\fB#870087\fP
T}	T{
\fBDarkMagenta\fP
T}
_
T{
T}	T{
\fBXTERM_DARK_MAGENTA\fP
T}	T{
\fB91\fP
T}	T{
T}	T{
\fB#8700af\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DARK_VIOLET_2\fP
T}	T{
\fB92\fP
T}	T{
T}	T{
\fB#8700d7\fP
T}	T{
\fBDarkViolet\fP
T}
_
T{
T}	T{
\fBXTERM_PURPLE_2\fP
T}	T{
\fB93\fP
T}	T{
T}	T{
\fB#8700ff\fP
T}	T{
\fBPurple\fP
T}
_
T{
T}	T{
\fBXTERM_ORANGE_3\fP
T}	T{
\fB94\fP
T}	T{
T}	T{
\fB#875f00\fP
T}	T{
\fBOrange4\fP
T}
_
T{
T}	T{
\fBXTERM_LIGHT_PINK_3\fP
T}	T{
\fB95\fP
T}	T{
T}	T{
\fB#875f5f\fP
T}	T{
\fBLightPink4\fP
T}
_
T{
T}	T{
\fBXTERM_PLUM_4\fP
T}	T{
\fB96\fP
T}	T{
T}	T{
\fB#875f87\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_MEDIUM_PURPLE_6\fP
T}	T{
\fB97\fP
T}	T{
T}	T{
\fB#875faf\fP
T}	T{
\fBMediumPurple3\fP
T}
_
T{
T}	T{
\fBXTERM_MEDIUM_PURPLE_5\fP
T}	T{
\fB98\fP
T}	T{
T}	T{
\fB#875fd7\fP
T}	T{
\fBMediumPurple3\fP
T}
_
T{
T}	T{
\fBXTERM_SLATE_BLUE_1\fP
T}	T{
\fB99\fP
T}	T{
T}	T{
\fB#875fff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_YELLOW_6\fP
T}	T{
\fB100\fP
T}	T{
T}	T{
\fB#878700\fP
T}	T{
\fBYellow4\fP
T}
_
T{
T}	T{
\fBXTERM_WHEAT_4\fP
T}	T{
\fB101\fP
T}	T{
T}	T{
\fB#87875f\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_53\fP
T}	T{
\fB102\fP
T}	T{
T}	T{
\fB#878787\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_LIGHT_SLATE_GREY\fP
T}	T{
\fB103\fP
T}	T{
T}	T{
\fB#8787af\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_MEDIUM_PURPLE_4\fP
T}	T{
\fB104\fP
T}	T{
T}	T{
\fB#8787d7\fP
T}	T{
\fBMediumPurple\fP
T}
_
T{
T}	T{
\fBXTERM_LIGHT_SLATE_BLUE\fP
T}	T{
\fB105\fP
T}	T{
T}	T{
\fB#8787ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_YELLOW_4\fP
T}	T{
\fB106\fP
T}	T{
T}	T{
\fB#87af00\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_6\fP
T}	T{
\fB107\fP
T}	T{
T}	T{
\fB#87af5f\fP
T}	T{
\fBDarkOliveGreen3\fP
T}
_
T{
T}	T{
\fBXTERM_DARK_SEA_GREEN_7\fP
T}	T{
\fB108\fP
T}	T{
T}	T{
\fB#87af87\fP
T}	T{
\fBDarkSeaGreen\fP
T}
_
T{
T}	T{
\fBXTERM_LIGHT_SKY_BLUE_3\fP
T}	T{
\fB109\fP
T}	T{
T}	T{
\fB#87afaf\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_LIGHT_SKY_BLUE_2\fP
T}	T{
\fB110\fP
T}	T{
T}	T{
\fB#87afd7\fP
T}	T{
\fBLightSkyBlue3\fP
T}
_
T{
T}	T{
\fBXTERM_SKY_BLUE_2\fP
T}	T{
\fB111\fP
T}	T{
T}	T{
\fB#87afff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_CHARTREUSE_3\fP
T}	T{
\fB112\fP
T}	T{
T}	T{
\fB#87d700\fP
T}	T{
\fBChartreuse2\fP
T}
_
T{
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_4\fP
T}	T{
\fB113\fP
T}	T{
T}	T{
\fB#87d75f\fP
T}	T{
\fBDarkOliveGreen3\fP
T}
_
T{
T}	T{
\fBXTERM_PALE_GREEN_3\fP
T}	T{
\fB114\fP
T}	T{
T}	T{
\fB#87d787\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DARK_SEA_GREEN_5\fP
T}	T{
\fB115\fP
T}	T{
T}	T{
\fB#87d7af\fP
T}	T{
\fBDarkSeaGreen3\fP
T}
_
T{
T}	T{
\fBXTERM_DARK_SLATE_GRAY_3\fP
T}	T{
\fB116\fP
T}	T{
T}	T{
\fB#87d7d7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_SKY_BLUE_1\fP
T}	T{
\fB117\fP
T}	T{
T}	T{
\fB#87d7ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_CHARTREUSE_1\fP
T}	T{
\fB118\fP
T}	T{
T}	T{
\fB#87ff00\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_LIGHT_GREEN_2\fP
T}	T{
\fB119\fP
T}	T{
T}	T{
\fB#87ff5f\fP
T}	T{
\fBLightGreen\fP
T}
_
T{
T}	T{
\fBXTERM_LIGHT_GREEN\fP
T}	T{
\fB120\fP
T}	T{
T}	T{
\fB#87ff87\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_PALE_GREEN_1\fP
T}	T{
\fB121\fP
T}	T{
T}	T{
\fB#87ffaf\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_AQUAMARINE_1\fP
T}	T{
\fB122\fP
T}	T{
T}	T{
\fB#87ffd7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DARK_SLATE_GRAY_1\fP
T}	T{
\fB123\fP
T}	T{
T}	T{
\fB#87ffff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_RED_4\fP
T}	T{
\fB124\fP
T}	T{
T}	T{
\fB#af0000\fP
T}	T{
\fBRed3\fP
T}
_
T{
T}	T{
\fBXTERM_DEEP_PINK_6\fP
T}	T{
\fB125\fP
T}	T{
T}	T{
\fB#af005f\fP
T}	T{
\fBDeepPink4\fP
T}
_
T{
T}	T{
\fBXTERM_MEDIUM_VIOLET_RED\fP
T}	T{
\fB126\fP
T}	T{
T}	T{
\fB#af0087\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_MAGENTA_6\fP
T}	T{
\fB127\fP
T}	T{
T}	T{
\fB#af00af\fP
T}	T{
\fBMagenta3\fP
T}
_
T{
T}	T{
\fBXTERM_DARK_VIOLET\fP
T}	T{
\fB128\fP
T}	T{
T}	T{
\fB#af00d7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_PURPLE\fP
T}	T{
\fB129\fP
T}	T{
T}	T{
\fB#af00ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DARK_ORANGE_3\fP
T}	T{
\fB130\fP
T}	T{
T}	T{
\fB#af5f00\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_INDIAN_RED_4\fP
T}	T{
\fB131\fP
T}	T{
T}	T{
\fB#af5f5f\fP
T}	T{
\fBIndianRed\fP
T}
_
T{
T}	T{
\fBXTERM_HOT_PINK_5\fP
T}	T{
\fB132\fP
T}	T{
T}	T{
\fB#af5f87\fP
T}	T{
\fBHotPink3\fP
T}
_
T{
T}	T{
\fBXTERM_MEDIUM_ORCHID_4\fP
T}	T{
\fB133\fP
T}	T{
T}	T{
\fB#af5faf\fP
T}	T{
\fBMediumOrchid3\fP
T}
_
T{
T}	T{
\fBXTERM_MEDIUM_ORCHID_3\fP
T}	T{
\fB134\fP
T}	T{
T}	T{
\fB#af5fd7\fP
T}	T{
\fBMediumOrchid\fP
T}
_
T{
T}	T{
\fBXTERM_MEDIUM_PURPLE_2\fP
T}	T{
\fB135\fP
T}	T{
T}	T{
\fB#af5fff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DARK_GOLDENROD\fP
T}	T{
\fB136\fP
T}	T{
T}	T{
\fB#af8700\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_LIGHT_SALMON_3\fP
T}	T{
\fB137\fP
T}	T{
T}	T{
\fB#af875f\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_ROSY_BROWN\fP
T}	T{
\fB138\fP
T}	T{
T}	T{
\fB#af8787\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_63\fP
T}	T{
\fB139\fP
T}	T{
T}	T{
\fB#af87af\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_MEDIUM_PURPLE_3\fP
T}	T{
\fB140\fP
T}	T{
T}	T{
\fB#af87d7\fP
T}	T{
\fBMediumPurple2\fP
T}
_
T{
T}	T{
\fBXTERM_MEDIUM_PURPLE_1\fP
T}	T{
\fB141\fP
T}	T{
T}	T{
\fB#af87ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GOLD_3\fP
T}	T{
\fB142\fP
T}	T{
T}	T{
\fB#afaf00\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DARK_KHAKI\fP
T}	T{
\fB143\fP
T}	T{
T}	T{
\fB#afaf5f\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_NAVAJO_WHITE_3\fP
T}	T{
\fB144\fP
T}	T{
T}	T{
\fB#afaf87\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_69\fP
T}	T{
\fB145\fP
T}	T{
T}	T{
\fB#afafaf\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_LIGHT_STEEL_BLUE_3\fP
T}	T{
\fB146\fP
T}	T{
T}	T{
\fB#afafd7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_LIGHT_STEEL_BLUE_2\fP
T}	T{
\fB147\fP
T}	T{
T}	T{
\fB#afafff\fP
T}	T{
\fBLightSteelBlue\fP
T}
_
T{
T}	T{
\fBXTERM_YELLOW_5\fP
T}	T{
\fB148\fP
T}	T{
T}	T{
\fB#afd700\fP
T}	T{
\fBYellow3\fP
T}
_
T{
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_5\fP
T}	T{
\fB149\fP
T}	T{
T}	T{
\fB#afd75f\fP
T}	T{
\fBDarkOliveGreen3\fP
T}
_
T{
T}	T{
\fBXTERM_DARK_SEA_GREEN_6\fP
T}	T{
\fB150\fP
T}	T{
T}	T{
\fB#afd787\fP
T}	T{
\fBDarkSeaGreen3\fP
T}
_
T{
T}	T{
\fBXTERM_DARK_SEA_GREEN_4\fP
T}	T{
\fB151\fP
T}	T{
T}	T{
\fB#afd7af\fP
T}	T{
\fBDarkSeaGreen2\fP
T}
_
T{
T}	T{
\fBXTERM_LIGHT_CYAN_3\fP
T}	T{
\fB152\fP
T}	T{
T}	T{
\fB#afd7d7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_LIGHT_SKY_BLUE_1\fP
T}	T{
\fB153\fP
T}	T{
T}	T{
\fB#afd7ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREEN_YELLOW\fP
T}	T{
\fB154\fP
T}	T{
T}	T{
\fB#afff00\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_3\fP
T}	T{
\fB155\fP
T}	T{
T}	T{
\fB#afff5f\fP
T}	T{
\fBDarkOliveGreen2\fP
T}
_
T{
T}	T{
\fBXTERM_PALE_GREEN_2\fP
T}	T{
\fB156\fP
T}	T{
T}	T{
\fB#afff87\fP
T}	T{
\fBPaleGreen1\fP
T}
_
T{
T}	T{
\fBXTERM_DARK_SEA_GREEN_3\fP
T}	T{
\fB157\fP
T}	T{
T}	T{
\fB#afffaf\fP
T}	T{
\fBDarkSeaGreen2\fP
T}
_
T{
T}	T{
\fBXTERM_DARK_SEA_GREEN_1\fP
T}	T{
\fB158\fP
T}	T{
T}	T{
\fB#afffd7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_PALE_TURQUOISE_1\fP
T}	T{
\fB159\fP
T}	T{
T}	T{
\fB#afffff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_RED_3\fP
T}	T{
\fB160\fP
T}	T{
T}	T{
\fB#d70000\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DEEP_PINK_5\fP
T}	T{
\fB161\fP
T}	T{
T}	T{
\fB#d7005f\fP
T}	T{
\fBDeepPink3\fP
T}
_
T{
T}	T{
\fBXTERM_DEEP_PINK_3\fP
T}	T{
\fB162\fP
T}	T{
T}	T{
\fB#d70087\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_MAGENTA_3\fP
T}	T{
\fB163\fP
T}	T{
T}	T{
\fB#d700af\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_MAGENTA_5\fP
T}	T{
\fB164\fP
T}	T{
T}	T{
\fB#d700d7\fP
T}	T{
\fBMagenta3\fP
T}
_
T{
T}	T{
\fBXTERM_MAGENTA_4\fP
T}	T{
\fB165\fP
T}	T{
T}	T{
\fB#d700ff\fP
T}	T{
\fBMagenta2\fP
T}
_
T{
T}	T{
\fBXTERM_DARK_ORANGE_2\fP
T}	T{
\fB166\fP
T}	T{
T}	T{
\fB#d75f00\fP
T}	T{
\fBDarkOrange3\fP
T}
_
T{
T}	T{
\fBXTERM_INDIAN_RED_3\fP
T}	T{
\fB167\fP
T}	T{
T}	T{
\fB#d75f5f\fP
T}	T{
\fBIndianRed\fP
T}
_
T{
T}	T{
\fBXTERM_HOT_PINK_4\fP
T}	T{
\fB168\fP
T}	T{
T}	T{
\fB#d75f87\fP
T}	T{
\fBHotPink3\fP
T}
_
T{
T}	T{
\fBXTERM_HOT_PINK_3\fP
T}	T{
\fB169\fP
T}	T{
T}	T{
\fB#d75faf\fP
T}	T{
\fBHotPink2\fP
T}
_
T{
T}	T{
\fBXTERM_ORCHID_3\fP
T}	T{
\fB170\fP
T}	T{
T}	T{
\fB#d75fd7\fP
T}	T{
\fBOrchid\fP
T}
_
T{
T}	T{
\fBXTERM_MEDIUM_ORCHID_2\fP
T}	T{
\fB171\fP
T}	T{
T}	T{
\fB#d75fff\fP
T}	T{
\fBMediumOrchid1\fP
T}
_
T{
T}	T{
\fBXTERM_ORANGE_2\fP
T}	T{
\fB172\fP
T}	T{
T}	T{
\fB#d78700\fP
T}	T{
\fBOrange3\fP
T}
_
T{
T}	T{
\fBXTERM_LIGHT_SALMON_2\fP
T}	T{
\fB173\fP
T}	T{
T}	T{
\fB#d7875f\fP
T}	T{
\fBLightSalmon3\fP
T}
_
T{
T}	T{
\fBXTERM_LIGHT_PINK_2\fP
T}	T{
\fB174\fP
T}	T{
T}	T{
\fB#d78787\fP
T}	T{
\fBLightPink3\fP
T}
_
T{
T}	T{
\fBXTERM_PINK_3\fP
T}	T{
\fB175\fP
T}	T{
T}	T{
\fB#d787af\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_PLUM_3\fP
T}	T{
\fB176\fP
T}	T{
T}	T{
\fB#d787d7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_VIOLET\fP
T}	T{
\fB177\fP
T}	T{
T}	T{
\fB#d787ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GOLD_2\fP
T}	T{
\fB178\fP
T}	T{
T}	T{
\fB#d7af00\fP
T}	T{
\fBGold3\fP
T}
_
T{
T}	T{
\fBXTERM_LIGHT_GOLDENROD_5\fP
T}	T{
\fB179\fP
T}	T{
T}	T{
\fB#d7af5f\fP
T}	T{
\fBLightGoldenrod3\fP
T}
_
T{
T}	T{
\fBXTERM_TAN\fP
T}	T{
\fB180\fP
T}	T{
T}	T{
\fB#d7af87\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_MISTY_ROSE_3\fP
T}	T{
\fB181\fP
T}	T{
T}	T{
\fB#d7afaf\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_THISTLE_3\fP
T}	T{
\fB182\fP
T}	T{
T}	T{
\fB#d7afd7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_PLUM_2\fP
T}	T{
\fB183\fP
T}	T{
T}	T{
\fB#d7afff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_YELLOW_3\fP
T}	T{
\fB184\fP
T}	T{
T}	T{
\fB#d7d700\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_KHAKI_3\fP
T}	T{
\fB185\fP
T}	T{
T}	T{
\fB#d7d75f\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_LIGHT_GOLDENROD_3\fP
T}	T{
\fB186\fP
T}	T{
T}	T{
\fB#d7d787\fP
T}	T{
\fBLightGoldenrod2\fP
T}
_
T{
T}	T{
\fBXTERM_LIGHT_YELLOW_3\fP
T}	T{
\fB187\fP
T}	T{
T}	T{
\fB#d7d7af\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_84\fP
T}	T{
\fB188\fP
T}	T{
T}	T{
\fB#d7d7d7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_LIGHT_STEEL_BLUE_1\fP
T}	T{
\fB189\fP
T}	T{
T}	T{
\fB#d7d7ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_YELLOW_2\fP
T}	T{
\fB190\fP
T}	T{
T}	T{
\fB#d7ff00\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_2\fP
T}	T{
\fB191\fP
T}	T{
T}	T{
\fB#d7ff5f\fP
T}	T{
\fBDarkOliveGreen1\fP
T}
_
T{
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_1\fP
T}	T{
\fB192\fP
T}	T{
T}	T{
\fB#d7ff87\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DARK_SEA_GREEN_2\fP
T}	T{
\fB193\fP
T}	T{
T}	T{
\fB#d7ffaf\fP
T}	T{
\fBDarkSeaGreen1\fP
T}
_
T{
T}	T{
\fBXTERM_HONEYDEW_2\fP
T}	T{
\fB194\fP
T}	T{
T}	T{
\fB#d7ffd7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_LIGHT_CYAN_1\fP
T}	T{
\fB195\fP
T}	T{
T}	T{
\fB#d7ffff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_RED_1\fP
T}	T{
\fB196\fP
T}	T{
T}	T{
\fB#ff0000\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DEEP_PINK_4\fP
T}	T{
\fB197\fP
T}	T{
T}	T{
\fB#ff005f\fP
T}	T{
\fBDeepPink2\fP
T}
_
T{
T}	T{
\fBXTERM_DEEP_PINK_2\fP
T}	T{
\fB198\fP
T}	T{
T}	T{
\fB#ff0087\fP
T}	T{
\fBDeepPink1\fP
T}
_
T{
T}	T{
\fBXTERM_DEEP_PINK_1\fP
T}	T{
\fB199\fP
T}	T{
T}	T{
\fB#ff00af\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_MAGENTA_2\fP
T}	T{
\fB200\fP
T}	T{
T}	T{
\fB#ff00d7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_MAGENTA_1\fP
T}	T{
\fB201\fP
T}	T{
T}	T{
\fB#ff00ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_ORANGE_RED_1\fP
T}	T{
\fB202\fP
T}	T{
T}	T{
\fB#ff5f00\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_INDIAN_RED_1\fP
T}	T{
\fB203\fP
T}	T{
T}	T{
\fB#ff5f5f\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_INDIAN_RED_2\fP
T}	T{
\fB204\fP
T}	T{
T}	T{
\fB#ff5f87\fP
T}	T{
\fBIndianRed1\fP
T}
_
T{
T}	T{
\fBXTERM_HOT_PINK_2\fP
T}	T{
\fB205\fP
T}	T{
T}	T{
\fB#ff5faf\fP
T}	T{
\fBHotPink\fP
T}
_
T{
T}	T{
\fBXTERM_HOT_PINK\fP
T}	T{
\fB206\fP
T}	T{
T}	T{
\fB#ff5fd7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_MEDIUM_ORCHID_1\fP
T}	T{
\fB207\fP
T}	T{
T}	T{
\fB#ff5fff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_DARK_ORANGE\fP
T}	T{
\fB208\fP
T}	T{
T}	T{
\fB#ff8700\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_SALMON_1\fP
T}	T{
\fB209\fP
T}	T{
T}	T{
\fB#ff875f\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_LIGHT_CORAL\fP
T}	T{
\fB210\fP
T}	T{
T}	T{
\fB#ff8787\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_PALE_VIOLET_RED_1\fP
T}	T{
\fB211\fP
T}	T{
T}	T{
\fB#ff87af\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_ORCHID_2\fP
T}	T{
\fB212\fP
T}	T{
T}	T{
\fB#ff87d7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_ORCHID_1\fP
T}	T{
\fB213\fP
T}	T{
T}	T{
\fB#ff87ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_ORANGE_1\fP
T}	T{
\fB214\fP
T}	T{
T}	T{
\fB#ffaf00\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_SANDY_BROWN\fP
T}	T{
\fB215\fP
T}	T{
T}	T{
\fB#ffaf5f\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_LIGHT_SALMON_1\fP
T}	T{
\fB216\fP
T}	T{
T}	T{
\fB#ffaf87\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_LIGHT_PINK_1\fP
T}	T{
\fB217\fP
T}	T{
T}	T{
\fB#ffafaf\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_PINK_1\fP
T}	T{
\fB218\fP
T}	T{
T}	T{
\fB#ffafd7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_PLUM_1\fP
T}	T{
\fB219\fP
T}	T{
T}	T{
\fB#ffafff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GOLD_1\fP
T}	T{
\fB220\fP
T}	T{
T}	T{
\fB#ffd700\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_LIGHT_GOLDENROD_4\fP
T}	T{
\fB221\fP
T}	T{
T}	T{
\fB#ffd75f\fP
T}	T{
\fBLightGoldenrod2\fP
T}
_
T{
T}	T{
\fBXTERM_LIGHT_GOLDENROD_2\fP
T}	T{
\fB222\fP
T}	T{
T}	T{
\fB#ffd787\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_NAVAJO_WHITE_1\fP
T}	T{
\fB223\fP
T}	T{
T}	T{
\fB#ffd7af\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_MISTY_ROSE_1\fP
T}	T{
\fB224\fP
T}	T{
T}	T{
\fB#ffd7d7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_THISTLE_1\fP
T}	T{
\fB225\fP
T}	T{
T}	T{
\fB#ffd7ff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_YELLOW_1\fP
T}	T{
\fB226\fP
T}	T{
T}	T{
\fB#ffff00\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_LIGHT_GOLDENROD_1\fP
T}	T{
\fB227\fP
T}	T{
T}	T{
\fB#ffff5f\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_KHAKI_1\fP
T}	T{
\fB228\fP
T}	T{
T}	T{
\fB#ffff87\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_WHEAT_1\fP
T}	T{
\fB229\fP
T}	T{
T}	T{
\fB#ffffaf\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_CORNSILK_1\fP
T}	T{
\fB230\fP
T}	T{
T}	T{
\fB#ffffd7\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_100\fP
T}	T{
\fB231\fP
T}	T{
T}	T{
\fB#ffffff\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_3\fP
T}	T{
\fB232\fP
T}	T{
T}	T{
\fB#080808\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_7\fP
T}	T{
\fB233\fP
T}	T{
T}	T{
\fB#121212\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_11\fP
T}	T{
\fB234\fP
T}	T{
T}	T{
\fB#1c1c1c\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_15\fP
T}	T{
\fB235\fP
T}	T{
T}	T{
\fB#262626\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_19\fP
T}	T{
\fB236\fP
T}	T{
T}	T{
\fB#303030\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_23\fP
T}	T{
\fB237\fP
T}	T{
T}	T{
\fB#3a3a3a\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_27\fP
T}	T{
\fB238\fP
T}	T{
T}	T{
\fB#444444\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_30\fP
T}	T{
\fB239\fP
T}	T{
T}	T{
\fB#4e4e4e\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_35\fP
T}	T{
\fB240\fP
T}	T{
T}	T{
\fB#585858\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_39\fP
T}	T{
\fB241\fP
T}	T{
T}	T{
\fB#626262\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_42\fP
T}	T{
\fB242\fP
T}	T{
T}	T{
\fB#6c6c6c\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_46\fP
T}	T{
\fB243\fP
T}	T{
T}	T{
\fB#767676\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_50\fP
T}	T{
\fB244\fP
T}	T{
T}	T{
\fB#808080\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_54\fP
T}	T{
\fB245\fP
T}	T{
T}	T{
\fB#8a8a8a\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_58\fP
T}	T{
\fB246\fP
T}	T{
T}	T{
\fB#949494\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_62\fP
T}	T{
\fB247\fP
T}	T{
T}	T{
\fB#9e9e9e\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_66\fP
T}	T{
\fB248\fP
T}	T{
T}	T{
\fB#a8a8a8\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_70\fP
T}	T{
\fB249\fP
T}	T{
T}	T{
\fB#b2b2b2\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_74\fP
T}	T{
\fB250\fP
T}	T{
T}	T{
\fB#bcbcbc\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_78\fP
T}	T{
\fB251\fP
T}	T{
T}	T{
\fB#c6c6c6\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_82\fP
T}	T{
\fB252\fP
T}	T{
T}	T{
\fB#d0d0d0\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_85\fP
T}	T{
\fB253\fP
T}	T{
T}	T{
\fB#dadada\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_89\fP
T}	T{
\fB254\fP
T}	T{
T}	T{
\fB#e4e4e4\fP
T}	T{
T}
_
T{
T}	T{
\fBXTERM_GREY_93\fP
T}	T{
\fB255\fP
T}	T{
T}	T{
\fB#eeeeee\fP
T}	T{
T}
_
T{
.IP [3] 5
First 16 colors are effectively the same as colors in \fIdefault\fP 16\-color mode and share with them the same color values (and
depend on terminal color scheme as well).
.IP [4] 5
XTerm name list contains duplicates; variable names for these were slightly modified (different numbers at the end) to avoid
namespace conflicts. Every changed name is displayed with \fBbold\fP font.
T}
_
.TE

.sp
.ce
----

.ce 0
.sp
.sp
Sources
.INDENT 0.0
.IP 1. 3
\fI\%https://en.wikipedia.org/wiki/ANSI_escape_code\fP
.IP 2. 3
\fI\%https://www.ditig.com/256\-colors\-cheat\-sheet\fP
.UNINDENT
.SS Color spaces
.INDENT 0.0
.INDENT 2.5
[image]
Supported color spaces and transformations.UNINDENT
.UNINDENT
.SS Color256 palette
.sp
Actual colors of \fIdefault\fP palette depend on user\(aqs terminal settings, i.e.
the result color of \fI\%Color16\fP is not guaranteed to exactly match the
corresponding color listed below. What\(aqs more, note that \fIdefault\fP palette
is actually a part of \fIindexed\fP one (first 16 colors of 256\-color table).
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
\fB(Verify)\fP The approximation algomanrithm was explicitly made to ignore these colors because
otherwise the results of transforming \fIRGB\fP values into \fIindexed\fP ones would be
unpredictable, in addition to different results for different users, depending
on their terminal emulator setup.
.UNINDENT
.UNINDENT
.sp
However, it doesn\(aqt mean that \fI\%Color16\fP is useless. Just the opposite \-\- it\(aqs
ideal for situtations when you don\(aqt actually \fBhave to\fP set exact values and
it\(aqs easier to specify estimation of desired color. I.e. setting color to \fB\(aqred\(aq\fP
is usually more than enough for displaying an error message \-\- we don\(aqt really care
of precise hue or brightness values for it.
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
Approximation algorithm is as simple as iterating through all colors in the
\fIlookup table\fP (which contains all possible ...
.UNINDENT
.UNINDENT

.sp
.ce
----

.ce 0
.sp

.sp
.ce
----

.ce 0
.sp
.sp
Sources
.INDENT 0.0
.IP 1. 3
\fI\%https://www.tweaking4all.com/software/linux\-software/xterm\-color\-cheat\-sheet/\fP
.UNINDENT
.SS Configuration
.INDENT 0.0
.TP
.B PYTERMOR_RENDERER_CLASS
YES
.TP
.B PYTERMOR_OUTPUT_MODE
YES
.TP
.B PYTERMOR_TRACE_RENDERS
yare\-yare\-daze
.TP
.B PYTERMOR_PREFER_RGB
YES
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fI\%Config\fP \-\- class containing configuration variables.
.UNINDENT
.UNINDENT
.SS Docs guidelines
.sp
(mostly as a reminder for myself)
.SS General
.INDENT 0.0
.IP \(bu 2
Basic types and built\-in values should be surrounded with asterisks:
.INDENT 2.0
.INDENT 3.5
\fB*True*\fP → \fITrue\fP
.sp
\fB*None*\fP → \fINone\fP
.sp
\fB*int*\fP → \fIint\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
Library classes, methods, etc. should be enclosed in single backticks in order to become a hyperlinks:
.INDENT 2.0
.INDENT 3.5
\fB\(gaSgrRenderer.render()\(ga\fP → \fI\%SgrRenderer.render()\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
Argument names and string literals that include escape sequences or their fragments should be wrapped in double backticks:
.INDENT 2.0
.INDENT 3.5
\fB\(ga\(gaarg1\(ga\(ga\fP → \fBarg1\fP
.sp
\fB\(ga\(gaESC\ [31m\ ESC\ [m\(ga\(ga\fP → \fBESC [31m ESC [m\fP
.UNINDENT
.UNINDENT
.sp
On the top of that, ESC control char should be padded with spaces for better readability. This also triggers automatic application of custom style for even more visual difference.
.IP \(bu 2
Any formula should be formatted using LaTeX syntax (\fB:math:\fP role or
\fB\&.. math::\fP directive):
.INDENT 2.0
.INDENT 3.5
.sp
.ce
d_{min} = 350*10^{\-3}


.ce 0
.UNINDENT
.UNINDENT
.IP \(bu 2
Hexadecimal numbers should be displayed using \fB:hex:\fP role (applies to all
examples below except the last one). In general, when the characters are
supposed to be typed manually, or when the result length is 6+ chars, it\(aqs
better to use lower case; when the numbers are distinct or \(dqU+\(dq notation is
used, the upper case is acceptable:
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.TP
.B separate bytes
0x1B 0x23 0x88
.TP
.B Unicode codepoints
U+21BC ; U+F0909
.TP
.B hex dump
\(dq0x 00AF 00BB 96CA\(dq ; \(dq0x 80 80 11 BD AA B5\(dq
.TP
.B memory address or size
0000:9cf0
.TP
.B RGB colors (\fIint\fP/\fIstr\fP forms)
0xeb0c0c ; #ff00ff
.UNINDENT
.sp
escaped strings
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\(dq\eu21bc\(dq, \(dq\eU000f0909\(dq, re.compile(R\(dq\ex1b\e[[0\-9;]*m\(dq)
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS References
.TS
center;
|l|l|l|.
_
T{
Type
T}	T{
Code
T}	T{
Example
T}
_
T{
Internal pydoc
T}	T{
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
use \(gaSgrRenderer.render()\(ga
.ft P
.fi
.UNINDENT
.UNINDENT
T}	T{
use \fI\%SgrRenderer.render()\fP
T}
_
T{
Internal page
T}	T{
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
called \(garenderers<guide.renderers>\(ga
.ft P
.fi
.UNINDENT
.UNINDENT
T}	T{
called \fI\%renderers\fP
T}
_
T{
Internal anchor
T}	T{
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\(gaReferences\(ga_
.ft P
.fi
.UNINDENT
.UNINDENT
T}	T{
\fI\%References\fP
T}
_
T{
External pydoc
T}	T{
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
see \(ga:class:\(galogging.NullHandler\(ga\(ga
.ft P
.fi
.UNINDENT
.UNINDENT
T}	T{
see \fBlogging.NullHandler\fP
T}
_
T{
External page
T}	T{
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\(gahttps://github.com\(ga
.ft P
.fi
.UNINDENT
.UNINDENT
T}	T{
\fI\%https://github.com\fP
T}
_
.TE
.SS Headers
.SS Section header
.SS Subsection header
.SS Paragraph header
.sp
Rubric
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
##########################
Docs guidelines
##########################
\&.. part header

=================
Headers
=================
\&.. chapter header

\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
Section header
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-

Subsection header
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-

Paragraph header
\(dq\(dq\(dq\(dq\(dq\(dq\(dq\(dq\(dq\(dq\(dq\(dq\(dq\(dq\(dq\(dq\(dq\(dq

\&.. rubric:: Rubric

\&.. code\-block:: rst

   ...
.ft P
.fi
.UNINDENT
.UNINDENT
.SH API REFERENCE
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Almost all public classes are imported into the first package level
on its initialization, which makes kind of a contract on library\(aqs API.
The exceptions include some abstract superclasses or metaclasses, which 
generally should not be used outside of the library, but still can be 
imported directly using a full module path.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.get_qname(obj)
Convenient method for getting a class name for class instances
as well as for the classes themselves.
.sp
.nf
.ft C
>>> get_qname(\(dqaaa\(dq)
\(aqstr\(aq
>>> get_qname(threading.Thread)
\(aq<Thread>\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.TS
center;
|l|l|.
_
T{
\fI\%ansi\fP
T}	T{
Classes for working with ANSI sequences on lower level.
T}
_
T{
\fI\%color\fP
T}	T{
Color main classes and helper functions.
T}
_
T{
\fI\%config\fP
T}	T{
Library fine tuning.
T}
_
T{
\fI\%conv\fP
T}	T{
A
T}
_
T{
\fI\%cval\fP
T}	T{
Color preset list:
T}
_
T{
\fI\%filter\fP
T}	T{
Formatters for prettier output and utility classes to avoid writing boilerplate code when dealing with escape sequences.
T}
_
T{
\fI\%numfmt\fP
T}	T{
utilnum
T}
_
T{
\fI\%parser\fP
T}	T{
T}
_
T{
\fI\%renderer\fP
T}	T{
Output formatters.
T}
_
T{
\fI\%style\fP
T}	T{
T}
_
T{
\fI\%template\fP
T}	T{
T}
_
T{
\fI\%term\fP
T}	T{
A
T}
_
T{
\fI\%text\fP
T}	T{
\(dqFront\-end\(dq module of the library.
T}
_
.TE
.SS pytermor.ansi
.sp
Classes for working with ANSI sequences on lower level.
Can be used for creating a variety of sequences including:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
SGR sequences (text and background
coloring, other text formatting and effects);
.IP \(bu 2
CSI sequences (cursor management,
selective screen clearing);
.IP \(bu 2
OSC sequences (various system commands).
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBIMPORTANT:\fP
.INDENT 0.0
.INDENT 3.5
blah\-blah\-blah low\-level @TODO
.UNINDENT
.UNINDENT
.sp
Module Attributes
.TS
center;
|l|l|.
_
T{
\fI\%NOOP_SEQ\fP
T}	T{
Special sequence in case one \fIhas to\fP provide one or another SGR, but does  not want any control sequences to be actually included in the output.
T}
_
.TE
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fI\%compose_hyperlink\fP(url[, label])
T}	T{
Syntax: \fB(OSC 8 ; ;) (url) (ST) (label) (OSC 8 ; ;) (ST)\fP, where \fI\%OSC\fP is \fBESC ]\fP\&.
T}
_
T{
\fI\%enclose\fP(opening_seq, string)
T}	T{
.INDENT 0.0
.TP
.B param opening_seq
.UNINDENT
T}
_
T{
\fI\%get_closing_seq\fP(opening_seq)
T}	T{
.INDENT 0.0
.TP
.B param opening_seq
.UNINDENT
T}
_
T{
\fI\%make_clear_display\fP()
T}	T{
Create ED sequence that clears an entire screen.
T}
_
T{
\fI\%make_clear_display_after_cursor\fP()
T}	T{
Create ED sequence that clears a part of the screen from cursor to the end of the screen.
T}
_
T{
\fI\%make_clear_display_before_cursor\fP()
T}	T{
Create ED sequence that clears a part of the screen from cursor to the beginning of the screen.
T}
_
T{
\fI\%make_clear_history\fP()
T}	T{
Create ED sequence that clears history, i.e., invisible lines on the top that can be scrolled back down.
T}
_
T{
\fI\%make_clear_line\fP()
T}	T{
Create EL sequence that clears an entire line at the cursor position.
T}
_
T{
\fI\%make_clear_line_after_cursor\fP()
T}	T{
Create EL sequence that clears a part of the line from cursor to the end of the same line.
T}
_
T{
\fI\%make_clear_line_before_cursor\fP()
T}	T{
Create EL sequence that clears a part of the line from cursor to the beginning of the same line.
T}
_
T{
\fI\%make_color_256\fP(code[, target])
T}	T{
Wrapper for creation of \fI\%SequenceSGR\fP that sets foreground (or background) to one of 256\-color palette value.:
T}
_
T{
\fI\%make_color_rgb\fP(r, g, b[, target])
T}	T{
Wrapper for creation of \fI\%SequenceSGR\fP operating in True Color mode (16M). Valid values for \fBr\fP, \fBg\fP and \fBb\fP are in range of [0; 255]. This range linearly translates into [0x00; 0xFF] for each channel. The result value is composed as \(dq#RRGGBB\(dq. For example, a sequence with color of #ff3300 can be created with::.
T}
_
T{
\fI\%make_disable_alt_screen_buffer\fP()
T}	T{
C
T}
_
T{
\fI\%make_enable_alt_screen_buffer\fP()
T}	T{
C
T}
_
T{
\fI\%make_erase_in_display\fP([mode])
T}	T{
Create ED sequence that clears a part of the screen or the entire screen.
T}
_
T{
\fI\%make_erase_in_line\fP([mode])
T}	T{
Create EL sequence that clears a part of the line or the entire line at the cursor position.
T}
_
T{
\fI\%make_hide_cursor\fP()
T}	T{
C
T}
_
T{
\fI\%make_hyperlink\fP()
T}	T{
Create a hyperlink in the text \fI(supported by limited amount of terminals)\fP\&.
T}
_
T{
\fI\%make_move_cursor_down\fP([lines])
T}	T{
Create CUD sequence that moves the cursor down by specified amount of \fBlines\fP\&.
T}
_
T{
\fI\%make_move_cursor_down_to_start\fP([lines])
T}	T{
Create CNL sequence that moves the cursor to the beginning of the line and down by specified amount of \fBlines\fP\&.
T}
_
T{
\fI\%make_move_cursor_left\fP([columns])
T}	T{
Create CUB sequence that moves the cursor left by specified amount of \fBcolumns\fP\&.
T}
_
T{
\fI\%make_move_cursor_right\fP([columns])
T}	T{
Create CUF sequence that moves the cursor right by specified amount of \fBcolumns\fP\&.
T}
_
T{
\fI\%make_move_cursor_up\fP([lines])
T}	T{
Create CUU sequence that moves the cursor up by specified amount of \fBlines\fP\&.
T}
_
T{
\fI\%make_move_cursor_up_to_start\fP([lines])
T}	T{
Create CPL sequence that moves the cursor to the beginning of the line and up by specified amount of \fBlines\fP\&.
T}
_
T{
\fI\%make_query_cursor_position\fP()
T}	T{
Create QCP sequence that requests an output device to respond with a structure containing current cursor coordinates (\fBRCP\fP).
T}
_
T{
\fI\%make_reset_cursor\fP()
T}	T{
Create CUP sequence without params, which moves the cursor to top left corner of the screen.
T}
_
T{
\fI\%make_restore_cursor_position\fP()
T}	T{
.INDENT 0.0
.TP
.B example
\fBESC 8\fP
.UNINDENT
T}
_
T{
\fI\%make_restore_screen\fP()
T}	T{
C
T}
_
T{
\fI\%make_save_cursor_position\fP()
T}	T{
.INDENT 0.0
.TP
.B example
\fBESC 7\fP
.UNINDENT
T}
_
T{
\fI\%make_save_screen\fP()
T}	T{
C
T}
_
T{
\fI\%make_set_cursor\fP([line, column])
T}	T{
Create CUP sequence that moves the cursor to specified amount \fBline\fP and \fBcolumn\fP\&.
T}
_
T{
\fI\%make_set_cursor_column\fP([column])
T}	T{
Create CHA sequence that sets cursor horizontal position to \fBcolumn\fP\&.
T}
_
T{
\fI\%make_set_cursor_line\fP([line])
T}	T{
Create VPA sequence that sets cursor vertical position to \fBline\fP\&.
T}
_
T{
\fI\%make_show_cursor\fP()
T}	T{
C
T}
_
.TE
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%ColorTarget\fP(value)
T}	T{
An enumeration.
T}
_
T{
\fI\%ISequence\fP([classifier, interm, final, abbr])
T}	T{
Abstract ancestor of all escape sequences.
T}
_
T{
\fI\%IntCode\fP(value)
T}	T{
Complete or almost complete list of reliably working SGR param integer codes.
T}
_
T{
\fI\%SeqIndex\fP()
T}	T{
Registry of static sequences that can be utilized without implementing an extra logic.
T}
_
T{
\fI\%SequenceCSI\fP([final, interm, abbr])
T}	T{
Class representing CSI\-type ANSI escape sequence.
T}
_
T{
\fI\%SequenceFe\fP(classifier[, interm, final, abbr])
T}	T{
C1 set sequences \-\- a wide range of sequences that includes \fI\%CSI\fP, \fI\%OSC\fP and more.
T}
_
T{
\fI\%SequenceFp\fP(classifier[, interm, abbr])
T}	T{
Sequence class representing private control functions.
T}
_
T{
\fI\%SequenceFs\fP(classifier, final[, abbr])
T}	T{
Sequences referred by ECMA\-48 as \(dqindependent control functions\(dq.
T}
_
T{
\fI\%SequenceNf\fP(final[, interm, abbr])
T}	T{
Escape sequences mostly used for ANSI/ISO code\-switching mechanisms.
T}
_
T{
\fI\%SequenceOSC\fP(interm, *params)
T}	T{
OSC\-type sequence.
T}
_
T{
\fI\%SequenceSGR\fP(*params)
T}	T{
Class representing SGR\-type escape sequence with varying amount of parameters.
T}
_
T{
\fI\%SequenceST\fP()
T}	T{
String Terminator sequence (ST).
T}
_
T{
\fBSubtypedParam\fP(value, subtype)
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B class  pytermor.ansi.ISequence(classifier=None, interm=None, final=None, abbr=\(aqESC*\(aq)
Bases: \fBSized\fP
.sp
Abstract ancestor of all escape sequences.
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SequenceNf(final, interm=None, abbr=\(aqnF\(aq)
Bases: \fI\%ISequence\fP
.sp
Escape sequences mostly used for ANSI/ISO code\-switching mechanisms.
.sp
All \fBnF\fP\-class sequences start with \fBESC\fP plus ASCII byte from
the range 0x20\-0x2F (space, \fB!\fP, \fB\(dq\fP, \fB#\fP, \fB$\fP, \fB%\fP,
\fB&\fP, \fB\(aq\fP, \fB(\fP, \fB)\fP, \fB*\fP, \fB+\fP, \fB,\fP, \fB\-\fP, \fB\&.\fP, \fB/\fP).
.INDENT 7.0
.TP
.B Parameters
\fBinterm\fP (\fIstr\fP) \-\- intermediate bytes 0x20\-0x2F
.UNINDENT
.INDENT 7.0
.TP
.B assemble()
Build up actual byte sequence and return as an ASCII\-encoded string.
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SequenceFp(classifier, interm=None, abbr=\(aqFp\(aq)
Bases: \fI\%ISequence\fP
.sp
Sequence class representing private control functions.
.sp
All \fBFp\fP\-class sequences start with \fBESC\fP plus ASCII byte in the
range 0x30\-0x3F (\fB0\fP\-\fB9\fP, \fB:\fP, \fB;\fP, \fB<\fP, \fB=\fP, \fB>\fP,
\fB?\fP).
.sp
\&.
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SequenceFs(classifier, final, abbr=\(aqFs\(aq)
Bases: \fI\%ISequence\fP
.sp
Sequences referred by ECMA\-48 as \(dqindependent control functions\(dq.
.sp
All \fBFs\fP\-class sequences start with \fBESC\fP plus a byte in the range
0x60\-0x7E (\fB\(ga\fP, \fBa\fP\-\fBz\fP, \fB{\fP, \fB|\fP, \fB}\fP).
.sp
\&.
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SequenceFe(classifier, interm=None, final=None, abbr=\(aqFe\(aq)
Bases: \fI\%ISequence\fP
.sp
C1 set sequences \-\- a wide range of sequences that includes
\fI\%CSI\fP, \fI\%OSC\fP and more.
.sp
All \fBFe\fP\-class sequences start with \fBESC\fP plus ASCII byte
from 0x40 to 0x5F (\fB@\fP, \fB[\fP, \fB\e\fP, \fB]\fP, \fB_\fP, \fB^\fP
and capital letters \fBA\fP\-\fBZ\fP).
.sp
\&.
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SequenceST
Bases: \fI\%SequenceFe\fP
.sp
String Terminator sequence (ST). Terminates strings in other control
sequences. Encoded as \fBESC \e\fP (0x1B 0x5C).
.sp
\&.
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SequenceOSC(interm, *params)
Bases: \fI\%SequenceFe\fP
.sp
OSC\-type sequence. Starts a control
string for the operating system to use. Encoded as \fBESC ]\fP, plus params
separated by \fB;\fP\&. The control string can contain bytes from ranges
0x08\-0x0D, \fB0x20\-0x7E\fP and are usually terminated by
\fI\%ST\fP\&.
.sp
\&.
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SequenceCSI(final=None, *params, interm=None, abbr=\(aqCSI\(aq)
Bases: \fI\%SequenceFe\fP
.sp
Class representing CSI\-type ANSI
escape sequence. All subtypes of this sequence start with \fBESC [\fP\&.
.sp
Sequences of this type are used to control text formatting,
change cursor position, erase screen and more.
.sp
.nf
.ft C
>>> make_clear_line().assemble()
\(aq[2K\(aq
.ft P
.fi
.sp
\&.
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SequenceSGR(*params)
Bases: \fI\%SequenceCSI\fP
.sp
Class representing SGR\-type escape sequence
with varying amount of parameters. SGR sequences allow to change the color
of text or/and terminal background (in 3 different color spaces) as well
as set decorate text with italic style, underlining, overlining, cross\-lining,
making it bold or blinking etc.
.sp
.nf
.ft C
>>> SequenceSGR(IntCode.HI_CYAN, \(aqunderlined\(aq, 1)
<SGR[96,4,1]>
.ft P
.fi
.sp
To encode into control sequence byte\-string invoke \fI\%assemble()\fP method or cast
the instance to \fIstr\fP, which internally does the same (this actually applies
to all children of \fI\%ISequence\fP):
.sp
.nf
.ft C
>>> SequenceSGR(\(aqblue\(aq, \(aqitalic\(aq).assemble()
\(aq[34;3m\(aq
>>> str(SequenceSGR(\(aqblue\(aq, \(aqitalic\(aq))
\(aq[34;3m\(aq
.ft P
.fi
.sp
The latter also allows fluent usage in f\-strings:
.sp
.nf
.ft C
>>> f\(aq{SeqIndex.RED}should be red{SeqIndex.RESET}\(aq
\(aq[31mshould be red[0m\(aq
.ft P
.fi
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%SequenceSGR\fP with zero params was specifically implemented to
translate into empty string and not into \fBESC [m\fP, which would have
made sense, but also would be entangling, as this sequence is the equivalent
of \fBESC [0m\fP \-\- hard reset sequence. The empty\-string\-sequence is
predefined at module level as \fI\%NOOP_SEQ\fP\&.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
The module doesn\(aqt distinguish \(dqsingle\-instruction\(dq sequences from several
ones merged together, e.g. \fBStyle(fg=\(aqred\(aq, bold=True)\fP produces only one
opening SequenceSGR instance:
.sp
.nf
.ft C
>>> SequenceSGR(IntCode.BOLD, IntCode.RED).assemble()
\(aq[1;31m\(aq
.ft P
.fi
.sp
\&...although generally speaking it is two of them (\fBESC [1m\fP and
\fBESC [31m\fP). However, the module can automatically match terminating
sequences for any form of input SGRs and translate it to specified format.
.UNINDENT
.UNINDENT
.sp
It is possible to add of one SGR sequence to another, resulting in a new one
with merged params:
.sp
.nf
.ft C
>>> SequenceSGR(\(aqblue\(aq) + SequenceSGR(\(aqitalic\(aq)
<SGR[34,3]>
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
\fBargs\fP \-\- 
.sp
Sequence params. Resulting param order is the same as an
argument order. Each argument can be specified as:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fIstr\fP \-\- any of \fI\%IntCode\fP names, case\-insensitive;
.IP \(bu 2
\fIint\fP \-\- \fI\%IntCode\fP instance or plain integer;
.IP \(bu 2
\fISubtypeParam\fP
.IP \(bu 2
another \fI\%SequenceSGR\fP instance (params will be extracted).
.UNINDENT
.UNINDENT
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B assemble()
Build up actual byte sequence and return as an ASCII\-encoded string.
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  params:  List[int  |  pytermor.ansi.SubtypedParam]
.INDENT 7.0
.TP
.B Returns
Sequence params as integers.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.NOOP_SEQ  =  <SGR[NOP][]>
Special sequence in case one \fIhas to\fP provide one or another SGR, but does 
not want any control sequences to be actually included in the output.
.sp
\fBNOOP_SEQ.assemble()\fP returns empty string, \fBNOOP_SEQ.params\fP 
returns empty list:
.sp
.nf
.ft C
>>> NOOP_SEQ.assemble()
\(aq\(aq
>>> NOOP_SEQ.params
[]
.ft P
.fi
.sp
\fBIMPORTANT:\fP
.INDENT 7.0
.INDENT 3.5
Casting to \fIbool\fP results in \fBFalse\fP for all \fBNOOP\fP instances in the 
library (\fI\%NOOP_SEQ\fP, \fI\%NOOP_COLOR\fP and \fI\%NOOP_STYLE\fP). This is intended.
.UNINDENT
.UNINDENT
.sp
Can be safely added to regular \fI\%SequenceSGR\fP from any side, as internally
\fI\%SequenceSGR\fP always makes a new instance with concatenated params from both 
items, rather than modifies state of either of them:
.sp
.nf
.ft C
>>> NOOP_SEQ + SequenceSGR(1)
<SGR[1]>
>>> SequenceSGR(3) + NOOP_SEQ
<SGR[3]>
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.IntCode(value)
Bases: \fBIntEnum\fP
.sp
Complete or almost complete list of reliably working SGR param integer codes.
Fully interchangeable with plain \fIint\fP\&. Suitable for \fI\%SequenceSGR\fP
default constructor.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%IntCode\fP predefined constants are omitted from documentation to avoid
useless repeats and save space, as most of the time \(dqhigher\-level\(dq class
\fI\%SeqIndex\fP is more appropriate, and on top of that, the constant
names are literally the same for \fI\%SeqIndex\fP and \fI\%IntCode\fP\&.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  resolve(name)
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\fIstr\fP) \-\- 
.TP
.B Return type
\fI\%IntCode\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.ColorTarget(value)
Bases: \fBEnum\fP
.sp
An enumeration.
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SeqIndex
Registry of static sequences that can be utilized without implementing
an extra logic.
.INDENT 7.0
.TP
.B RESET  =  <SGR[0]>
Hard reset sequence.
.UNINDENT
.INDENT 7.0
.TP
.B BOLD  =  <SGR[1]>
Bold or increased intensity.
.UNINDENT
.INDENT 7.0
.TP
.B DIM  =  <SGR[2]>
Faint, decreased intensity.
.UNINDENT
.INDENT 7.0
.TP
.B ITALIC  =  <SGR[3]>
Italic \fI(not widely supported)\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B UNDERLINED  =  <SGR[4]>
Underline.
.UNINDENT
.INDENT 7.0
.TP
.B CURLY_UNDERLINED  =  <SGR[4:3]>
Curly underline.
.UNINDENT
.INDENT 7.0
.TP
.B BLINK_SLOW  =  <SGR[5]>
Set blinking to < 150 cpm.
.UNINDENT
.INDENT 7.0
.TP
.B BLINK_FAST  =  <SGR[6]>
Set blinking to 150+ cpm \fI(not widely supported)\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B INVERSED  =  <SGR[7]>
Swap foreground and background colors.
.UNINDENT
.INDENT 7.0
.TP
.B HIDDEN  =  <SGR[8]>
Conceal characters \fI(not widely supported)\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B CROSSLINED  =  <SGR[9]>
Strikethrough.
.UNINDENT
.INDENT 7.0
.TP
.B DOUBLE_UNDERLINED  =  <SGR[21]>
Double\-underline. \fIOn several terminals disables\fP \fI\%BOLD\fP \fIinstead\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B FRAMED  =  <SGR[51]>
Rectangular border \fI(not widely supported, to say the least)\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B OVERLINED  =  <SGR[53]>
Overline \fI(not widely supported)\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B BOLD_DIM_OFF  =  <SGR[22]>
Disable \fBBOLD\fP and \fBDIM\fP attributes.
.sp
\fISpecial aspects... It\(aqs impossible to reliably disable them on a separate basis.\fP
.UNINDENT
.INDENT 7.0
.TP
.B ITALIC_OFF  =  <SGR[23]>
Disable italic.
.UNINDENT
.INDENT 7.0
.TP
.B UNDERLINED_OFF  =  <SGR[24]>
Disable underlining.
.UNINDENT
.INDENT 7.0
.TP
.B BLINK_OFF  =  <SGR[25]>
Disable blinking.
.UNINDENT
.INDENT 7.0
.TP
.B INVERSED_OFF  =  <SGR[27]>
Disable inversing.
.UNINDENT
.INDENT 7.0
.TP
.B HIDDEN_OFF  =  <SGR[28]>
Disable conecaling.
.UNINDENT
.INDENT 7.0
.TP
.B CROSSLINED_OFF  =  <SGR[29]>
Disable strikethrough.
.UNINDENT
.INDENT 7.0
.TP
.B FRAMED_OFF  =  <SGR[54]>
Disable border.
.UNINDENT
.INDENT 7.0
.TP
.B OVERLINED_OFF  =  <SGR[55]>
Disable overlining.
.UNINDENT
.INDENT 7.0
.TP
.B BLACK  =  <SGR[30]>
Set text color to 0x000000\&.
.UNINDENT
.INDENT 7.0
.TP
.B RED  =  <SGR[31]>
Set text color to 0x800000\&.
.UNINDENT
.INDENT 7.0
.TP
.B GREEN  =  <SGR[32]>
Set text color to 0x008000\&.
.UNINDENT
.INDENT 7.0
.TP
.B YELLOW  =  <SGR[33]>
Set text color to 0x808000\&.
.UNINDENT
.INDENT 7.0
.TP
.B BLUE  =  <SGR[34]>
Set text color to 0x000080\&.
.UNINDENT
.INDENT 7.0
.TP
.B MAGENTA  =  <SGR[35]>
Set text color to 0x800080\&.
.UNINDENT
.INDENT 7.0
.TP
.B CYAN  =  <SGR[36]>
Set text color to 0x008080\&.
.UNINDENT
.INDENT 7.0
.TP
.B WHITE  =  <SGR[37]>
Set text color to 0xc0c0c0\&.
.UNINDENT
.INDENT 7.0
.TP
.B COLOR_OFF  =  <SGR[39]>
Reset foreground color.
.UNINDENT
.INDENT 7.0
.TP
.B BG_BLACK  =  <SGR[40]>
Set background color to 0x000000\&.
.UNINDENT
.INDENT 7.0
.TP
.B BG_RED  =  <SGR[41]>
Set background color to 0x800000\&.
.UNINDENT
.INDENT 7.0
.TP
.B BG_GREEN  =  <SGR[42]>
Set background color to 0x008000\&.
.UNINDENT
.INDENT 7.0
.TP
.B BG_YELLOW  =  <SGR[43]>
Set background color to 0x808000\&.
.UNINDENT
.INDENT 7.0
.TP
.B BG_BLUE  =  <SGR[44]>
Set background color to 0x000080\&.
.UNINDENT
.INDENT 7.0
.TP
.B BG_MAGENTA  =  <SGR[45]>
Set background color to 0x800080\&.
.UNINDENT
.INDENT 7.0
.TP
.B BG_CYAN  =  <SGR[46]>
Set background color to 0x008080\&.
.UNINDENT
.INDENT 7.0
.TP
.B BG_WHITE  =  <SGR[47]>
Set background color to 0xc0c0c0\&.
.UNINDENT
.INDENT 7.0
.TP
.B BG_COLOR_OFF  =  <SGR[49]>
Reset background color.
.UNINDENT
.INDENT 7.0
.TP
.B GRAY  =  <SGR[90]>
Set text color to 0x808080\&.
.UNINDENT
.INDENT 7.0
.TP
.B HI_RED  =  <SGR[91]>
Set text color to 0xff0000\&.
.UNINDENT
.INDENT 7.0
.TP
.B HI_GREEN  =  <SGR[92]>
Set text color to 0x00ff00\&.
.UNINDENT
.INDENT 7.0
.TP
.B HI_YELLOW  =  <SGR[93]>
Set text color to 0xffff00\&.
.UNINDENT
.INDENT 7.0
.TP
.B HI_BLUE  =  <SGR[94]>
Set text color to 0x0000ff\&.
.UNINDENT
.INDENT 7.0
.TP
.B HI_MAGENTA  =  <SGR[95]>
Set text color to 0xff00ff\&.
.UNINDENT
.INDENT 7.0
.TP
.B HI_CYAN  =  <SGR[96]>
Set text color to 0x00ffff\&.
.UNINDENT
.INDENT 7.0
.TP
.B HI_WHITE  =  <SGR[97]>
Set text color to 0xffffff\&.
.UNINDENT
.INDENT 7.0
.TP
.B BG_GRAY  =  <SGR[100]>
Set background color to 0x808080\&.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_RED  =  <SGR[101]>
Set background color to 0xff0000\&.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_GREEN  =  <SGR[102]>
Set background color to 0x00ff00\&.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_YELLOW  =  <SGR[103]>
Set background color to 0xffff00\&.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_BLUE  =  <SGR[104]>
Set background color to 0x0000ff\&.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_MAGENTA  =  <SGR[105]>
Set background color to 0xff00ff\&.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_CYAN  =  <SGR[106]>
Set background color to 0x00ffff\&.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_WHITE  =  <SGR[107]>
Set background color to 0xffffff\&.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.get_closing_seq(opening_seq)
.INDENT 7.0
.TP
.B Parameters
\fBopening_seq\fP (\fI\%SequenceSGR\fP) \-\- 
.TP
.B Returns

.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.enclose(opening_seq, string)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBopening_seq\fP (\fI\%SequenceSGR\fP) \-\- 
.IP \(bu 2
\fBstring\fP (\fIstr\fP) \-\- 
.UNINDENT
.TP
.B Returns

.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_color_256(code, target=ColorTarget.FG)
Wrapper for creation of \fI\%SequenceSGR\fP that sets foreground
(or background) to one of 256\-color palette value.:
.sp
.nf
.ft C
>>> make_color_256(141)
<SGR[38,5,141]>
.ft P
.fi
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%Color256\fP class.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcode\fP (\fIint\fP) \-\- Index of the color in the palette, 0 \-\- 255.
.IP \(bu 2
\fBtarget\fP (\fI\%ColorTarget\fP) \-\- 
.UNINDENT
.TP
.B Example
\fBESC [38;5;141m\fP
.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_color_rgb(r, g, b, target=ColorTarget.FG)
Wrapper for creation of \fI\%SequenceSGR\fP operating in True Color mode (16M).
Valid values for \fBr\fP, \fBg\fP and \fBb\fP are in range of [0; 255]. This range
linearly translates into [0x00; 0xFF] for each channel. The result
value is composed as \(dq#RRGGBB\(dq. For example, a sequence with color of
#ff3300 can be created with:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> make_color_rgb(255, 51, 0)
<SGR[38,2,255,51,0]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%ColorRGB\fP class.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBr\fP (\fIint\fP) \-\- Red channel value, 0 \-\- 255.
.IP \(bu 2
\fBg\fP (\fIint\fP) \-\- Blue channel value, 0 \-\- 255.
.IP \(bu 2
\fBb\fP (\fIint\fP) \-\- Green channel value, 0 \-\- 255.
.IP \(bu 2
\fBtarget\fP (\fI\%ColorTarget\fP) \-\- 
.UNINDENT
.TP
.B Example
\fBESC [38;2;255;51;0m\fP
.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_reset_cursor()
Create CUP sequence without params, which moves
the cursor to top left corner of the screen. See \fI\%make_set_cursor()\fP\&.
.INDENT 7.0
.TP
.B Example
\fBESC [H\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_set_cursor(line=1, column=1)
Create CUP sequence that moves the cursor to
specified amount \fBline\fP and \fBcolumn\fP\&. The values are 1\-based, i.e. (1; 1)
is top left corner of the screen.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Both sequence params are optional and defaults to 1 if omitted, e.g.
\fBESC [;3H\fP is effectively \fBESC [1;3H\fP, and \fBESC [4H\fP is the
same as \fBESC [4;H\fP or \fBESC [4;1H\fP\&.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Example
\fBESC [9;15H\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_move_cursor_up(lines=1)
Create CUU sequence that moves the cursor up by
specified amount of \fBlines\fP\&. If the cursor is already at the top of the
screen, this has no effect.
.INDENT 7.0
.TP
.B Example
\fBESC [2A\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_move_cursor_down(lines=1)
Create CUD sequence that moves the cursor down by
specified amount of \fBlines\fP\&. If the cursor is already at the bottom of the
screen, this has no effect.
.INDENT 7.0
.TP
.B Example
\fBESC [3B\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_move_cursor_left(columns=1)
Create CUB sequence that moves the cursor left by
specified amount of \fBcolumns\fP\&. If the cursor is already at the left edge of
the screen, this has no effect.
.INDENT 7.0
.TP
.B Example
\fBESC [4D\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_move_cursor_right(columns=1)
Create CUF sequence that moves the cursor right by
specified amount of \fBcolumns\fP\&. If the cursor is already at the right edge
of the screen, this has no effect.
.INDENT 7.0
.TP
.B Example
\fBESC [5C\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_move_cursor_up_to_start(lines=1)
Create CPL sequence that moves the cursor
to the beginning of the line and up by specified amount of \fBlines\fP\&.
.INDENT 7.0
.TP
.B Example
\fBESC [2F\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_move_cursor_down_to_start(lines=1)
Create CNL sequence that moves the cursor
to the beginning of the line and down by specified amount of \fBlines\fP\&.
.INDENT 7.0
.TP
.B Example
\fBESC [3E\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_set_cursor_line(line=1)
Create VPA sequence that sets
cursor vertical position to \fBline\fP\&.
.INDENT 7.0
.TP
.B Example
\fBESC [9d\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_set_cursor_column(column=1)
Create CHA sequence that sets
cursor horizontal position to \fBcolumn\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBcolumn\fP (\fIint\fP) \-\- New cursor horizontal position.
.TP
.B Example
\fBESC [15G\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_query_cursor_position()
Create QCP sequence that requests an output
device to respond with a structure containing current cursor coordinates
(\fBRCP\fP).
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
Sending this sequence to the terminal may \fBblock\fP infinitely. Consider
using a thread or set a timeout for the main thread using a signal.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Example
\fBESC [6n\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_erase_in_display(mode=0)
Create ED sequence that clears a part of the screen
or the entire screen. Cursor position does not change.
.INDENT 7.0
.TP
.B Parameters
\fBmode\fP (\fIint\fP) \-\- 
.sp
Sequence operating mode.
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
If set to 0, clear from cursor to the end of the screen.
.IP \(bu 2
If set to 1, clear from cursor to the beginning of the screen.
.IP \(bu 2
If set to 2, clear the entire screen.
.IP \(bu 2
If set to 3, clear terminal history (xterm only).
.UNINDENT
.UNINDENT
.UNINDENT

.TP
.B Example
\fBESC [0J\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_clear_display_after_cursor()
Create ED sequence that clears a part of the screen
from cursor to the end of the screen. Cursor position does not change.
.INDENT 7.0
.TP
.B Example
\fBESC [0J\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_clear_display_before_cursor()
Create ED sequence that clears a part of the screen
from cursor to the beginning of the screen. Cursor position does not change.
.INDENT 7.0
.TP
.B Example
\fBESC [1J\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_clear_display()
Create ED sequence that clears an entire screen.
Cursor position does not change.
.INDENT 7.0
.TP
.B Example
\fBESC [2J\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_clear_history()
Create ED sequence that clears history, i.e.,
invisible lines on the top that can be scrolled back down. Cursor position
does not change. This is a xterm extension.
.INDENT 7.0
.TP
.B Example
\fBESC [3J\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_erase_in_line(mode=0)
Create EL sequence that clears a part of the line
or the entire line at the cursor position. Cursor position does not change.
.INDENT 7.0
.TP
.B Parameters
\fBmode\fP (\fIint\fP) \-\- 
.sp
Sequence operating mode.
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
If set to 0, clear from cursor to the end of the line.
.IP \(bu 2
If set to 1, clear from cursor to the beginning of the line.
.IP \(bu 2
If set to 2, clear the entire line.
.UNINDENT
.UNINDENT
.UNINDENT

.TP
.B Example
\fBESC [0K\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_clear_line_after_cursor()
Create EL sequence that clears a part of the line
from cursor to the end of the same line. Cursor position does not change.
.INDENT 7.0
.TP
.B Example
\fBESC [0K\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_clear_line_before_cursor()
Create EL sequence that clears a part of the line
from cursor to the beginning of the same line. Cursor position does not
change.
.INDENT 7.0
.TP
.B Example
\fBESC [1K\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_clear_line()
Create EL sequence that clears an entire line
at the cursor position. Cursor position does not change.
.INDENT 7.0
.TP
.B Example
\fBESC [2K\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_show_cursor()
C
.INDENT 7.0
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_hide_cursor()
C
.INDENT 7.0
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_save_screen()
C
.INDENT 7.0
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_restore_screen()
C
.INDENT 7.0
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_enable_alt_screen_buffer()
C
.INDENT 7.0
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_disable_alt_screen_buffer()
C
.INDENT 7.0
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_hyperlink()
Create a hyperlink in the text \fI(supported by limited amount of terminals)\fP\&.
Note that a complete set of commands to define a hyperlink consists of 4
oh them (two \fI\%OSC\-8\fP and two \fI\%ST\fP).
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
compose_hyperlink()\(ga.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Return type
\fI\%SequenceOSC\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.compose_hyperlink(url, label=None)
Syntax: \fB(OSC 8 ; ;) (url) (ST) (label) (OSC 8 ; ;) (ST)\fP, where
\fI\%OSC\fP is \fBESC ]\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBurl\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBlabel\fP (\fIOptional\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- 
.UNINDENT
.TP
.B Example
\fBESC ]8;;http://localhost ESC \eText ESC ]8;; ESC \e\fP
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_save_cursor_position()
.INDENT 7.0
.TP
.B Example
\fBESC 7\fP
.TP
.B Return type
\fI\%SequenceFp\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_restore_cursor_position()
.INDENT 7.0
.TP
.B Example
\fBESC 8\fP
.TP
.B Return type
\fI\%SequenceFp\fP
.UNINDENT
.UNINDENT
.SS pytermor.color
.sp
Color main classes and helper functions.
.sp
Module Attributes
.TS
center;
|l|l|.
_
T{
\fI\%CDT\fP
T}	T{
CDT represents a RGB color value.
T}
_
T{
\fI\%CT\fP
T}	T{
Any non\-abstract \fBIColor\fP type.
T}
_
T{
\fI\%NOOP_COLOR\fP
T}	T{
Special \fBIColor\fP instance always rendering into empty string.
T}
_
T{
\fI\%DEFAULT_COLOR\fP
T}	T{
Special \fBIColor\fP instance rendering to SGR sequence telling the terminal to reset fg or bg color; same for \fI\%TmuxRenderer\fP\&.
T}
_
.TE
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fI\%approximate\fP(hex_value[, color_type, max_results])
T}	T{
Search for nearest to \fBhex_value\fP colors of specified \fBcolor_type\fP and return the first \fBmax_results\fP of them.
T}
_
T{
\fI\%find_closest\fP(hex_value[, color_type])
T}	T{
Search and return nearest to \fBhex_value\fP instance of specified \fBcolor_type\fP\&.
T}
_
T{
\fI\%resolve_color\fP(subject[, color_type, ...])
T}	T{
Suggested usage is to transform the user input in a free form in an attempt to find any matching color.
T}
_
.TE
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%ApxResult\fP(color, distance)
T}	T{
Approximation result.
T}
_
T{
\fI\%Color16\fP(hex_value, code_fg, code_bg[, name, ...])
T}	T{
Variant of a \fBIColor\fP operating within the most basic color set \-\- \fBxterm\-16\fP\&.
T}
_
T{
\fI\%Color256\fP(hex_value, code[, name, register, ...])
T}	T{
Variant of a \fBIColor\fP operating within relatively modern \fBxterm\-256\fP indexed color table.
T}
_
T{
\fI\%ColorRGB\fP(hex_value[, name, register, index, ...])
T}	T{
Variant of a \fBIColor\fP operating within RGB color space.
T}
_
T{
\fBIColor\fP(hex_value[, name])
T}	T{
Abstract superclass for other \fBColors\fP\&.
T}
_
.TE
.sp
Exceptions
.TS
center;
|l|l|.
_
T{
\fI\%ColorCodeConflictError\fP(code, existing_color, ...)
T}	T{
T}
_
T{
\fI\%ColorNameConflictError\fP(tokens, ...)
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B pytermor.color.CDT
CDT represents a RGB color value. Primary handler 
is \fI\%resolve_color()\fP\&. Valid values include:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fIstr\fP with a color name in any form distinguishable by the color resolver;
the color lists can be found at: \fI\%ANSI preset list\fP and \fI\%ColorRGB collection\fP;
.IP \(bu 2
\fIstr\fP starting with a \(dq#\(dq and consisting of 6 more hexadecimal characters, case
insensitive (RGB regular form), e.g. \(dq#0b0cca\(dq;
.IP \(bu 2
\fIstr\fP starting with a \(dq#\(dq and consisting of 3 more hexadecimal characters, case
insensitive (RGB short form), e.g. \(dq#666\(dq;
.IP \(bu 2
\fIint\fP in a [0; 0xffffff] range.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
alias of TypeVar(\(aqCDT\(aq, int, str)
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.color.CT
Any non\-abstract \fBIColor\fP type.
.INDENT 7.0
.UNINDENT
.sp
alias of TypeVar(\(aqCT\(aq, bound=\fBIColor\fP)
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.color.ApxResult(color, distance)
Bases: \fBGeneric\fP[\fI\%CT\fP]
.sp
Approximation result.
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B color:  CT
Found \fBIColor\fP instance.
.UNINDENT
.INDENT 7.0
.TP
.B distance:  int
Squared sRGB distance from this instance to the approximation target.
.UNINDENT
.INDENT 7.0
.TP
.B property  distance_real:  float
Actual distance from instance to target:
.INDENT 7.0
.INDENT 3.5
distance_{real} = \esqrt{distance}
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.color.Color16(hex_value, code_fg, code_bg, name=None, *, register=False, index=False, aliases=None)
Bases: \fBIColor\fP
.sp
Variant of a \fBIColor\fP operating within the most basic color set
\-\- \fBxterm\-16\fP\&. Represents basic color\-setting SGRs with primary codes
30\-37, 40\-47, 90\-97 and 100\-107 (see \fI\%Color16 presets\fP).
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Arguments \fBregister\fP, \fBindex\fP and \fBaliases\fP
are \fIkwonly\fP\-type args.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP (\fIint\fP) \-\- Color RGB value, e.g. 0x800000\&.
.IP \(bu 2
\fBcode_fg\fP (\fIint\fP) \-\- Int code for a foreground color setup, e.g. 30.
.IP \(bu 2
\fBcode_bg\fP (\fIint\fP) \-\- Int code for a background color setup. e.g. 40.
.IP \(bu 2
\fBname\fP (\fIstr\fP) \-\- Name of the color, e.g. \(dqred\(dq.
.IP \(bu 2
\fBregister\fP (\fIbool\fP) \-\- If \fITrue\fP, add color to registry for resolving by name.
.IP \(bu 2
\fBindex\fP (\fIbool\fP) \-\- If \fITrue\fP, add color to approximation index.
.IP \(bu 2
\fBaliases\fP (\fIlist\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- Alternative color names (used in \fI\%resolve_color()\fP).
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  code_fg:  int
Int code for a foreground color setup, e.g. 30.
.UNINDENT
.INDENT 7.0
.TP
.B property  code_bg:  int
Int code for a background color setup. e.g. 40.
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  get_by_code(code)
Get a \fI\%Color16\fP instance with specified code. Only \fIforeground\fP (=text) colors
are indexed, therefore it is impossible to look up for a \fI\%Color16\fP with
given background color.
.INDENT 7.0
.TP
.B Parameters
\fBcode\fP (\fIint\fP) \-\- Foreground integer code to look up for (see
\fI\%Color16 presets\fP).
.TP
.B Raises
\fBKeyError\fP \-\- If no color with specified code is found.
.TP
.B Return type
\fI\%Color16\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_sgr(target=ColorTarget.FG, upper_bound=None)
Make an \fI\%SGR sequence\fP out of \fBIColor\fP\&. Used by \fI\%SgrRenderer\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtarget\fP (\fI\%ColorTarget\fP) \-\- 
.IP \(bu 2
\fBupper_bound\fP (\fIOptional\fP\fI[\fP\fIType\fP\fI[\fP\fIIColor\fP\fI]\fP\fI]\fP) \-\- Required result \fBIColor\fP type upper boundary, i.e., the
maximum acceptable color class, which will be the basis for
SGR being made. See \fI\%Color256.to_sgr()\fP for the details.
.UNINDENT
.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_tmux(target=ColorTarget.FG)
Make a tmux markup directive, which will change the output color to
this color\(aqs value (after tmux processes and prints it). Used by \fI\%TmuxRenderer\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBtarget\fP (\fI\%ColorTarget\fP) \-\- 
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  approximate(hex_value, max_results=1)
Search for the colors nearest to \fBhex_value\fP and return the first \fBmax_results\fP\&.
.INDENT 7.0
.TP
.B See
\fI\%color.approximate()\fP for the details
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP (\fIint\fP) \-\- Target RGB value.
.IP \(bu 2
\fBmax_results\fP (\fIint\fP) \-\- Result limit.
.UNINDENT
.TP
.B Return type
\fIList\fP[\fI\%ApxResult\fP[\fICT\fP]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  find_closest(hex_value)
Search and return nearest to \fBhex_value\fP color instance.
.INDENT 7.0
.TP
.B See
\fI\%color.find_closest()\fP for the details
.TP
.B Parameters
\fBhex_value\fP (\fIint\fP) \-\- Target RGB value.
.TP
.B Return type
\fICT\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B format_value(prefix=\(aq0x\(aq)
Format color value as \(dq0xRRGGBB\(dq.
.INDENT 7.0
.TP
.B Parameters
\fBprefix\fP (\fIstr\fP) \-\- Can be customized.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  hex_value:  int
Color value, e.g. 0x3aeb0c\&.
.UNINDENT
.INDENT 7.0
.TP
.B property  name:  str  |  None
Color name, e.g. \(dqnavy\-blue\(dq.
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  resolve(name)
Case\-insensitive search through registry contents.
.INDENT 7.0
.TP
.B See
\fI\%resolve_color()\fP for the details
.TP
.B Parameters
\fBname\fP (\fIstr\fP) \-\- \fBIColor\fP name to search for.
.TP
.B Return type
\fICT\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_hsv()
Wrapper around \fI\%hex_to_hsv()\fP for concrete instance.
.INDENT 7.0
.TP
.B See
hex_to_hsv() for the details
.TP
.B Return type
\fIUnion\fP[\fI\%HSV\fP, \fITuple\fP[float, float, float]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_rgb()
Wrapper around \fI\%to_rgb()\fP for concrete instance.
.INDENT 7.0
.TP
.B See
to_rgb() for the details
.TP
.B Return type
\fIUnion\fP[\fI\%RGB\fP, \fITuple\fP[int, int, int]]
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.color.Color256(hex_value, code, name=None, *, register=False, index=False, aliases=None, color16_equiv=None)
Bases: \fBIColor\fP
.sp
Variant of a \fBIColor\fP operating within relatively modern \fBxterm\-256\fP
indexed color table. Represents SGR complex codes \fB38;5;*\fP and \fB48;5;*\fP
(see \fI\%Color256 presets\fP).
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Arguments \fBregister\fP, \fBindex\fP, \fBaliases\fP and \fBcolor16_equiv\fP
are \fIkwonly\fP\-type args.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP (\fIint\fP) \-\- Color RGB value, e.g. 0x5f0000\&.
.IP \(bu 2
\fBcode\fP (\fIint\fP) \-\- Int code for a color setup, e.g. 52.
.IP \(bu 2
\fBname\fP (\fIstr\fP) \-\- Name of the color, e.g. \(dqdark\-red\(dq.
.IP \(bu 2
\fBregister\fP (\fIbool\fP) \-\- If \fITrue\fP, add color to registry for resolving by name.
.IP \(bu 2
\fBindex\fP (\fIbool\fP) \-\- If \fITrue\fP, add color to approximation index.
.IP \(bu 2
\fBaliases\fP (\fIt.List\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- Alternative color names (used in \fI\%resolve_color()\fP).
.IP \(bu 2
\fBcolor16_equiv\fP (\fI\%Color16\fP) \-\- \fI\%Color16\fP counterpart (applies only to codes 0\-15).
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_sgr(target=ColorTarget.FG, upper_bound=None)
Make an \fI\%SGR sequence\fP out of \fBIColor\fP\&. Used by \fI\%SgrRenderer\fP\&.
.sp
Each \fBIColor\fP type represents one SGR type in the context of colors. For
example, if \fBupper_bound\fP is set to \fI\%Color16\fP, the resulting SGR will always
be one of 16\-color index table, even if the original color was of different
type \-\- it will be approximated just before the SGR assembling.
.sp
The reason for this is the necessity to provide a similar look for all users
with different terminal settings/ capabilities. When the library sees that
user\(aqs output device supports 256 colors only, it cannot assemble True Color
SGRs, because they will be ignored (if we are lucky), or displayed in a
glitchy way, or mess up the output completely. The good news is that the
process is automatic and in most cases the library will manage the
transformations by itself. If it\(aqs not the case, the developer can correct the
behaviour by overriding the renderers\(aq output mode. See \fI\%SgrRenderer\fP and
\fI\%OutputMode\fP docs.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtarget\fP (\fI\%ColorTarget\fP) \-\- 
.IP \(bu 2
\fBupper_bound\fP (\fIOptional\fP\fI[\fP\fIType\fP\fI[\fP\fIIColor\fP\fI]\fP\fI]\fP) \-\- Required result \fBIColor\fP type upper boundary, i.e., the
maximum acceptable color class, which will be the basis for
SGR being made.
.UNINDENT
.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_tmux(target=ColorTarget.FG)
Make a tmux markup directive, which will change the output color to
this color\(aqs value (after tmux processes and prints it). Used by \fI\%TmuxRenderer\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBtarget\fP (\fI\%ColorTarget\fP) \-\- 
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  code:  int
Int code for a color setup, e.g. 52.
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  get_by_code(code)
Get a \fI\%Color256\fP instance with specified code (=position in the index).
.INDENT 7.0
.TP
.B Parameters
\fBcode\fP (\fIint\fP) \-\- Color code to look up for (see \fI\%Color256 presets\fP).
.TP
.B Raises
\fBKeyError\fP \-\- If no color with specified code is found.
.TP
.B Return type
\fI\%Color256\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  approximate(hex_value, max_results=1)
Search for the colors nearest to \fBhex_value\fP and return the first \fBmax_results\fP\&.
.INDENT 7.0
.TP
.B See
\fI\%color.approximate()\fP for the details
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP (\fIint\fP) \-\- Target RGB value.
.IP \(bu 2
\fBmax_results\fP (\fIint\fP) \-\- Result limit.
.UNINDENT
.TP
.B Return type
\fIList\fP[\fI\%ApxResult\fP[\fICT\fP]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  find_closest(hex_value)
Search and return nearest to \fBhex_value\fP color instance.
.INDENT 7.0
.TP
.B See
\fI\%color.find_closest()\fP for the details
.TP
.B Parameters
\fBhex_value\fP (\fIint\fP) \-\- Target RGB value.
.TP
.B Return type
\fICT\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B format_value(prefix=\(aq0x\(aq)
Format color value as \(dq0xRRGGBB\(dq.
.INDENT 7.0
.TP
.B Parameters
\fBprefix\fP (\fIstr\fP) \-\- Can be customized.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  hex_value:  int
Color value, e.g. 0x3aeb0c\&.
.UNINDENT
.INDENT 7.0
.TP
.B property  name:  str  |  None
Color name, e.g. \(dqnavy\-blue\(dq.
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  resolve(name)
Case\-insensitive search through registry contents.
.INDENT 7.0
.TP
.B See
\fI\%resolve_color()\fP for the details
.TP
.B Parameters
\fBname\fP (\fIstr\fP) \-\- \fBIColor\fP name to search for.
.TP
.B Return type
\fICT\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_hsv()
Wrapper around \fI\%hex_to_hsv()\fP for concrete instance.
.INDENT 7.0
.TP
.B See
hex_to_hsv() for the details
.TP
.B Return type
\fIUnion\fP[\fI\%HSV\fP, \fITuple\fP[float, float, float]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_rgb()
Wrapper around \fI\%to_rgb()\fP for concrete instance.
.INDENT 7.0
.TP
.B See
to_rgb() for the details
.TP
.B Return type
\fIUnion\fP[\fI\%RGB\fP, \fITuple\fP[int, int, int]]
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.color.ColorRGB(hex_value, name=None, *, register=False, index=False, aliases=None, variation_map=None)
Bases: \fBIColor\fP
.sp
Variant of a \fBIColor\fP operating within RGB color space. Presets include
\fI\%es7s named colors\fP, a unique collection of colors
compiled from several known sources after careful selection. However,
it\(aqs not limited to aforementioned color list and can be easily extended.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Arguments \fBregister\fP, \fBindex\fP, \fBaliases\fP and \fBvariation_map\fP
are \fIkwonly\fP\-type args.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP (\fIint\fP) \-\- Color RGB value, e.g. 0x73a9c2\&.
.IP \(bu 2
\fBname\fP (\fIstr\fP) \-\- Name of the color, e.g. \(dqmoonstone\-blue\(dq.
.IP \(bu 2
\fBregister\fP (\fIbool\fP) \-\- If \fITrue\fP, add color to registry for resolving by name.
.IP \(bu 2
\fBindex\fP (\fIbool\fP) \-\- If \fITrue\fP, add color to approximation index.
.IP \(bu 2
\fBaliases\fP (\fIt.List\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- Alternative color names (used in \fI\%resolve_color()\fP).
.IP \(bu 2
\fBvariation_map\fP (\fIt.Dict\fP\fI[\fP\fIint\fP\fI, \fP\fIstr\fP\fI]\fP) \-\- Mapping {\fIint\fP: \fIstr\fP}, where keys are hex values,
and values are variation names.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_sgr(target=ColorTarget.FG, upper_bound=None)
Make an \fI\%SGR sequence\fP out of \fBIColor\fP\&. Used by \fI\%SgrRenderer\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtarget\fP (\fI\%ColorTarget\fP) \-\- 
.IP \(bu 2
\fBupper_bound\fP (\fIOptional\fP\fI[\fP\fIType\fP\fI[\fP\fIIColor\fP\fI]\fP\fI]\fP) \-\- Required result \fBIColor\fP type upper boundary, i.e., the
maximum acceptable color class, which will be the basis for
SGR being made. See \fI\%Color256.to_sgr()\fP for the details.
.UNINDENT
.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_tmux(target=ColorTarget.FG)
Make a tmux markup directive, which will change the output color to
this color\(aqs value (after tmux processes and prints it). Used by \fI\%TmuxRenderer\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBtarget\fP (\fI\%ColorTarget\fP) \-\- 
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  base:  Optional[CT]
Parent color for color variations. Empty for regular colors.
.UNINDENT
.INDENT 7.0
.TP
.B property  variations:  Dict[str,  CT]
List of color variations. \fIVariation\fP of a color is a similar color with
almost the same name, but with differing suffix. The main idea of variations
is to provide a basis for fuzzy searching, which will return several results
for one query; i.e., when the query matches a color with variations, the whole
color family can be considered a match, which should increase searching speed.
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  approximate(hex_value, max_results=1)
Search for the colors nearest to \fBhex_value\fP and return the first \fBmax_results\fP\&.
.INDENT 7.0
.TP
.B See
\fI\%color.approximate()\fP for the details
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP (\fIint\fP) \-\- Target RGB value.
.IP \(bu 2
\fBmax_results\fP (\fIint\fP) \-\- Result limit.
.UNINDENT
.TP
.B Return type
\fIList\fP[\fI\%ApxResult\fP[\fICT\fP]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  find_closest(hex_value)
Search and return nearest to \fBhex_value\fP color instance.
.INDENT 7.0
.TP
.B See
\fI\%color.find_closest()\fP for the details
.TP
.B Parameters
\fBhex_value\fP (\fIint\fP) \-\- Target RGB value.
.TP
.B Return type
\fICT\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B format_value(prefix=\(aq0x\(aq)
Format color value as \(dq0xRRGGBB\(dq.
.INDENT 7.0
.TP
.B Parameters
\fBprefix\fP (\fIstr\fP) \-\- Can be customized.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  hex_value:  int
Color value, e.g. 0x3aeb0c\&.
.UNINDENT
.INDENT 7.0
.TP
.B property  name:  str  |  None
Color name, e.g. \(dqnavy\-blue\(dq.
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  resolve(name)
Case\-insensitive search through registry contents.
.INDENT 7.0
.TP
.B See
\fI\%resolve_color()\fP for the details
.TP
.B Parameters
\fBname\fP (\fIstr\fP) \-\- \fBIColor\fP name to search for.
.TP
.B Return type
\fICT\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_hsv()
Wrapper around \fI\%hex_to_hsv()\fP for concrete instance.
.INDENT 7.0
.TP
.B See
hex_to_hsv() for the details
.TP
.B Return type
\fIUnion\fP[\fI\%HSV\fP, \fITuple\fP[float, float, float]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_rgb()
Wrapper around \fI\%to_rgb()\fP for concrete instance.
.INDENT 7.0
.TP
.B See
to_rgb() for the details
.TP
.B Return type
\fIUnion\fP[\fI\%RGB\fP, \fITuple\fP[int, int, int]]
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.color.NOOP_COLOR  =  <_NoopColor[NOP]>
Special \fBIColor\fP instance always rendering into empty string.
.sp
\fBIMPORTANT:\fP
.INDENT 7.0
.INDENT 3.5
Casting to \fIbool\fP results in \fBFalse\fP for all \fBNOOP\fP instances in the 
library (\fI\%NOOP_SEQ\fP, \fI\%NOOP_COLOR\fP and \fI\%NOOP_STYLE\fP). This is intended.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.color.DEFAULT_COLOR  =  <_DefaultColor[DEF]>
Special \fBIColor\fP instance rendering to SGR sequence telling the terminal
to reset fg or bg color; same for \fI\%TmuxRenderer\fP\&. Useful when you inherit
some \fI\%Style\fP with fg or bg color which you don\(aqt need, but at the same time
you don\(aqt actually want to set up any color whatsoever (as using \fI\%NOOP_COLOR\fP
will result in an inheritance of parent style color instead of terminal default).
.sp
.nf
.ft C
>>> DEFAULT_COLOR.to_sgr(bg=False)
<SGR[39]>
.ft P
.fi
.sp
.nf
.ft C
>>> import pytermor as pt
>>> pt.Style(pt.Styles.CRITICAL, fg=NOOP_COLOR)
<Style[hi\-white:X160[D70000]]>
.ft P
.fi
.sp
.nf
.ft C
>>> pt.Style(pt.Styles.CRITICAL, fg=DEFAULT_COLOR)
<Style[DEF:X160[D70000]]>
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.color.resolve_color(subject, color_type=None, approx_cache=True)
Suggested usage is to transform the user input in a free form in an attempt
to find any matching color. The method operates in three different modes depending
on arguments: resolving by name, resolving by value and instantiating.
.sp
\fBResolving by name\fP: If \fBsubject\fP is a \fIstr\fP starting with any character
except \fB#\fP, case\-insensitive search through the registry of \fBcolor_type\fP colors
is performed. In this mode the algorithm looks for the instance which has all the
words from \fBsubject\fP as parts of its name (the order must be the same). Color
names are stored in registries as sets of tokens, which allows to use any form
of input and get the correct result regardless. The only requirement is to
separate the words in any matter (see the example below), so that they could be
split to tokens which will be matched with the registry keys.
.sp
If \fBcolor_type\fP is omitted, all the registries will be requested in this order:
[\fI\%Color16\fP, \fI\%Color256\fP, \fI\%ColorRGB\fP]. Should any registry find a full match, the
resolving is stopped and the result is returned.
.sp
.nf
.ft C
>>> resolve_color(\(aqdeep\-sky\-blue\-7\(aq)
<Color256[x23(#005f5f deep\-sky\-blue\-7)]>
>>> resolve_color(\(aqDEEP SKY BLUE 7\(aq)
<Color256[x23(#005f5f deep\-sky\-blue\-7)]>
>>> resolve_color(\(aqDeepSkyBlue7\(aq)
<Color256[x23(#005f5f deep\-sky\-blue\-7)]>
.ft P
.fi
.sp
.nf
.ft C
>>> resolve_color(\(aqdeepskyblue7\(aq)
Traceback (most recent call last):
LookupError: Color \(aqdeepskyblue7\(aq was not found in any registry
.ft P
.fi
.sp
\fBResolving by value\fP or \fBinstantiating\fP: if \fBsubject\fP is specified as:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
\fIint\fP in [0x000000; 0xffffff] range, or
.IP 2. 3
\fIstr\fP in full hexadecimal form: \(dq#RRGGBB\(dq, or
.IP 3. 3
\fIstr\fP in short hexadecimal form: \(dq#RGB\(dq,
.UNINDENT
.UNINDENT
.UNINDENT
.sp
and \fBcolor_type\fP is \fBpresent\fP , the result will be the best \fBsubject\fP
approximation to corresponding color index. Note that this value is expected
to differ from the requested one (and sometimes differs a lot). If \fBcolor_type\fP
is \fBmissing\fP, no searching is performed; instead a new nameless \fI\%ColorRGB\fP
is instantiated and returned.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
The instance created this way is an \(dqunbound\(dq color, i.e. it does
not end up in a registry or an index bound to its type, thus the resolver
and approximation algorithms are unaware of its existence. The rationale
for this is to keep the registries clean and stateless to ensure that
the same input always resolves to the same output.
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> resolve_color(\(dq#333\(dq)
<ColorRGB[#333333]>
>>> resolve_color(0xfafef0)
<ColorRGB[#fafef0]>
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsubject\fP (\fIstr\fP\fI|\fP\fIint\fP) \-\- \fBIColor\fP name or hex value to search for. See \fI\%CDT\fP\&.
.IP \(bu 2
\fBcolor_type\fP (\fIOptional\fP\fI[\fP\fIType\fP\fI[\fP\fICT\fP\fI]\fP\fI]\fP) \-\- Target color type (\fI\%Color16\fP, \fI\%Color256\fP or \fI\%ColorRGB\fP).
.IP \(bu 2
\fBapprox_cache\fP \-\- Use the approximation cache for \fBresolving by value\fP
mode or ignore it. For the details see \fI\%find_closest\fP and
\fI\%approximate\fP which are actually invoked by this method
under the hood.
.UNINDENT
.TP
.B Raises
\fBLookupError\fP \-\- If nothing was found in either of registries.
.TP
.B Returns
\fBIColor\fP instance with specified name or value.
.TP
.B Return type
\fICT\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.color.find_closest(hex_value, color_type=None)
Search and return nearest to \fBhex_value\fP instance of specified \fBcolor_type\fP\&.
If \fBcolor_type\fP is omitted, search for the closest \fI\%Color256\fP element.
.sp
Method is useful for finding applicable color alternatives if user\(aqs
terminal is incapable of operating in more advanced mode. Usually it is
done by the library automatically and transparently for both the developer
and the end\-user.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This method caches the results, i.e., the same search query will from then
onward result in the same return value without the necessity of iterating
through the color index. If that\(aqs not applicable, use similar method
\fI\%approximate()\fP, which is unaware of caching mechanism altogether.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP (\fIint\fP) \-\- Target color RGB value.
.IP \(bu 2
\fBcolor_type\fP (\fIOptional\fP\fI[\fP\fIType\fP\fI[\fP\fICT\fP\fI]\fP\fI]\fP) \-\- Target color type (\fI\%Color16\fP, \fI\%Color256\fP or \fI\%ColorRGB\fP).
.UNINDENT
.TP
.B Returns
Nearest to \fBhex_value\fP color instance of specified type.
.TP
.B Return type
\fICT\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.color.approximate(hex_value, color_type=None, max_results=1)
Search for nearest to \fBhex_value\fP colors of specified \fBcolor_type\fP and
return the first \fBmax_results\fP of them. If \fBcolor_type\fP is omitted, search
for the closest \fI\%Color256\fP instances. This method is similar to the
\fI\%find_closest()\fP, although they differ in some aspects:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%approximate()\fP can return more than one result;
.IP \(bu 2
\fI\%approximate()\fP returns not just a \fBIColor\fP instance(s), but also a
number equal to squared distance to the target color for each of them;
.IP \(bu 2
\fI\%find_closest()\fP caches the results, while \fI\%approximate()\fP ignores
the cache completely.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP (\fIint\fP) \-\- Target color RGB value.
.IP \(bu 2
\fBcolor_type\fP (\fIOptional\fP\fI[\fP\fIType\fP\fI[\fP\fICT\fP\fI]\fP\fI]\fP) \-\- Target color type (\fI\%Color16\fP, \fI\%Color256\fP or \fI\%ColorRGB\fP).
.IP \(bu 2
\fBmax_results\fP (\fIint\fP) \-\- Return no more than \fBmax_results\fP items.
.UNINDENT
.TP
.B Returns
Pairs of closest \fBIColor\fP instance(s) found with their distances
to the target color, sorted by distance descending, i.e., element
at index 0 is the closest color found, paired with its distance
to the target; element with index 1 is second\-closest color
(if any) and corresponding distance value, etc.
.TP
.B Return type
\fIList\fP[\fI\%ApxResult\fP[\fICT\fP]]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B exception  pytermor.color.ColorNameConflictError(tokens, existing_color, new_color)
Bases: \fBException\fP
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B with_traceback()
Exception.with_traceback(tb) \-\-
set self.__traceback__ to tb and return self.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B exception  pytermor.color.ColorCodeConflictError(code, existing_color, new_color)
Bases: \fBException\fP
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B with_traceback()
Exception.with_traceback(tb) \-\-
set self.__traceback__ to tb and return self.
.UNINDENT
.UNINDENT
.SS pytermor.config
.sp
Library fine tuning.
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fI\%get_config\fP()
T}	T{
Return the current config instance.
T}
_
T{
\fI\%init_config\fP()
T}	T{
Reset all config vars to default values.
T}
_
T{
\fI\%replace_config\fP(cfg)
T}	T{
Replace the global config instance with provided one.
T}
_
.TE
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%Config\fP([renderer_class, output_mode, ...])
T}	T{
Configuration variables container.
T}
_
.TE
.INDENT 0.0
.TP
.B class  pytermor.config.Config(renderer_class=<factory>, output_mode=<factory>, trace_renders=<factory>, prefer_rgb=<factory>)
Configuration variables container. Values can be modified in two ways:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
create new \fI\%Config\fP instance from scratch and activate with \fI\%replace_config()\fP;
.IP 2. 3
or preliminarily set the corresponding environment variables to intended values,
and the default config instance will catch them up on initialization.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
Environment variable list is located in \fI\%Configuration\fP
guide section.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrenderer_class\fP (\fIstr\fP) \-\- renderer_class
.IP \(bu 2
\fBoutput_mode\fP (\fIstr\fP) \-\- output_mode
.IP \(bu 2
\fBtrace_renders\fP (\fIbool\fP) \-\- Set to \fITrue\fP to log hex dumps of rendered strings.
Note that default handler is \fBlogging.NullHandler\fP with
\fBWARNING\fP level, so in order to see the traces
attached handler is required.
.IP \(bu 2
\fBprefer_rgb\fP (\fIbool\fP) \-\- By default SGR renderer transforms \fI\%Color256\fP instances
to \fBESC [38;5;<N>m\fP sequences even if True Color support
is detected. With this flag set to \fITrue\fP, the behaviour
is different, and \fI\%Color256\fP will be rendered as
\fBESC [38;2;<R>;<G>;<B>m\fP sequence (if True Color is
available).
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.config.get_config()
Return the current config instance.
.INDENT 7.0
.TP
.B Return type
\fI\%Config\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.config.init_config()
Reset all config vars to default values.
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.config.replace_config(cfg)
Replace the global config instance with provided one.
.INDENT 7.0
.UNINDENT
.UNINDENT
.SS pytermor.conv
.sp
A
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fI\%hex_to_hsv\fP(hex_value)
T}	T{
Transforms \fBhex_value\fP in \fIint\fP form into named tuple consisting of three floats corresponding to \fBhue\fP, \fBsaturation\fP and \fBvalue\fP channel values respectively.
T}
_
T{
\fI\%hex_to_rgb\fP(hex_value)
T}	T{
Transforms \fBhex_value\fP in \fIint\fP format into a tuple of three integers corresponding to \fBred\fP, \fBblue\fP and \fBgreen\fP channel value respectively.
T}
_
T{
\fI\%hsv_to_hex\fP()
T}	T{
Transforms HSV value in three\-floats form (where 0 <= h < 360, 0 <= s <= 1, and 0 <= v <= 1) into an one\-integer form.
T}
_
T{
\fI\%hsv_to_rgb\fP()
T}	T{
Transforms HSV value in three\-floats form (where 0 <= h < 360, 0 <= s <= 1, and 0 <= v <= 1) into RGB three\-integer form ([0; 255], [0; 255], [0; 255]).
T}
_
T{
\fBlab_to_xyz\fP()
T}	T{
T}
_
T{
\fI\%rgb_to_hex\fP()
T}	T{
Transforms RGB value in a three\-integers form ([0; 255], [0; 255], [0; 255]) to an one\-integer form.
T}
_
T{
\fI\%rgb_to_hsv\fP()
T}	T{
Transforms RGB value in a three\-integers form ([0; 255], [0; 255], [0; 255]) to an HSV in three\-floats form such as (0 <= h < 360, 0 <= s <= 1, and 0 <= v <= 1).
T}
_
T{
\fBrgb_to_xyz\fP()
T}	T{
T}
_
T{
\fBxyz_to_lab\fP()
T}	T{
T}
_
T{
\fBxyz_to_rgb\fP()
T}	T{
T}
_
.TE
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%HSV\fP(hue, saturation, value)
T}	T{
Create new instance of HSV(hue, saturation, value)
T}
_
T{
\fI\%LAB\fP(L, a, b)
T}	T{
Create new instance of LAB(L, a, b)
T}
_
T{
\fI\%RGB\fP(red, green, blue)
T}	T{
Create new instance of RGB(red, green, blue)
T}
_
T{
\fI\%XYZ\fP(x, y, z)
T}	T{
Create new instance of XYZ(x, y, z)
T}
_
.TE
.INDENT 0.0
.TP
.B class  pytermor.conv.RGB(red, green, blue)
Bases: \fBNamedTuple\fP
.sp
Create new instance of RGB(red, green, blue)
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B red:  int
Red channel value (0—255)
.UNINDENT
.INDENT 7.0
.TP
.B green:  int
Green channel value (0—255)
.UNINDENT
.INDENT 7.0
.TP
.B blue:  int
Blue channel value (0—255)
.UNINDENT
.INDENT 7.0
.TP
.B count(value, /)
Return number of occurrences of value.
.UNINDENT
.INDENT 7.0
.TP
.B index(value, start=0, stop=9223372036854775807, /)
Return first index of value.
.sp
Raises ValueError if the value is not present.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.conv.hex_to_rgb(hex_value)
Transforms \fBhex_value\fP in \fIint\fP format into a tuple of three
integers corresponding to \fBred\fP, \fBblue\fP and \fBgreen\fP channel value
respectively. Values are within [0; 255] range.
.sp
.nf
.ft C
>>> hex_to_rgb(0x80ff80)
RGB(red=128, green=255, blue=128)
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
\fBhex_value\fP (\fIint\fP) \-\- RGB integer value.
.TP
.B Returns
tuple with R, G, B channel values.
.TP
.B Return type
\fI\%RGB\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.conv.rgb_to_hex(rgb:  \fI\%RGB\fP) -> int
.TP
.B pytermor.conv.rgb_to_hex(r:  int, g:  int, b:  int) -> int
Transforms RGB value in a three\-integers form ([0; 255], [0; 255], [0; 255])
to an one\-integer form.
.sp
.nf
.ft C
>>> hex(rgb_to_hex(0, 128, 0))
\(aq0x8000\(aq
>>> hex(rgb_to_hex(RGB(red=16, green=16, blue=0)))
\(aq0x101000\(aq
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.conv.HSV(hue, saturation, value)
Bases: \fBNamedTuple\fP
.sp
Create new instance of HSV(hue, saturation, value)
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B hue:  float
Hue channel value (0—360)
.UNINDENT
.INDENT 7.0
.TP
.B saturation:  float
Saturation channel value (0.0—1.0)
.UNINDENT
.INDENT 7.0
.TP
.B value:  float
Value channel value (0.0—1.0)
.UNINDENT
.INDENT 7.0
.TP
.B count(value, /)
Return number of occurrences of value.
.UNINDENT
.INDENT 7.0
.TP
.B index(value, start=0, stop=9223372036854775807, /)
Return first index of value.
.sp
Raises ValueError if the value is not present.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.conv.hsv_to_rgb(hsv:  \fI\%HSV\fP) -> \fI\%RGB\fP
.TP
.B pytermor.conv.hsv_to_rgb(h:  float, s:  float, v:  float) -> \fI\%RGB\fP
Transforms HSV value in three\-floats form (where 0 <= h < 360, 0 <= s <= 1,
and 0 <= v <= 1) into RGB three\-integer form ([0; 255], [0; 255], [0; 255]).
.sp
.nf
.ft C
>>> hsv_to_rgb(270, 2/3, 0.75)
RGB(red=128, green=64, blue=192)
>>> hsv_to_rgb(HSV(hue=120, saturation=0.5, value=0.77))
RGB(red=99, green=197, blue=99)
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.conv.rgb_to_hsv(rgb:  \fI\%RGB\fP) -> \fI\%HSV\fP
.TP
.B pytermor.conv.rgb_to_hsv(r:  int, g:  int, b:  int) -> \fI\%HSV\fP
Transforms RGB value in a three\-integers form ([0; 255], [0; 255], [0; 255]) to an
HSV in three\-floats form such as (0 <= h < 360, 0 <= s <= 1, and 0 <= v <= 1).
.sp
.nf
.ft C
>>> rgb_to_hsv(0, 0, 255)
HSV(hue=240.0, saturation=1.0, value=1.0)
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBr\fP \-\- value of red channel.
.IP \(bu 2
\fBg\fP \-\- value of green channel.
.IP \(bu 2
\fBb\fP \-\- value of blue channel.
.UNINDENT
.TP
.B Returns
H, S, V channel values correspondingly.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.conv.hex_to_hsv(hex_value)
Transforms \fBhex_value\fP in \fIint\fP form into named tuple consisting of three floats
corresponding to \fBhue\fP, \fBsaturation\fP and \fBvalue\fP channel values respectively.
Hue is within [0, 359] range, both saturation and value are within [0; 1] range.
.sp
.nf
.ft C
>>> hex_to_hsv(0x999999)
HSV(hue=0.0, saturation=0.0, value=0.6)
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
\fBhex_value\fP (\fIint\fP) \-\- RGB value.
.TP
.B Returns
named tuple with H, S and V channel values
.TP
.B Return type
\fI\%HSV\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.conv.hsv_to_hex(hsv:  \fI\%HSV\fP) -> int
.TP
.B pytermor.conv.hsv_to_hex(h:  float, s:  float, v:  float) -> int
Transforms HSV value in three\-floats form (where 0 <= h < 360, 0 <= s <= 1,
and 0 <= v <= 1) into an one\-integer form.
.sp
.nf
.ft C
>>> hex(hsv_to_hex(90, 0.5, 0.5))
\(aq0x608040\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBh\fP \-\- hue channel value.
.IP \(bu 2
\fBs\fP \-\- saturation channel value.
.IP \(bu 2
\fBv\fP \-\- value channel value.
.UNINDENT
.TP
.B Returns
RGB value.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.conv.XYZ(x, y, z)
Bases: \fBNamedTuple\fP
.sp
Create new instance of XYZ(x, y, z)
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B count(value, /)
Return number of occurrences of value.
.UNINDENT
.INDENT 7.0
.TP
.B index(value, start=0, stop=9223372036854775807, /)
Return first index of value.
.sp
Raises ValueError if the value is not present.
.UNINDENT
.INDENT 7.0
.TP
.B x:  float
X channel value (0.0—1.0+)
.UNINDENT
.INDENT 7.0
.TP
.B y:  float
Luminance (0.0—1.0)
.UNINDENT
.INDENT 7.0
.TP
.B z:  float
Quasi\-equal to blue (0.0—1.0+)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.conv.LAB(L, a, b)
Bases: \fBNamedTuple\fP
.sp
Create new instance of LAB(L, a, b)
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B count(value, /)
Return number of occurrences of value.
.UNINDENT
.INDENT 7.0
.TP
.B index(value, start=0, stop=9223372036854775807, /)
Return first index of value.
.sp
Raises ValueError if the value is not present.
.UNINDENT
.INDENT 7.0
.TP
.B L:  float
Luminance (0—100)
.UNINDENT
.INDENT 7.0
.TP
.B a:  float
Green–magenta axis (\-100—100 in general, but can be less/more)
.UNINDENT
.INDENT 7.0
.TP
.B b:  float
Blue–yellow axis (\-100—100 in general, but can be less/more)
.UNINDENT
.UNINDENT
.SS pytermor.cval
.sp
Color preset list:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
16x \fI\%Color16\fP (16 unique)
.IP \(bu 2
256x \fI\%Color256\fP (247 unique)
.IP \(bu 2
1649x \fI\%ColorRGB\fP (1644 unique)
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%ColorValuesRGB\fP()
T}	T{
T}
_
T{
\fI\%ColorValuesXterm\fP()
T}	T{
T}
_
T{
\fI\%cv\fP
T}	T{
alias of \fI\%ColorValuesXterm\fP
T}
_
T{
\fI\%cvr\fP
T}	T{
alias of \fI\%ColorValuesRGB\fP
T}
_
.TE
.INDENT 0.0
.TP
.B class  pytermor.cval.ColorValuesXterm
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.cval.ColorValuesRGB
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.cval.cv
alias of \fI\%ColorValuesXterm\fP
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.cval.cvr
alias of \fI\%ColorValuesRGB\fP
.UNINDENT
.SS pytermor.filter
.sp
Formatters for prettier output and utility classes to avoid writing boilerplate
code when dealing with escape sequences. Also includes several Python Standard
Library methods rewritten for correct work with strings containing control sequences.
.sp
Module Attributes
.TS
center;
|l|l|.
_
T{
\fI\%CONTROL_CHARS\fP
T}	T{
Set of ASCII control characters: 0x00\-0x08, 0x0E\-0x1F and 0x7F\&.
T}
_
T{
\fI\%WHITESPACE_CHARS\fP
T}	T{
Set of ASCII whitespace characters: 0x09\-0x0D and 0x20\&.
T}
_
T{
\fI\%PRINTABLE_CHARS\fP
T}	T{
Set of ASCII \(dqnormal\(dq characters, i.e. non\-control and non\-space ones: letters, digits and punctuation (0x21\-0x7E).
T}
_
T{
\fI\%NON_ASCII_CHARS\fP
T}	T{
Set of bytes that are invalid in ASCII\-7 context: 0x80\-0xFF\&.
T}
_
T{
\fI\%IT\fP
T}	T{
input\-type
T}
_
T{
\fI\%OT\fP
T}	T{
output\-type
T}
_
T{
\fI\%PTT\fP
T}	T{
pattern type
T}
_
T{
\fI\%RPT\fP
T}	T{
replacer type
T}
_
T{
\fI\%MPT\fP
T}	T{
# map
T}
_
.TE
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fI\%apply_filters\fP(inp, *args)
T}	T{
Method for applying dynamic filter list to a target string/bytes.
T}
_
T{
\fI\%center_sgr\fP(s, width[, fillchar, actual_len])
T}	T{
SGR\-formatting\-aware implementation of \fBstr.center\fP\&.
T}
_
T{
\fI\%chunk\fP(items, size)
T}	T{
Split item list into chunks of size \fBsize\fP and return these chunks as \fItuples\fP\&.
T}
_
T{
\fI\%dump\fP(data[, label, max_len_shift])
T}	T{
T}
_
T{
\fI\%ljust_sgr\fP(s, width[, fillchar, actual_len])
T}	T{
SGR\-formatting\-aware implementation of \fBstr.ljust\fP\&.
T}
_
T{
\fI\%pad\fP(n)
T}	T{
Convenient method to use instead of \fB\(dq\(dq.ljust(n)\fP\&.
T}
_
T{
\fI\%padv\fP(n)
T}	T{
Convenient method to use instead of \fB\(dq\en\(dq * n\fP\&.
T}
_
T{
\fI\%rjust_sgr\fP(s, width[, fillchar, actual_len])
T}	T{
SGR\-formatting\-aware implementation of \fBstr.rjust\fP\&.
T}
_
.TE
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%AbstractStringTracer\fP(char_per_line)
T}	T{
T}
_
T{
\fI\%AbstractTracer\fP(char_per_line)
T}	T{
T}
_
T{
\fI\%Align\fP(value)
T}	T{
Align type.
T}
_
T{
\fI\%BytesTracer\fP([char_per_line])
T}	T{
str/bytes as byte hex codes, grouped by 4
T}
_
T{
\fI\%CsiStringReplacer\fP([repl])
T}	T{
Find all \fI\%CSI\fP seqs (i.e., starting with \fBESC [\fP) and replace with given string.
T}
_
T{
\fBEscSeqStringReplacer\fP([repl])
T}	T{
T}
_
T{
\fI\%ExtendedEnum\fP(value)
T}	T{
Standard \fBEnum\fP with a few additional methods on top.
T}
_
T{
\fI\%IFilter\fP()
T}	T{
Main idea is to provide a common interface for string filtering, that can make possible working with filters like with objects rather than with functions/lambdas.
T}
_
T{
\fI\%NonPrintsOmniVisualizer\fP([override])
T}	T{
Input type: \fIstr\fP, \fIbytes\fP\&.
T}
_
T{
\fI\%NonPrintsStringVisualizer\fP([keep_newlines])
T}	T{
Input type: \fIstr\fP\&.
T}
_
T{
\fBNoopFilter\fP()
T}	T{
T}
_
T{
\fBOmniDecoder\fP()
T}	T{
T}
_
T{
\fBOmniEncoder\fP()
T}	T{
T}
_
T{
\fI\%OmniMapper\fP([override])
T}	T{
Input type: \fIstr\fP, \fIbytes\fP\&.
T}
_
T{
\fI\%OmniSanitizer\fP([repl])
T}	T{
Input type: \fIstr\fP, \fIbytes\fP\&.
T}
_
T{
\fI\%SgrStringReplacer\fP([repl])
T}	T{
Find all \fI\%SGR\fP seqs (e.g., \fBESC [1;4m\fP) and replace with given string.
T}
_
T{
\fI\%StringAligner\fP(align, width, *[, sgr_aware])
T}	T{
T}
_
T{
\fI\%StringLinearizer\fP([repl])
T}	T{
Filter transforms all whitespace sequences in the input string into a single space character, or into a specified string.
T}
_
T{
\fI\%StringMapper\fP([override])
T}	T{
a
T}
_
T{
\fI\%StringReplacer\fP(pattern, repl)
T}	T{
\&.
T}
_
T{
\fI\%StringTracer\fP([char_per_line])
T}	T{
str as byte hex codes (UTF\-8), grouped by characters
T}
_
T{
\fI\%StringUcpTracer\fP([char_per_line])
T}	T{
str as Unicode codepoints
T}
_
T{
\fI\%TracerExtra\fP(label)
T}	T{
T}
_
T{
\fI\%WhitespaceRemover\fP()
T}	T{
Special case of \fI\%StringLinearizer\fP\&.
T}
_
.TE
.INDENT 0.0
.TP
.B class  pytermor.filter.ExtendedEnum(value)
Bases: \fBEnum\fP
.sp
Standard \fBEnum\fP with a few additional methods on top.
.INDENT 7.0
.TP
.B classmethod  list()
Return all enum values as list.
.sp
.nf
.ft C
>>> Align.list()
[\(aq<\(aq, \(aq>\(aq, \(aq^\(aq]
.ft P
.fi
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  dict()
Return mapping of all enum keys to corresponding enum values.
.sp
.nf
.ft C
>>> Align.dict()
{<Align.LEFT: \(aq<\(aq>: \(aq<\(aq, <Align.RIGHT: \(aq>\(aq>: \(aq>\(aq, <Align.CENTER: \(aq^\(aq>: \(aq^\(aq}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.Align(value)
Bases: \fBstr\fP, \fI\%ExtendedEnum\fP
.sp
Align type.
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.filter.chunk(items, size)
Split item list into chunks of size \fBsize\fP and return these
chunks as \fItuples\fP\&.
.sp
.nf
.ft C
>>> for c in chunk(range(5), 2):
\&...     print(c)
(0, 1)
(2, 3)
(4,)
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBitems\fP (\fIIterable\fP\fI[\fP\fIT\fP\fI]\fP) \-\- Input elements.
.IP \(bu 2
\fBsize\fP (\fIint\fP) \-\- Chunk size.
.UNINDENT
.TP
.B Return type
\fIIterator\fP[\fITuple\fP[\fIT\fP, \&...]]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.filter.pad(n)
Convenient method to use instead of \fB\(dq\(dq.ljust(n)\fP\&.
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.filter.padv(n)
Convenient method to use instead of \fB\(dq\en\(dq * n\fP\&.
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.filter.ljust_sgr(s, width, fillchar=\(aq \(aq, actual_len=None)
SGR\-formatting\-aware implementation of \fBstr.ljust\fP\&.
.sp
Return a left\-justified string of length \fBwidth\fP\&. Padding is done
using the specified fill character (default is a space).
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.filter.rjust_sgr(s, width, fillchar=\(aq \(aq, actual_len=None)
SGR\-formatting\-aware implementation of \fBstr.rjust\fP\&.
.sp
Return a right\-justified string of length \fBwidth\fP\&. Padding is done
using the specified fill character (default is a space).
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.filter.center_sgr(s, width, fillchar=\(aq \(aq, actual_len=None)
SGR\-formatting\-aware implementation of \fBstr.center\fP\&.
.sp
Return a centered string of length \fBwidth\fP\&. Padding is done using the
specified fill character (default is a space).
.INDENT 7.0
.INDENT 3.5
.SS Todo
.sp
поверить корректность работы в случае эмодзи (напр. 🔋)
если алгоритм поедет \-\- можно заменить на f\-стринги
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.filter.CONTROL_CHARS
Set of ASCII control characters: 0x00\-0x08, 0x0E\-0x1F and
0x7F\&.
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.filter.WHITESPACE_CHARS
Set of ASCII whitespace characters: 0x09\-0x0D and 0x20\&.
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.filter.PRINTABLE_CHARS
Set of ASCII \(dqnormal\(dq characters, i.e. non\-control and non\-space ones:
letters, digits and punctuation (0x21\-0x7E).
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.filter.NON_ASCII_CHARS
Set of bytes that are invalid in ASCII\-7 context: 0x80\-0xFF\&.
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.filter.IT
input\-type
.sp
alias of TypeVar(\(aqIT\(aq, str, bytes)
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.filter.OT
output\-type
.sp
alias of TypeVar(\(aqOT\(aq, str, bytes)
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.filter.PTT
pattern type
.sp
alias of \fBUnion\fP[\fI\%IT\fP, \fBPattern\fP[\fI\%IT\fP]]
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.filter.RPT
replacer type
.sp
alias of \fBUnion\fP[\fI\%OT\fP, \fBCallable\fP[[\fBMatch\fP[\fI\%OT\fP]], \fI\%OT\fP]]
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.filter.MPT
# map
.sp
alias of \fBDict\fP[\fBint\fP, \fI\%IT\fP]
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.IFilter
Bases: \fBGeneric\fP[\fI\%IT\fP, \fI\%OT\fP]
.sp
Main idea is to provide a common interface for string filtering, that can make
possible working with filters like with objects rather than with functions/lambdas.
.INDENT 7.0
.TP
.B abstract  apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
\fIOT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.StringAligner(align, width, *, sgr_aware=True)
Bases: \fI\%IFilter\fP[\fBstr\fP, \fBstr\fP]
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
\fBsgr_aware\fP is \fIkwonly\fP\-type arg.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBalign\fP (\fI\%Align\fP) \-\- 
.IP \(bu 2
\fBwidth\fP (\fIint\fP) \-\- 
.IP \(bu 2
\fBsgr_aware\fP (\fIbool\fP) \-\- 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIstr\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.AbstractTracer(char_per_line)
Bases: \fI\%IFilter\fP[\fI\%IT\fP, \fBstr\fP]
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fI\%TracerExtra\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.BytesTracer(char_per_line=32)
Bases: \fI\%AbstractTracer\fP[\fBbytes\fP]
.sp
str/bytes as byte hex codes, grouped by 4
.sp
Example output
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
 0000  0A 20 32 31 36 20 20 20  E2 94 82 20 20 75 70 6C  |a
 0010  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |a
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fI\%TracerExtra\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.AbstractStringTracer(char_per_line)
Bases: \fI\%AbstractTracer\fP[\fBstr\fP]
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fI\%TracerExtra\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.StringTracer(char_per_line=16)
Bases: \fI\%AbstractStringTracer\fP
.sp
str as byte hex codes (UTF\-8), grouped by characters
.sp
Example output
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
0056  45 4D 20 43 50 55     20     4F 56 48 20 4E   45 3E 0A 20  |E|
0072  20 20 20 20 20 20 E29482     20 20 20 20 20   20 20 20 20  |␣|
0088  20 20 20 20 37 20     2B     30 20 20 20 20 CE94 20 32 68  |␣|
0104  20 33 33 6D 20 20     20 EFAA8F 20 2D 35 20 C2B0 43 20 20  |␣|
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fI\%TracerExtra\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.StringUcpTracer(char_per_line=16)
Bases: \fI\%AbstractStringTracer\fP
.sp
str as Unicode codepoints
.INDENT 7.0
.INDENT 3.5
.SS Todo
.sp
venv/lib/python3.8/site\-packages/pygments/lexers/hexdump.py
.UNINDENT
.UNINDENT
.sp
Example output
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
 56 |U+ 45 4d 20 43 50 55   20   4f 56 48 20 4e  45 3e 0a 20 | EM␣CPU␣OVH␣NE>↵␣
 72 |U+ 20 20 20 20 20 20 2502   20 20 20 20 20  20 20 20 20 | ␣␣␣␣␣␣│␣␣␣␣␣␣␣␣␣
 88 |U+ 20 20 20 20 37 20   2b   30 20 20 20 20 394 20 32 68 | ␣␣␣␣7␣+0␣␣␣␣Δ␣2h
104 |U+ 20 33 33 6d 20 20   20 fa8f 20 2d 35 20  b0 43 20 20 | ␣33m␣␣␣摒␣\-5␣°C␣␣
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fI\%TracerExtra\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.TracerExtra(label:  \(aqstr\(aq)
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.StringReplacer(pattern, repl)
Bases: \fI\%IFilter\fP[\fBstr\fP, \fBstr\fP]
.sp
\&.
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIstr\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.SgrStringReplacer(repl=\(aq\(aq)
Bases: \fI\%StringReplacer\fP
.sp
Find all \fI\%SGR\fP seqs (e.g., \fBESC [1;4m\fP) and replace with
given string. More specific version of \fBCsiReplacer\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBrepl\fP (\fIRPT\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- Replacement, can contain regexp groups (see \fI\%apply_filters()\fP).
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIstr\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.CsiStringReplacer(repl=\(aq\(aq)
Bases: \fI\%StringReplacer\fP
.sp
Find all \fI\%CSI\fP seqs (i.e., starting with \fBESC [\fP) and replace
with given string. Less specific version of \fBSgrReplacer\fP, as CSI
consists of SGR and many other sequence subtypes.
.INDENT 7.0
.TP
.B Parameters
\fBrepl\fP (\fIRPT\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- Replacement, can contain regexp groups (see \fI\%apply_filters()\fP).
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIstr\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.StringLinearizer(repl=\(aq \(aq)
Bases: \fI\%StringReplacer\fP
.sp
Filter transforms all whitespace sequences in the input string
into a single space character, or into a specified string. Most obvious
application is pre\-formatting strings for log output in order to keep
the messages one\-lined.
.INDENT 7.0
.TP
.B Parameters
\fBrepl\fP (\fIRPT\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- Replacement character(s).
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIstr\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.WhitespaceRemover
Bases: \fI\%StringLinearizer\fP
.sp
Special case of \fI\%StringLinearizer\fP\&. Removes all the whitespaces from the
input string.
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIstr\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.OmniMapper(override=None)
Bases: \fI\%IFilter\fP[\fI\%IT\fP, \fI\%IT\fP]
.sp
Input type: \fIstr\fP, \fIbytes\fP\&. Abstract mapper. Replaces every character found in
map keys to corresponding map value. Map should be a dictionary of this type:
\fBdict[int, str|bytes|None]\fP; moreover, length of \fIstr\fP/\fIbytes\fP must be strictly 1
character (ASCII codepage). If there is a necessity to map Unicode characters,
\fI\%StringMapper\fP should be used instead.
.sp
.nf
.ft C
>>> OmniMapper({0x20: \(aq.\(aq}).apply(b\(aqabc def ghi\(aq)
b\(aqabc.def.ghi\(aq
.ft P
.fi
.sp
For mass mapping it is better to subclass \fI\%OmniMapper\fP and override two methods \-\-
\fB_get_default_keys\fP and \fB_get_default_replacer\fP\&. In this case you don\(aqt have to
manually compose a replacement map with every character you want to replace.
.INDENT 7.0
.TP
.B Parameters
\fBoverride\fP (\fIMPT\fP) \-\- a dictionary with mappings: keys must be \fIints\fP, values must be
either a single\-char \fIstrs\fP or \fIbytes\fP, or None.
.TP
.B See
\fI\%NonPrintsOmniVisualizer\fP
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
\fIIT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.StringMapper(override=None)
Bases: \fI\%OmniMapper\fP[\fBstr\fP]
.sp
a
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIstr\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.NonPrintsOmniVisualizer(override=None)
Bases: \fI\%OmniMapper\fP
.sp
Input type: \fIstr\fP, \fIbytes\fP\&. Replace every whitespace character with \fB\&.\fP\&.
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
\fIIT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.NonPrintsStringVisualizer(keep_newlines=True)
Bases: \fI\%StringMapper\fP
.sp
Input type: \fIstr\fP\&. Replace every whitespace character with \(dq·\(dq, except
newlines. Newlines are kept and get prepneded with same char by default,
but this behaviour can be disabled with \fBkeep_newlines\fP = \fIFalse\fP\&.
.sp
.nf
.ft C
>>> NonPrintsStringVisualizer(keep_newlines=False).apply(\(dqS\(dq+os.linesep+\(dqK\(dq)
\(aqS↵K\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
\fBkeep_newlines\fP (\fIbool\fP) \-\- When \fITrue\fP, transform newline characters into \(dq↵\en\(dq, or
into just \(dq↵\(dq otherwise.
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIstr\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.filter.OmniSanitizer(repl=b\(aq.\(aq)
Bases: \fI\%OmniMapper\fP
.sp
Input type: \fIstr\fP, \fIbytes\fP\&. Replace every control character and every non\-ASCII
character (0x80\-0xFF) with \(dq.\(dq, or with specified char. Note that the replacement
should be a single ASCII character, because \fBOmni\-\fP filters are designed to work
with \fIstr\fP inputs and \fIbytes\fP inputs on equal terms.
.INDENT 7.0
.TP
.B Parameters
\fBrepl\fP (\fIIT\fP) \-\- Value to replace control/non\-ascii characters with. Should be strictly 1
character long.
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
\fIIT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.filter.apply_filters(inp, *args)
Method for applying dynamic filter list to a target string/bytes.
.sp
Example (will replace all \fBESC\fP control characters to \fBE\fP and
thus make SGR params visible):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> from pytermor import SeqIndex
>>> test_str = f\(aq{SeqIndex.RED}test{SeqIndex.COLOR_OFF}\(aq
>>> apply_filters(test_str, SgrStringReplacer(\(aqE\e2\e3\e4\(aq))
\(aqE[31mtestE[39m\(aq

>>> apply_filters(\(aq[31mtest[39m\(aq, OmniSanitizer)
\(aq.[31mtest.[39m\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that type of \fBinp\fP argument must be same as filter parameterized
input type (\fI\%IT\fP), i.e. \fI\%StringReplacer\fP is \fBIFilter[str, str]\fP type,
so you can apply it only to \fIstr\fP\-type inputs.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- String/bytes to filter.
.IP \(bu 2
\fBargs\fP (\fIUnion\fP\fI[\fP\fI\%IFilter\fP\fI, \fP\fIType\fP\fI[\fP\fI\%IFilter\fP\fI]\fP\fI]\fP) \-\- Instance(s) implementing \fI\%IFilter\fP or their type(s).
.UNINDENT
.TP
.B Return type
\fIOT\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.filter.dump(data, label=None, max_len_shift=None)
.INDENT 7.0
.INDENT 3.5
.SS Todo
.INDENT 0.0
.IP \(bu 2
format selection
.IP \(bu 2
special handling of one\-line input
.IP \(bu 2
squash repeating lines
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Return type
str | None
.UNINDENT
.UNINDENT
.SS pytermor.numfmt
.sp
utilnum
.sp
Module Attributes
.TS
center;
|l|l|.
_
T{
\fI\%PREFIXES_SI_DEC\fP
T}	T{
Prefix preset used by \fI\%format_si()\fP and \fI\%format_bytes_human()\fP\&.
T}
_
.TE
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fI\%format_auto_float\fP(val, req_len[, allow_exp_form])
T}	T{
Dynamically adjust decimal digit amount and format to fill up the output string with as many significant digits as possible, and keep the output length strictly equal to \fBreq_len\fP at the same time.
T}
_
T{
\fI\%format_bytes_human\fP(val[, auto_color])
T}	T{
Invoke special case of fixed\-length SI formatter optimized for processing byte\-based values.
T}
_
T{
\fI\%format_si\fP(val[, unit, auto_color])
T}	T{
Invoke fixed\-length decimal SI formatter; format \fBvalue\fP as a unitless value with SI\-prefixes; a unit can be provided as an argument of \fI\%format()\fP method.
T}
_
T{
\fI\%format_si_binary\fP(val[, unit, auto_color])
T}	T{
Invoke fixed\-length binary SI formatter which formats \fBvalue\fP as binary size (\(dqKiB\(dq, \(dqMiB\(dq) with base 1024.
T}
_
T{
\fI\%format_thousand_sep\fP(val[, separator])
T}	T{
Returns input \fBval\fP with integer part split into groups of three digits, joined then with \fBseparator\fP string.
T}
_
T{
\fI\%format_time\fP(val_sec[, auto_color])
T}	T{
Invoke dynamic\-length general\-purpose time formatter, which supports a wide range of output units, including seconds, minutes, hours, days, weeks, months, years, milliseconds, microseconds, nanoseconds etc.
T}
_
T{
\fI\%format_time_delta\fP(val_sec[, max_len, auto_color])
T}	T{
Format time interval using the most suitable format with one or two time units, depending on \fBmax_len\fP argument.
T}
_
T{
\fI\%format_time_delta_longest\fP(val_sec[, auto_color])
T}	T{
Wrapper around \fI\%format_time_delta()\fP with pre\-set longest formatter.
T}
_
T{
\fI\%format_time_delta_shortest\fP(val_sec[, auto_color])
T}	T{
Wrapper around \fI\%format_time_delta()\fP with pre\-set shortest formatter.
T}
_
T{
\fI\%format_time_ms\fP(value_ms[, auto_color])
T}	T{
Invoke a variation of \fBformatter_time\fP specifically configured to format small time intervals.
T}
_
T{
\fI\%format_time_ns\fP(value_ns[, auto_color])
T}	T{
Wrapper for \fI\%format_time_ms()\fP expecting input value as nanoseconds.
T}
_
T{
\fI\%highlight\fP(string)
T}	T{
T}
_
.TE
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%BaseUnit\fP(oom[, unit, prefix, _integer])
T}	T{
T}
_
T{
\fI\%DualBaseUnit\fP(name[, in_next, ...])
T}	T{
TU
T}
_
T{
\fI\%DualFormatter\fP([fallback, units, auto_color, ...])
T}	T{
Formatter designed for time intervals.
T}
_
T{
\fI\%DualFormatterRegistry\fP()
T}	T{
Simple DualFormatter registry for storing formatters and selecting the suitable one by max output length.
T}
_
T{
\fI\%DynamicFormatter\fP([fallback, units, ...])
T}	T{
A simplified version of static formatter for cases, when length of the result string doesn\(aqt matter too much (e.g., for log output), and you don\(aqt have intention to customize the output (too much).
T}
_
T{
\fI\%Highlighter\fP([dim_units])
T}	T{
S
T}
_
T{
\fBNumFormatter\fP(auto_color, highlighter)
T}	T{
T}
_
T{
\fI\%StaticFormatter\fP([fallback, max_value_len, ...])
T}	T{
Format \fBvalue\fP using settings passed to constructor.
T}
_
T{
\fBSupportsFallback\fP()
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B pytermor.numfmt.PREFIXES_SI_DEC  =  [\(aqq\(aq, \(aqr\(aq, \(aqy\(aq, \(aqz\(aq, \(aqa\(aq, \(aqf\(aq, \(aqp\(aq, \(aqn\(aq, \(aqµ\(aq, \(aqm\(aq, None, \(aqk\(aq, \(aqM\(aq, \(aqG\(aq, \(aqT\(aq, \(aqP\(aq, \(aqE\(aq, \(aqZ\(aq, \(aqY\(aq, \(aqR\(aq, \(aqQ\(aq]
Prefix preset used by \fI\%format_si()\fP and \fI\%format_bytes_human()\fP\&. Covers values 
from 10^{\-30} to 10^{32}\&. Note lower\-cased \(aqk\(aq prefix.
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.numfmt.Highlighter(dim_units=True)
S
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B colorize(string)
parse and highlight
.INDENT 7.0
.TP
.B Parameters
\fBstring\fP (\fIstr\fP) \-\- 
.TP
.B Returns

.TP
.B Return type
\fI\%Text\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B apply(intp, frac, sep, pfx, unit)
highlight already parsed
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBintp\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBfrac\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBsep\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBpfx\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBunit\fP (\fIstr\fP) \-\- 
.UNINDENT
.TP
.B Returns

.TP
.B Return type
\fIList\fP[\fI\%Fragment\fP]
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.numfmt.StaticFormatter(fallback=None, *, max_value_len=None, auto_color=None, allow_negative=None, allow_fractional=None, discrete_input=None, unit=None, unit_separator=None, mcoef=None, pad=None, legacy_rounding=None, prefixes=None, prefix_refpoint_shift=None, value_mapping=None, highlighter=None)
Bases: \fBNumFormatter\fP
.sp
Format \fBvalue\fP using settings passed to constructor. The purpose of this class
is to fit into specified string length as much significant digits as it\(aqs
theoretically possible by using multipliers and unit prefixes. Designed
for metric systems with bases 1000 or 1024.
.sp
The key property of this formatter is maximum length \-\- the output will not
excess specified amount of characters no matter what (that\(aqs what is \(dqstatic\(dq for).
.sp
You can create your own formatters if you need fine tuning of the
output and customization. If that\(aqs not the case, there are facade
methods \fI\%format_si()\fP, \fI\%format_si_binary()\fP and \fI\%format_bytes_human()\fP,
which will invoke predefined formatters and doesn\(aqt require setting up.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
All arguments except \fBfallback\fP are \fIkwonly\fP\-type arguments.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfallback\fP (\fI\%StaticFormatter\fP) \-\- For any (constructing) instance attribute without a value (=\fINone\fP):
look up for this attribute in \fBfallback\fP instance, and if the value is
specified, take it and save as yours own; if the attribute is undefined in
\fBfallback\fP as well, use the default class\(aq value for this attribute instead.
.IP \(bu 2
\fBmax_value_len\fP (\fIint\fP) \-\- 
.sp
[default: 4] Target string length. Must be at least \fB3\fP, because it\(aqs a
minimum requirement for formatting values from 0 to 999.
Next number to 999 is 1000, which will be formatted as \(dq1k\(dq.
.sp
Setting \fBallow_negative\fP to \fITrue\fP increases lower bound to \fB4\fP because
the values now can be less than 0, and minus sign also occupies one char in
the output.
.sp
Setting \fBmcoef\fP to anything other than 1000.0 also increases the minimum
by 1, to \fB5\fP\&. The reason is that non\-decimal coefficients like 1024 require
additional char to render as switching to the next prefix happens later:
\(dq999 b\(dq, \(dq1000 b\(dq, \(dq1001 b\(dq, ...\(dq1023 b\(dq, \(dq1 Kb\(dq.

.IP \(bu 2
\fBauto_color\fP (\fIbool\fP) \-\- [default: \fIFalse\fP] Enable automatic colorizing of the result. Color depends
on order of magnitude of the value, and always the same, e.g.: blue color for
numbers in [1000; 10^6) and [10^{\-3}; 1) ranges (prefixes
nearest to 1, kilo\- and milli\-); cyan for values in [10^6; 10^9) and
[10^{\-6}; 10^{\-3}) ranges (next ones, mega\-/micro\-), etc. The values
from [1; 999] are colored in neutral gray. See \fI\%Highlighter\fP\&.
.IP \(bu 2
\fBallow_negative\fP (\fIbool\fP) \-\- [default: \fITrue\fP] Allow negative numbers handling, or (if set to \fIFalse\fP)
ignore the sign and round all of them to 0.0. This option effectively
increases lower limit of \fBmax_value_len\fP by 1 (when enabled).
.IP \(bu 2
\fBallow_fractional\fP (\fIbool\fP) \-\- [default: \fITrue\fP] Allows the usage of fractional values in the output. If
set to \fIFalse\fP, the results will be rounded. Does not affect lower
limit of \fBmax_value_len\fP\&.
.IP \(bu 2
\fBdiscrete_input\fP (\fIbool\fP) \-\- [default: \fIFalse\fP] If set to \fITrue\fP, truncate the fractional part off the
input and do not use floating\-point format for \fIbase output\fP, i.e., without
prefix and multiplying coefficient. Useful when the values are originally
discrete (e.g., bytes). Note that the same effect could be achieved by
setting \fBallow_fractional\fP to \fIFalse\fP, except that it will influence
prefixed output as well (\(dq1.08 kB\(dq \-> \(dq1kB\(dq).
.IP \(bu 2
\fBunit\fP (\fIstr\fP) \-\- [default: empty \fIstr\fP] Unit to apply prefix to (e.g., \(dqm\(dq, \(aqB\(dq).
Can be empty.
.IP \(bu 2
\fBunit_separator\fP (\fIstr\fP) \-\- [default: a space] String to place in between the value and the
(prefixed) unit. Can be empty.
.IP \(bu 2
\fBmcoef\fP (\fIfloat\fP) \-\- 
.sp
[default: 1000.0] Multiplying coefficient applied to the value:
.sp
.ce
V_{out} = V_{in} * b^{(\-m/3)},
.ce 0
.sp
where: V_{in} is an input value, V_{out} is a numeric part
of the output, b is \fBmcoef\fP (base), and m is the order of
magnitude corresponding to a selected unit prefix. For example, in case
of default (decimal) formatter and input value equal to 17345989 the selected
prefix will be \(dqM\(dq with the order of magnitude = 6:
.sp
.ce
V_{out} = 17345989*1000^{(\-6/3)} = 17345989*10^{\-6} = 17.346 .
.ce 0

.IP \(bu 2
\fBpad\fP (\fIbool\fP) \-\- [default: \fIFalse\fP]
.IP \(bu 2
\fBlegacy_rounding\fP (\fIbool\fP) \-\- [default: \fIFalse\fP]
.IP \(bu 2
\fBprefixes\fP (\fIlist\fP\fI[\fP\fIstr\fP\fI|\fP\fINone\fP\fI]\fP) \-\- 
.sp
[default: \fI\%PREFIXES_SI_DEC\fP] Prefix list from min power to max.
Reference point (with zero\-power multiplier, or 1.0) is determined by
searching for \fINone\fP in the list provided, therefore it\(aqs a requirement
for the argument to have at least one \fINone\fP value. Prefix list for a
formatter without fractional values support could look like this:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
[None, \(dqk\(dq, \(dqM\(dq, \(dqG\(dq, \(dqT\(dq]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Prefix step is fixed to log_{10} 1000 = 3, as specified for
metric prefixes.

.IP \(bu 2
\fBprefix_refpoint_shift\fP (\fIint\fP) \-\- [default: 0] Should be set to a non\-zero number if input represents
already prefixed value; e.g. to correctly format a variable,
which stores the frequency in MHz, set prefix shift to 2;
the formatter then will render 2333 as \(dq2.33 GHz\(dq instead of
incorrect \(dq2.33 kHz\(dq.
.IP \(bu 2
\fBvalue_mapping\fP (\fIt.Dict\fP\fI[\fP\fIfloat\fP\fI, \fP\fIRT\fP\fI] \fP\fI| \fP\fIt.Callable\fP\fI[\fP\fI[\fP\fIfloat\fP\fI]\fP\fI, \fP\fIRT\fP\fI]\fP) \-\- @TODO
.IP \(bu 2
\fBhighlighter\fP (\fI\%Highlighter\fP) \-\- 
.sp
\&...

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_max_len(unit=None)
.INDENT 7.0
.TP
.B Parameters
\fBunit\fP (\fIOptional\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- Unit override. Set to \fINone\fP to use formatter default.
.TP
.B Returns
Maximum length of the result. Note that constructor argument
is \fBmax_value_len\fP, which is a different parameter.
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B format(val, unit=None, auto_color=None)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval\fP (\fIfloat\fP) \-\- Input value.
.IP \(bu 2
\fBunit\fP (\fIOptional\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- Unit override. Set to \fINone\fP to use formatter default.
.IP \(bu 2
\fBauto_color\fP (\fIOptional\fP\fI[\fP\fIbool\fP\fI]\fP) \-\- Color mode, \fIbool\fP to enable/disable auto\-colorizing,
\fINone\fP to use formatter default value.
.UNINDENT
.TP
.B Returns
Formatted value, \fIText\fP if colorizing is on, \fIstr\fP otherwise.
.TP
.B Return type
\fIRT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.numfmt.DynamicFormatter(fallback=None, units=None, *, auto_color=None, allow_fractional=None, unit_separator=None, oom_shift=None, highlighter=None)
Bases: \fBNumFormatter\fP
.sp
A simplified version of static formatter for cases, when length of the result
string doesn\(aqt matter too much (e.g., for log output), and you don\(aqt have
intention to customize the output (too much).
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
All arguments except \fBfallback\fP and \fBunits\fP are
\fIkwonly\fP\-type arguments.
.UNINDENT
.UNINDENT
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B format(val, auto_color=False, oom_shift=None)
,,,
:param val:
:param oom_shift:
:param auto_color:
:return:
.INDENT 7.0
.TP
.B Return type
\fIRT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.numfmt.BaseUnit(oom:  \(aqfloat\(aq, unit:  \(aqstr\(aq  =  \(aq\(aq, prefix:  \(aqstr\(aq  =  \(aq\(aq, _integer:  \(aqbool\(aq  =  None)
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.numfmt.DualFormatter(fallback=None, units=None, *, auto_color=None, allow_negative=None, allow_fractional=None, unit_separator=None, pad=None, plural_suffix=None, overflow_msg=None, highlighter=None)
Bases: \fBNumFormatter\fP
.sp
Formatter designed for time intervals. Key feature of this formatter is
ability to combine two units and display them simultaneously,
e.g. return \(dq3h 48min\(dq instead of \(dq228 mins\(dq or \(dq3 hours\(dq, etc.
.sp
It is possible to create custom formatters if fine tuning of the output and
customization is necessary; otherwise use a facade method \fI\%format_time_delta()\fP,
which selects appropriate formatter by specified max length from a preset list.
.sp
Example output:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
\(dq10 secs\(dq, \(dq5 mins\(dq, \(dq4h 15min\(dq, \(dq5d 22h\(dq
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfallback\fP (\fI\%DualFormatter\fP) \-\- 
.IP \(bu 2
\fBunits\fP (\fIt.List\fP\fI[\fP\fI\%DualBaseUnit\fP\fI]\fP) \-\- 
.IP \(bu 2
\fBauto_color\fP (\fIbool\fP) \-\- If \fITrue\fP, the result will be colorized depending on unit type.
.IP \(bu 2
\fBallow_negative\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBallow_fractional\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBunit_separator\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBpad\fP (\fIbool\fP) \-\- Set to \fITrue\fP to pad the value with spaces on the left side
and ensure it\(aqs length is equal to \fI\%max_len\fP, or to \fIFalse\fP
to allow shorter result strings.
.IP \(bu 2
\fBplural_suffix\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBoverflow_msg\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBhighlighter\fP (\fI\%Highlighter\fP) \-\- 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  max_len:  int
This property cannot be set manually, it is
computed on initialization automatically.
.INDENT 7.0
.TP
.B Returns
Maximum possible output string length.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B format(val_sec, auto_color=None)
Pretty\-print difference between two moments in time. If input
value is too big for the current formatter to handle, return \(dqOVERFLOW\(dq
string (or a part of it, depending on \fBmax_len\fP).
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval_sec\fP (\fIfloat\fP) \-\- Input value in seconds.
.IP \(bu 2
\fBauto_color\fP (\fIOptional\fP\fI[\fP\fIbool\fP\fI]\fP) \-\- Color mode, \fIbool\fP to enable/disable colorizing,
\fINone\fP to use formatter default value.
.UNINDENT
.TP
.B Returns
Formatted time delta, \fIText\fP if colorizing is on, \fIstr\fP otherwise.
.TP
.B Return type
\fIRT\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B format_base(val_sec, auto_color=None)
Pretty\-print difference between two moments in time. If input
value is too big for the current formatter to handle, return \fINone\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval_sec\fP (\fIfloat\fP) \-\- Input value in seconds.
.IP \(bu 2
\fBauto_color\fP (\fIOptional\fP\fI[\fP\fIbool\fP\fI]\fP) \-\- Color mode, \fIbool\fP to enable/disable colorizing,
\fINone\fP to use formatter default value.
.UNINDENT
.TP
.B Returns
Formatted value as \fIText\fP if colorizing is on; as \fIstr\fP
otherwise. Returns \fINone\fP on overflow.
.TP
.B Return type
\fIOptional\fP[\fIRT\fP]
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.numfmt.DualBaseUnit(name, in_next=None, overflow_after=None, custom_short=None, collapsible_after=None)
TU
.sp
\fBIMPORTANT:\fP
.INDENT 7.0
.INDENT 3.5
\fBin_next\fP and \fBoverflow_after\fP are mutually exclusive, and either of
them is required.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBname\fP (\fIstr\fP) \-\- A unit name to display.
.IP \(bu 2
\fBin_next\fP (\fIint\fP) \-\- 
.sp
The base \-\- how many current units the next (single) unit contains,
e.g., for an hour in context of days:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
CustomBaseUnit(\(dqhour\(dq, 24)
.ft P
.fi
.UNINDENT
.UNINDENT

.IP \(bu 2
\fBoverflow_after\fP (\fIint\fP) \-\- Value upper limit.
.IP \(bu 2
\fBcustom_short\fP (\fIstr\fP) \-\- Use specified short form instead of first letter
of \fBname\fP when operating in double\-value mode.
.IP \(bu 2
\fBcollapsible_after\fP (\fIint\fP) \-\- Min threshold for double output to become a regular one.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.numfmt.DualFormatterRegistry
Simple DualFormatter registry for storing formatters and selecting
the suitable one by max output length.
.INDENT 7.0
.TP
.B register(*formatters)
\&...
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B find_matching(max_len)
\&...
.INDENT 7.0
.TP
.B Return type
\fI\%pytermor.numfmt.DualFormatter\fP | None
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_by_max_len(max_len)
\&...
.INDENT 7.0
.TP
.B Return type
\fI\%pytermor.numfmt.DualFormatter\fP | None
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_shortest()
\&...
.INDENT 7.0
.TP
.B Return type
\fI\%pytermor.numfmt.DualFormatter\fP | None
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_longest()
\&...
.INDENT 7.0
.TP
.B Return type
\fI\%pytermor.numfmt.DualFormatter\fP | None
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.numfmt.highlight(string)
.INDENT 7.0
.INDENT 3.5
.SS Todo
.sp
@TODO
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Max output len
\fIsame as input\fP
.TP
.B Parameters
\fBstring\fP (\fIstr\fP) \-\- input text
.TP
.B Return type
\fIRT\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.numfmt.format_thousand_sep(val, separator=\(aq \(aq)
Returns input \fBval\fP with integer part split into groups of three digits,
joined then with \fBseparator\fP string.
.sp
.nf
.ft C
>>> format_thousand_sep(260341)
\(aq260 341\(aq
>>> format_thousand_sep(\-9123123123.55, \(aq,\(aq)
\(aq\-9,123,123,123.55\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Max output len
(L + max(0, floor(M/3))),
.sp
where \fIL\fP is \fBval\fP length, and \fIM\fP is order of magnitude of \fBval\fP
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval\fP (\fIint\fP\fI | \fP\fIfloat\fP) \-\- value to format
.IP \(bu 2
\fBseparator\fP (\fIstr\fP) \-\- character(s) to use as thousand separators
.UNINDENT
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.numfmt.format_auto_float(val, req_len, allow_exp_form=True)
Dynamically adjust decimal digit amount and format to fill up the output string
with as many significant digits as possible, and keep the output length strictly
equal to \fBreq_len\fP at the same time.
.sp
For values impossible to fit into a string of required length and when rounding
doesn\(aqt help (e.g. 12 500 000 and 5 chars) algorithm switches to scientific notation,
and the result looks like \(aq1.2e7\(aq. If this feature is explicitly disabled
with \fBallow_exp_form\fP = \fIFalse\fP, then:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
if absolute value is less than 1, zeros will be returned (\(aq0.0000\(aq);
.IP 2. 3
if value is a big number (like 10^9), \fBValueError\fP will be
raised instead.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
.nf
.ft C
>>> format_auto_float(0.012345678, 5)
\(aq0.012\(aq
>>> format_auto_float(0.123456789, 5)
\(aq0.123\(aq
>>> format_auto_float(1.234567891, 5)
\(aq1.235\(aq
>>> format_auto_float(12.34567891, 5)
\(aq12.35\(aq
>>> format_auto_float(123.4567891, 5)
\(aq123.5\(aq
>>> format_auto_float(1234.567891, 5)
\(aq 1235\(aq
>>> format_auto_float(12345.67891, 5)
\(aq12346\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Max output len
\fIadjustable\fP
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval\fP (\fIfloat\fP) \-\- Value to format.
.IP \(bu 2
\fBreq_len\fP (\fIint\fP) \-\- Required output string length.
.IP \(bu 2
\fBallow_exp_form\fP (\fIbool\fP) \-\- Allow scientific notation usage when that\(aqs the only way
of fitting the value into a string of required length.
.UNINDENT
.TP
.B Raises
\fBValueError\fP \-\- When value is too long and \fBallow_exp_form\fP is \fIFalse\fP\&.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.numfmt.format_si(val, unit=None, auto_color=None)
Invoke fixed\-length decimal SI formatter; format \fBvalue\fP as a unitless value with
SI\-prefixes; a unit can be provided as an argument of \fI\%format()\fP method.
Suitable for formatting any SI unit with values from 10^{\-30} to
10^{32}\&.
.sp
Total maximum length is \fBmax_value_len + 2\fP, which is \fB6\fP
by default (4 from value + 1 from separator and + 1 from prefix).
If the unit is defined and is a non\-empty string, the maximum output
length increases by length of that unit.
.sp
Extending the formatter
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
my_formatter = StaticFormatter(formatter_si)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
.nf
.ft C
>>> format_si(1010, \(aqm²\(aq)
\(aq1.01 km²\(aq
>>> format_si(0.223, \(aqg\(aq)
\(aq223 mg\(aq
>>> format_si(1213531546, \(aqW\(aq)  # great scott
\(aq1.21 GW\(aq
>>> format_si(1.22e28, \(aqeV\(aq)  # the Planck energy
\(aq12.2 ReV\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Max output len
6
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval\fP (\fIfloat\fP) \-\- Input value (unitless).
.IP \(bu 2
\fBunit\fP (\fIOptional\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- A unit override [default unit is an empty string].
.IP \(bu 2
\fBauto_color\fP (\fIOptional\fP\fI[\fP\fIbool\fP\fI]\fP) \-\- Color mode override, \fIbool\fP to enable/disable colorizing
depending on unit type, \fINone\fP to use formatters\(aq setting
value [\fIFalse\fP by default].
.UNINDENT
.TP
.B Returns
Formatted value, \fIText\fP if colorizing is on, \fIstr\fP otherwise.
.TP
.B Return type
\fIRT\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.numfmt.format_si_binary(val, unit=None, auto_color=False)
Invoke fixed\-length binary SI formatter which formats \fBvalue\fP as binary
size (\(dqKiB\(dq, \(dqMiB\(dq) with base 1024. Unit can be customized. Covers values
from 0 to 10^{32}\&.
.sp
While being similar to \fBformatter_si\fP, this formatter
differs in one aspect. Given a variable with default value = 995,
formatting it results in \(dq995 B\(dq. After increasing it
by 20 it equals to 1015, which is still not enough to become
a kilobyte \-\- so returned value will be \(dq1015 B\(dq. Only after one
more increase (at 1024 and more) the value will morph into \(dq1.00 KiB\(dq
form.
.sp
That\(aqs why the initial \fBmax_value_len\fP should be at least 5 \-\- because it
is a minimum requirement for formatting values from 1023 to \-1023. However,
The negative values for this formatter are disabled by default and rendered
as 0, which decreases the \fBmax_value_len\fP minimum value back to 4.
.sp
Total maximum length of the result is \fBmax_value_len + 4\fP = \fB8\fP
(base + 1 from separator + 1 from unit + 2 from prefix, assuming all of
them have default values defined in \fBformatter_si_binary\fP).
.sp
Extending the formatter
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
my_formatter = StaticFormatter(formatter_si_binary)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
.nf
.ft C
>>> format_si_binary(1010)  # 1010 b < 1 kb
\(aq1010 B\(aq
>>> format_si_binary(1080)
\(aq1.05 KiB\(aq
>>> format_si_binary(45200)
\(aq44.1 KiB\(aq
>>> format_si_binary(1.258 * pow(10, 6), \(aqb\(aq)
\(aq1.20 Mib\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Max output len
8
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval\fP (\fIfloat\fP) \-\- Input value in bytes.
.IP \(bu 2
\fBunit\fP (\fIOptional\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- A unit override [default unit is \(dqB\(dq].
.IP \(bu 2
\fBauto_color\fP (\fIbool\fP) \-\- Color mode override, \fIbool\fP to enable/disable colorizing
depending on unit type, \fINone\fP to use formatters\(aq setting
value [\fIFalse\fP by default].
.UNINDENT
.TP
.B Returns
Formatted value, \fIText\fP if colorizing is on, \fIstr\fP otherwise.
.TP
.B Return type
\fIRT\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.numfmt.format_bytes_human(val, auto_color=False)
Invoke special case of fixed\-length SI formatter optimized for processing
byte\-based values. Inspired by default stats formatting used in
\fI\%htop\fP\&. Comprises traits of both preset SI formatters,
the key ones being:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
expecting integer inputs;
.IP \(bu 2
prohibiting negative inputs;
.IP \(bu 2
operating in decimal mode with the base of 1000 (not 1024);
.IP \(bu 2
the absence of units and value\-unit separators in the output, while
prefixes are still present;
.IP \(bu 2
(if colors allowed) utilizing \fI\%Highlighter\fP with a bit customized setup,
as detailed below.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Total maximum length is \fBmax_value_len + 1\fP, which is \fB5\fP
by default (4 from value + 1 from prefix).
.INDENT 7.0
.INDENT 3.5
.IP "Highlighting options"
.sp
Default highlighter for this formatter does not render units (as well as
prefixes) dimmed. The main reason for that is the absence of actual unit in
the output of this formatter, while prefixes are still there; this allows
to format the fractional output this way: [1].57[k], where brackets []
indicate brighter colors.
.sp
This format is acceptable because only essential info gets highlighted; however,
in case of other formatters with actual units in the output this approach leads
to complex and mixed\-up formatting; furthermore, it doesn\(aqt matter if the
highlighting affects the prefix part only or both prefix and unit parts \-\- in
either case it\(aqs just too much formatting on a unit of surface:
[1].53 [Ki]B (looks patchworky).
.UNINDENT
.UNINDENT
.SS Default formatters comparison
.TS
center;
|l|l|l|l|.
_
T{
Value
T}	T{
\fBSI(unit=\(aqB\(aq)\fP
T}	T{
\fBSI_BINARY\fP
T}	T{
\fBBYTES_HUMAN\fP
T}
_
T{
1568
T}	T{
\(aq1.57 kB\(aq
T}	T{
\(aq1.53 KiB\(aq
T}	T{
\(aq1.57k\(aq
T}
_
T{
218371331
T}	T{
\(aq218 MB\(aq
T}	T{
\(aq208 MiB\(aq
T}	T{
\(aq218M\(aq
T}
_
T{
0.25
T}	T{
\(aq250 mB\(aq [1]
T}	T{
\(aq0 B\(aq
T}	T{
\(aq0\(aq
T}
_
T{
\-1218371331232
T}	T{
\(aq\-1.2 TB\(aq
T}	T{
\(aq0 B\(aq
T}	T{
\(aq0\(aq
T}
_
.TE
.IP [1] 5
250 millibytes is not something you would see every day
.sp
Extending the formatter
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
my_formatter = StaticFormatter(formatter_bytes_human, unit_separator=\(dq \(dq)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
.nf
.ft C
>>> format_bytes_human(990)
\(aq990\(aq
>>> format_bytes_human(1010)
\(aq1.01k\(aq
>>> format_bytes_human(45200)
\(aq45.2k\(aq
>>> format_bytes_human(1.258 * pow(10, 6))
\(aq1.26M\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Max output len
5
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval\fP (\fIint\fP) \-\- Input value in bytes.
.IP \(bu 2
\fBauto_color\fP (\fIbool\fP) \-\- Color mode override, \fIbool\fP to enable/disable colorizing
depending on unit type, \fINone\fP to use formatters\(aq setting
value [\fIFalse\fP by default].
.UNINDENT
.TP
.B Returns
Formatted value, \fIText\fP if colorizing is on, \fIstr\fP otherwise.
.TP
.B Return type
\fIRT\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.numfmt.format_time(val_sec, auto_color=None)
Invoke dynamic\-length general\-purpose time formatter, which supports a
wide range of output units, including seconds, minutes, hours, days, weeks,
months, years, milliseconds, microseconds, nanoseconds etc.
.sp
Extending the formatter
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
my_formatter = DynamicFormatter(formatter_time, unit_separator=\(dq \(dq)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
.nf
.ft C
>>> format_time(12)
\(aq12.0 s\(aq
>>> format_time(65536)
\(aq18 h\(aq
>>> format_time(0.00324)
\(aq3.2 ms\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Max output len
\fIvarying\fP
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval_sec\fP (\fIfloat\fP) \-\- Input value in seconds.
.IP \(bu 2
\fBauto_color\fP (\fIOptional\fP\fI[\fP\fIbool\fP\fI]\fP) \-\- Color mode override, \fIbool\fP to enable/disable colorizing
depending on unit type, \fINone\fP to use formatters\(aq setting
value [\fIFalse\fP by default].
.UNINDENT
.TP
.B Return type
\fIRT\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.numfmt.format_time_ms(value_ms, auto_color=None)
Invoke a variation of \fBformatter_time\fP specifically configured to
format small time intervals.
.sp
Extending the formatter
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
my_formatter = DynamicFormatter(formatter_time_ms, unit_separator=\(dq \(dq)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
.nf
.ft C
>>> format_time_ms(1)
\(aq1ms\(aq
>>> format_time_ms(344)
\(aq344ms\(aq
>>> format_time_ms(0.967)
\(aq967µs\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvalue_ms\fP (\fIfloat\fP) \-\- Input value in milliseconds.
.IP \(bu 2
\fBauto_color\fP (\fIOptional\fP\fI[\fP\fIbool\fP\fI]\fP) \-\- Color mode override, \fIbool\fP to enable/disable colorizing
depending on unit type, \fINone\fP to use formatters\(aq setting
value [\fIFalse\fP by default].
.UNINDENT
.TP
.B Returns

.TP
.B Return type
\fIRT\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.numfmt.format_time_ns(value_ns, auto_color=None)
Wrapper for \fI\%format_time_ms()\fP expecting input value as nanoseconds.
.sp
.nf
.ft C
>>> format_time_ns(1003000)
\(aq1ms\(aq
>>> format_time_ns(3232332224)
\(aq3s\(aq
>>> format_time_ns(9932248284343.32)
\(aq2h\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvalue_ns\fP (\fIfloat\fP) \-\- Input value in nanoseconds.
.IP \(bu 2
\fBauto_color\fP (\fIOptional\fP\fI[\fP\fIbool\fP\fI]\fP) \-\- Color mode override, \fIbool\fP to enable/disable colorizing
depending on unit type, \fINone\fP to use formatters\(aq setting
value [\fIFalse\fP by default].
.UNINDENT
.TP
.B Returns

.TP
.B Return type
\fIRT\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.numfmt.format_time_delta(val_sec, max_len=None, auto_color=None)
Format time interval using the most suitable format with one or
two time units, depending on \fBmax_len\fP argument. Key feature
of this formatter is an ability to combine two units and display
them simultaneously, e.g. return \(dq3h 48min\(dq instead of \(dq228 mins\(dq
or \(dq3 hours\(dq, and on top of that \-\- fixed\-length output.
.sp
There are predefined formatters with output lengths of \fB3, 4, 5,
6\fP and \fB10\fP characters. Therefore, you can pass in any value
from 3 inclusive and it\(aqs guarenteed that result\(aqs length
will be less or equal to required length. If \fI\%max_len\fP is
omitted, longest registred formatter will be used.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Negative values are supported by formatters 5 and 10 only.
.UNINDENT
.UNINDENT
.sp
.nf
.ft C
>>> format_time_delta(10, 3)
\(aq10s\(aq
>>> format_time_delta(10, 6)
\(aq10.0s\(aq
>>> format_time_delta(15350, 4)
\(aq4 h\(aq
>>> format_time_delta(15350)
\(aq4h 15min\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Max output len
3, 4, 5, 6, 10
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval_sec\fP (\fIfloat\fP) \-\- Input value in seconds.
.IP \(bu 2
\fBmax_len\fP (\fIOptional\fP\fI[\fP\fIint\fP\fI]\fP) \-\- Maximum output string length (total).
.IP \(bu 2
\fBauto_color\fP (\fIOptional\fP\fI[\fP\fIbool\fP\fI]\fP) \-\- Color mode override, \fIbool\fP to enable/disable colorizing
depending on unit type, \fINone\fP to use formatters\(aq setting
value [\fIFalse\fP by default].
.UNINDENT
.TP
.B Return type
\fIRT\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.numfmt.format_time_delta_shortest(val_sec, auto_color=None)
Wrapper around \fI\%format_time_delta()\fP with pre\-set shortest formatter.
.INDENT 7.0
.TP
.B Max output len
3
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval_sec\fP (\fIfloat\fP) \-\- Input value in seconds.
.IP \(bu 2
\fBauto_color\fP (\fIOptional\fP\fI[\fP\fIbool\fP\fI]\fP) \-\- Color mode override, \fIbool\fP to enable/disable colorizing
depending on unit type, \fINone\fP to use formatters\(aq setting
value [\fIFalse\fP by default].
.UNINDENT
.TP
.B Return type
\fIRT\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.numfmt.format_time_delta_longest(val_sec, auto_color=None)
Wrapper around \fI\%format_time_delta()\fP with pre\-set longest formatter.
.INDENT 7.0
.TP
.B Max output len
10
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval_sec\fP (\fIfloat\fP) \-\- Input value in seconds.
.IP \(bu 2
\fBauto_color\fP (\fIOptional\fP\fI[\fP\fIbool\fP\fI]\fP) \-\- Color mode override, \fIbool\fP to enable/disable colorizing
depending on unit type, \fINone\fP to use formatters\(aq setting
value [\fIFalse\fP by default].
.UNINDENT
.TP
.B Return type
\fIRT\fP
.UNINDENT
.UNINDENT
.SS pytermor.parser
.sp
Module Attributes
.TS
center;
|l|l|.
_
T{
\fI\%ESCAPE_SEQ_REGEX\fP
T}	T{
Regular expression that matches all classes of escape sequences.
T}
_
T{
\fI\%SGR_SEQ_REGEX\fP
T}	T{
Regular expression that matches \fI\%SGR\fP sequences.
T}
_
T{
\fI\%CSI_SEQ_REGEX\fP
T}	T{
Regular expression that matches CSI sequences (a superset which includes  \fI\%SGRs\fP).
T}
_
T{
\fI\%RCP_REGEX\fP
T}	T{
Regular expression for RCP sequence parsing.
T}
_
.TE
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fI\%contains_sgr\fP(string, *codes)
T}	T{
Return the first match of \fI\%SGR\fP sequence in \fBstring\fP with specified \fBcodes\fP as params, strictly inside a single sequence in specified order, or \fINone\fP if nothing was found.
T}
_
T{
\fI\%decompose_report_cursor_position\fP(string)
T}	T{
Parse RCP sequence that usually comes from a terminal as a response to \fI\%QCP\fP sequence and contains a cursor\(aqs current line and column.
T}
_
T{
\fBparse\fP(string)
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B pytermor.parser.ESCAPE_SEQ_REGEX
Regular expression that matches all classes of escape sequences.
.sp
More specifically, it recognizes \fBnF\fP, \fBFp\fP, \fBFe\fP and \fBFs\fP [1] 
classes. Useful for removing the sequences as well as for granular search 
thanks to named match groups, which include:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B \fBescape_byte\fP
first byte of every sequence \-\- \fBESC\fP, or 0x1B\&.
.TP
.B \fBdata\fP
remaining bytes of the sequence (without escape byte) represented as 
one of the following groups: \fBnf_class_seq\fP, \fBfp_class_seq\fP, 
\fBfe_class_seq\fP or \fBfs_class_seq\fP; each of these splits further to
even more specific subgroups:
.INDENT 7.0
.IP \(bu 2
\fBnf_interm\fP and \fBnf_final\fP as parts of \fBnF\fP\-class sequences,
.IP \(bu 2
\fBfp_classifier\fP and \fBfp_interm\fP for \fBFp\fP\-class sequences,
.IP \(bu 2
\fBfe_classifier\fP, \fBfe_param\fP, \fBfe_interm\fP and \fBfe_final\fP 
for \fBFe\fP\-class sequences (including \fI\%SGRs\fP),
.IP \(bu 2
\fBfs_classifier\fP and \fBfs_final\fP for \fBFs\fP\-class sequences.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP [1] 5
\fI\%ECMA\-35 specification\fP
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.parser.SGR_SEQ_REGEX
Regular expression that matches \fI\%SGR\fP sequences. Group 3 can be used for 
sequence params extraction.
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.parser.CSI_SEQ_REGEX
Regular expression that matches CSI sequences (a superset which includes 
\fI\%SGRs\fP).
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.parser.RCP_REGEX
Regular expression for RCP sequence parsing. 
See \fI\%decompose_report_cursor_position()\fP\&.
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.parser.contains_sgr(string, *codes)
Return the first match of \fI\%SGR\fP sequence in \fBstring\fP with specified
\fBcodes\fP as params, strictly inside a single sequence in specified order,
or \fINone\fP if nothing was found.
.sp
The match object has one group (or, technically, two):
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Group #0: the whole matched SGR sequence;
.IP \(bu 2
Group #1: the requested code bytes only.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Example regex used for searching: 
.nf
:regex:\(ga\ex1b\e[(?:|[\ed;]*;)(48;5)(?:|;[\ed;]*)m\(ga
.fi
\&.
.IP "System Message: ERROR/3 (/home/a.shavykin/dl/pytermor/docs/apidoc/pytermor.parser.rst:, line 14)"
Unknown interpreted text role \(dqregex\(dq.
.sp
.nf
.ft C
>>> contains_sgr(make_color_256(128).assemble(), 38)
<re.Match object; span=(0, 11), match=\(aq[38;5;128m\(aq>
>>> contains_sgr(make_color_256(84, ColorTarget.BG).assemble(), 48, 5)
<re.Match object; span=(0, 10), match=\(aq[48;5;84m\(aq>
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIstr\fP) \-\- String to search the SGR in.
.IP \(bu 2
\fBcodes\fP (\fIint\fP) \-\- Integer SGR codes to find.
.UNINDENT
.TP
.B Return type
re.Match | None
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.parser.decompose_report_cursor_position(string)
Parse RCP sequence that usually comes from
a terminal as a response to \fI\%QCP\fP sequence and
contains a cursor\(aqs current line and column.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
As the library in general provides sequence assembling methods, but not
the disassembling ones, there is no dedicated class for RCP sequences yet.
.UNINDENT
.UNINDENT
.sp
.nf
.ft C
>>> decompose_report_cursor_position(\(aq[9;15R\(aq)
(9, 15)
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
\fBstring\fP (\fIstr\fP) \-\- Terminal response with a sequence.
.TP
.B Returns
Current line and column if the expected sequence exists
in \fBstring\fP, \fINone\fP otherwise.
.TP
.B Return type
\fIOptional\fP[\fITuple\fP[int, int]]
.UNINDENT
.UNINDENT
.SS pytermor.renderer
.sp
Output formatters. Default global renderer type is \fI\%SgrRenderer\fP\&.
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fBinit_renderer\fP()
T}	T{
T}
_
.TE
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%HtmlRenderer\fP()
T}	T{
Translate \fI\%Styles\fP attributes into a rudimentary HTML markup.
T}
_
T{
\fI\%IRenderer\fP()
T}	T{
Renderer interface.
T}
_
T{
\fI\%NoOpRenderer\fP()
T}	T{
Special renderer type that does nothing with the input string and just returns it as is (i.e.
T}
_
T{
\fI\%OutputMode\fP(value)
T}	T{
Determines what types of SGR sequences are allowed to use in the output.
T}
_
T{
\fI\%RendererManager\fP()
T}	T{
Class for global rendering mode setup.
T}
_
T{
\fI\%SgrDebugger\fP([output_mode])
T}	T{
Subclass of regular \fI\%SgrRenderer\fP with two differences \-\- instead of rendering the proper ANSI escape sequences it renders them with \fBESC\fP character replaced by \(dqǝ\(dq, and encloses the whole sequence into \(aq()\(aq for visual separation.
T}
_
T{
\fI\%SgrRenderer\fP([output_mode, io])
T}	T{
Default renderer invoked by \fI\%Text.render()\fP\&.
T}
_
T{
\fI\%TemplateRenderer\fP()
T}	T{
T}
_
T{
\fI\%TmuxRenderer\fP()
T}	T{
Translates \fI\%Styles\fP attributes into \fI\%tmux\-compatible\fP markup.
T}
_
.TE
.INDENT 0.0
.TP
.B class  pytermor.renderer.RendererManager
Class for global rendering mode setup.
.sp
Selecting the renderer can be accomplished in several ways:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP a. 3
By using general\-purpose functions \fI\%text.render()\fP and \fI\%text.echo()\fP \-\-
both have an argument \fBrenderer\fP (preferrable; introduced in \fBpytermor 2.x\fP).
.IP b. 3
Method \fI\%RendererManager.set_default()\fP sets the default renderer globally.
After that calling \fI\%text.render()\fP will automatically invoke a said renderer
and apply the required formatting (that is, if \fBrenderer\fP argument is
left empty).
.IP c. 3
Alternatively, you can use renderer\(aqs instance method
\fI\%render()\fP directly and avoid messing up with the manager,
but that\(aqs not recommended and possibly will be deprecated in future versions).
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Generally speaking, if you need to invoke a custom renderer just once, it\(aqs
convenient to use the first method for this matter, and use the second one
in all the other cases.
.sp
On the contrary, if there is a necessity to use more than one renderer
alternatingly, it\(aqs better to avoid using the global one at all, and just
instantiate and invoke both renderers independently.
.sp
TL;DR
.sp
To unconditionally print formatted message to standard output, use
\fI\%RendererManager.set_default_format_always()\fP and then \fI\%render()\fP\&.
.INDENT 7.0
.TP
.B classmethod  set_default(renderer=None)
Select a global renderer.
.INDENT 7.0
.TP
.B Parameters
\fBrenderer\fP (\fIOptional\fP\fI[\fP\fIUnion\fP\fI[\fP\fI\%IRenderer\fP\fI, \fP\fIType\fP\fI[\fP\fI\%IRenderer\fP\fI]\fP\fI]\fP\fI]\fP) \-\- 
.sp
Default renderer to use globally. Calling this method without arguments
will result in library default renderer \fI\%SgrRenderer\fP being set as default.
.sp
All the methods with the \fBrenderer\fP argument (e.g., \fI\%text.render()\fP)
will use the global default one if said argument is omitted or set to \fINone\fP\&.
.sp
You can specify either the renderer class, in which case manager will
instantiate it with the default parameters, or provide already instantiated
and set up renderer, which will be registred as global.

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  get_default()
Get global renderer instance (\fI\%SgrRenderer\fP, or the one provided earlier with
\fI\%set_default()\fP).
.INDENT 7.0
.TP
.B Return type
\fI\%IRenderer\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  set_default_format_always()
Shortcut for forcing all control sequences to be present in the
output of a global renderer.
.sp
Note that it applies only to the renderer that is set up as default at
the moment of calling this method, i.e., all previously created instances,
as well as the ones that will be created afterwards, are unaffected.
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  set_default_format_never()
Shortcut for disabling all output formatting of a global renderer.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.IRenderer
Renderer interface.
.INDENT 7.0
.TP
.B abstract  property  is_caching_allowed:  bool
Class\-level property.
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if caching of renderer\(aqs results makes any sense and \fIFalse\fP
otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B abstract  property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if renderer is set up to use the formatting and will do
it on invocation, and \fIFalse\fP otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B abstract  render(string, fmt=None)
Apply colors and attributes described in \fBfmt\fP argument to
\fBstring\fP and return the result. Output format depends on renderer\(aqs
class, which defines the implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIstr\fP) \-\- String to format.
.IP \(bu 2
\fBfmt\fP (\fIOptional\fP\fI[\fP\fIFT\fP\fI]\fP) \-\- Style or color to apply. If \fBfmt\fP is a \fBIColor\fP instance,
it is assumed to be a foreground color. See \fI\%FT\fP\&.
.UNINDENT
.TP
.B Returns
String with formatting applied, or without it, depending on
renderer settings.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B clone(*args, **kwargs)
Make a copy of the renderer with the same setup.
.INDENT 7.0
.TP
.B Return type
\fIT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.OutputMode(value)
Bases: \fBEnum\fP
.sp
Determines what types of SGR sequences are allowed to use in the output.
.INDENT 7.0
.TP
.B NO_ANSI  =  \(aqno_ansi\(aq
The renderer discards all color and format information completely.
.UNINDENT
.INDENT 7.0
.TP
.B XTERM_16  =  \(aqxterm_16\(aq
16\-colors mode. Enforces the renderer to approximate all color types
to \fI\%Color16\fP and render them as basic mode selection SGR sequences
(\fBESC [31m\fP, \fBESC [42m\fP etc). See \fBColor.approximate()\fP for approximation
algorithm details.
.UNINDENT
.INDENT 7.0
.TP
.B XTERM_256  =  \(aqxterm_256\(aq
256\-colors mode. Allows the renderer to use either \fI\%Color16\fP or \fI\%Color256\fP 
(but RGB will be approximated to 256\-color pallette).
.UNINDENT
.INDENT 7.0
.TP
.B TRUE_COLOR  =  \(aqtrue_color\(aq
RGB color mode. Does not apply restrictions to color rendering.
.UNINDENT
.INDENT 7.0
.TP
.B AUTO  =  \(aqauto\(aq
Lets the renderer select the most suitable mode by itself.
See \fI\%SgrRenderer\fP constructor documentation for the details.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.SgrRenderer(output_mode=OutputMode.AUTO, io=<_io.TextIOWrapper name=\(aq<stdout>\(aq mode=\(aqw\(aq encoding=\(aqutf\-8\(aq>)
Bases: \fI\%IRenderer\fP
.sp
Default renderer invoked by \fI\%Text.render()\fP\&. Transforms \fBIColor\fP instances
defined in \fBstyle\fP into ANSI control sequence bytes and merges them with
input string. Type of resulting \fI\%SequenceSGR\fP depends on type of \fBIColor\fP
instances in \fBstyle\fP argument and current output mode of the renderer.
.INDENT 7.0
.IP 1. 3
\fI\%ColorRGB\fP can be rendered as True Color sequence, 256\-color sequence
or 16\-color sequence depending on specified \fI\%OutputMode\fP and config
variable \fBConfig.prefer_rgb\fP\&.
.IP 2. 3
\fI\%Color256\fP can be rendered as 256\-color sequence or 16\-color
sequence.
.IP 3. 3
\fI\%Color16\fP will be rendered as 16\-color sequence.
.IP 4. 3
Nothing of the above will happen and all formatting will be discarded
completely if output device is not a terminal emulator or if the developer
explicitly set up the renderer to do so (\fI\%OutputMode.NO_ANSI\fP).
.UNINDENT
.sp
Renderer approximates RGB colors to closest \fBindexed\fP colors if terminal doesn\(aqt
support RGB output. In case terminal doesn\(aqt support even 256 colors, it
falls back to 16\-color palette and picks closest samples again the same way.
See \fI\%OutputMode\fP documentation for exact mappings.
.sp
.nf
.ft C
>>> SgrRenderer(OutputMode.XTERM_256).render(\(aqtext\(aq, Styles.WARNING_LABEL)
\(aq[1;33mtext[22;39m\(aq
>>> SgrRenderer(OutputMode.NO_ANSI).render(\(aqtext\(aq, Styles.WARNING_LABEL)
\(aqtext\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
\fBoutput_mode\fP (\fI\%OutputMode\fP) \-\- 
.sp
SGR output mode to use. Valid values are listed in \fI\%OutputMode\fP enum.
.sp
With \fI\%OutputMode.AUTO\fP the renderer will first check if the output
device is a terminal emulator, and use \fI\%OutputMode.NO_ANSI\fP when it
is not. Otherwise, the renderer will read \fBTERM\fP environment
variable and follow these rules:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%OutputMode.NO_ANSI\fP if \fBTERM\fP is set to \fBxterm\fP\&.
.IP \(bu 2
\fI\%OutputMode.XTERM_16\fP if \fBTERM\fP is set to \fBxterm\-color\fP\&.
.IP \(bu 2
\fI\%OutputMode.XTERM_256\fP in all other cases.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Special case is when \fBTERM\fP equals to \fBxterm\-256color\fP \fBand\fP
\fBCOLORTERM\fP is either \fBtruecolor\fP or  \fB24bit\fP, then
\fI\%OutputMode.TRUE_COLOR\fP will be used.

.UNINDENT
.INDENT 7.0
.TP
.B property  is_caching_allowed:  bool
Class\-level property.
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if caching of renderer\(aqs results makes any sense and \fIFalse\fP
otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if renderer is set up to use the formatting and will do
it on invocation, and \fIFalse\fP otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(string, fmt=None)
Apply colors and attributes described in \fBfmt\fP argument to
\fBstring\fP and return the result. Output format depends on renderer\(aqs
class, which defines the implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIstr\fP) \-\- String to format.
.IP \(bu 2
\fBfmt\fP (\fIOptional\fP\fI[\fP\fIFT\fP\fI]\fP) \-\- Style or color to apply. If \fBfmt\fP is a \fBIColor\fP instance,
it is assumed to be a foreground color. See \fI\%FT\fP\&.
.UNINDENT
.TP
.B Returns
String with formatting applied, or without it, depending on
renderer settings.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B clone()
Make a copy of the renderer with the same setup.
.INDENT 7.0
.TP
.B Return type
\fI\%SgrRenderer\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.TmuxRenderer
Bases: \fI\%IRenderer\fP
.sp
Translates \fI\%Styles\fP attributes into
\fI\%tmux\-compatible\fP
markup. \fI\%tmux\fP is a commonly used terminal
multiplexer.
.sp
.nf
.ft C
>>> TmuxRenderer().render(\(aqtext\(aq,  Style(fg=\(aqblue\(aq, bold=True))
\(aq#[fg=blue bold]text#[fg=default nobold]\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B property  is_caching_allowed:  bool
Class\-level property.
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if caching of renderer\(aqs results makes any sense and \fIFalse\fP
otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns
Always \fITrue\fP, because tmux markup can be used without regard
to the type of output device and its capabilities \-\- all the
dirty work will be done by the multiplexer itself.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(string, fmt=None)
Apply colors and attributes described in \fBfmt\fP argument to
\fBstring\fP and return the result. Output format depends on renderer\(aqs
class, which defines the implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIstr\fP) \-\- String to format.
.IP \(bu 2
\fBfmt\fP (\fIOptional\fP\fI[\fP\fIFT\fP\fI]\fP) \-\- Style or color to apply. If \fBfmt\fP is a \fBIColor\fP instance,
it is assumed to be a foreground color. See \fI\%FT\fP\&.
.UNINDENT
.TP
.B Returns
String with formatting applied, or without it, depending on
renderer settings.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B clone(*args, **kwargs)
Make a copy of the renderer with the same setup.
.INDENT 7.0
.TP
.B Return type
\fIT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.NoOpRenderer
Bases: \fI\%IRenderer\fP
.sp
Special renderer type that does nothing with the input string and just
returns it as is (i.e. raw text without any \fI\%Styles\fP applied.
Often used as a default argument value (along with similar \(dqNoOps\(dq like
\fI\%NOOP_STYLE\fP, \fI\%NOOP_COLOR\fP etc.)
.sp
.nf
.ft C
>>> NoOpRenderer().render(\(aqtext\(aq, Style(fg=\(aqgreen\(aq, bold=True))
\(aqtext\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B property  is_caching_allowed:  bool
Class\-level property.
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if caching of renderer\(aqs results makes any sense and \fIFalse\fP
otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns
Nothing to apply → nothing to allow, thus the returned value
is always \fIFalse\fP\&.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(string, fmt=None)
Return the \fBstring\fP argument untouched, don\(aqt mind the \fBfmt\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIstr\fP) \-\- String to format ignore.
.IP \(bu 2
\fBfmt\fP (\fIOptional\fP\fI[\fP\fIFT\fP\fI]\fP) \-\- Style or color to appl  discard.
.UNINDENT
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B clone(*args, **kwargs)
Make a copy of the renderer with the same setup.
.INDENT 7.0
.TP
.B Return type
\fIT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.HtmlRenderer
Bases: \fI\%IRenderer\fP
.sp
Translate \fI\%Styles\fP attributes into a rudimentary HTML markup.
All the formatting is inlined into \fBstyle\fP attribute of the \fB<span>\fP
elements. Can be optimized by extracting the common styles as CSS classes
and referencing them by DOM elements instead.
.sp
.nf
.ft C
>>> HtmlRenderer().render(\(aqtext\(aq, Style(fg=\(aqred\(aq, bold=True))
\(aq<span style=\(dqcolor: #800000; font\-weight: 700\(dq>text</span>\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B property  is_caching_allowed:  bool
Class\-level property.
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if caching of renderer\(aqs results makes any sense and \fIFalse\fP
otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns
Always \fITrue\fP, because the capabilities of the terminal have
nothing to do with HTML markup meant for web\-browsers.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(string, fmt=None)
Apply colors and attributes described in \fBfmt\fP argument to
\fBstring\fP and return the result. Output format depends on renderer\(aqs
class, which defines the implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIstr\fP) \-\- String to format.
.IP \(bu 2
\fBfmt\fP (\fIOptional\fP\fI[\fP\fIFT\fP\fI]\fP) \-\- Style or color to apply. If \fBfmt\fP is a \fBIColor\fP instance,
it is assumed to be a foreground color. See \fI\%FT\fP\&.
.UNINDENT
.TP
.B Returns
String with formatting applied, or without it, depending on
renderer settings.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B clone(*args, **kwargs)
Make a copy of the renderer with the same setup.
.INDENT 7.0
.TP
.B Return type
\fIT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.SgrDebugger(output_mode=OutputMode.AUTO)
Bases: \fI\%SgrRenderer\fP
.sp
Subclass of regular \fI\%SgrRenderer\fP with two differences \-\- instead of rendering the
proper ANSI escape sequences it renders them with \fBESC\fP character replaced by \(dqǝ\(dq,
and encloses the whole sequence into \(aq()\(aq for visual separation.
.sp
Can be used for debugging of assembled sequences, because such a transformation
reliably converts a control sequence into a harmless piece of bytes completely
ignored by the terminals.
.sp
.nf
.ft C
>>> SgrDebugger(OutputMode.XTERM_16).render(\(aqtext\(aq, Style(fg=\(aqred\(aq, bold=True))
\(aq(ǝ[1;31m)text(ǝ[22;39m)\(aq
.ft P
.fi
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B property  is_caching_allowed:  bool
Class\-level property.
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if caching of renderer\(aqs results makes any sense and \fIFalse\fP
otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if renderer is set up to use the formatting and will do
it on invocation, and \fIFalse\fP otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(string, fmt=None)
Apply colors and attributes described in \fBfmt\fP argument to
\fBstring\fP and return the result. Output format depends on renderer\(aqs
class, which defines the implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIstr\fP) \-\- String to format.
.IP \(bu 2
\fBfmt\fP (\fIOptional\fP\fI[\fP\fIFT\fP\fI]\fP) \-\- Style or color to apply. If \fBfmt\fP is a \fBIColor\fP instance,
it is assumed to be a foreground color. See \fI\%FT\fP\&.
.UNINDENT
.TP
.B Returns
String with formatting applied, or without it, depending on
renderer settings.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B clone()
Make a copy of the renderer with the same setup.
.INDENT 7.0
.TP
.B Return type
\fI\%SgrDebugger\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B set_format_always()
Force all control sequences to be present in the output.
.UNINDENT
.INDENT 7.0
.TP
.B set_format_auto()
Reset the force formatting flag and let the renderer decide by itself (see
\fI\%SgrRenderer\fP docs for the details).
.UNINDENT
.INDENT 7.0
.TP
.B set_format_never()
Force disabling of all output formatting.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.TemplateRenderer
Bases: \fI\%IRenderer\fP
.INDENT 7.0
.TP
.B clone(*args, **kwargs)
Make a copy of the renderer with the same setup.
.INDENT 7.0
.TP
.B Return type
\fIT\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  is_caching_allowed:  bool
Class\-level property.
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if caching of renderer\(aqs results makes any sense and \fIFalse\fP
otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns
Always \fITrue\fP, because template renderer is not expected to
put the results directly to a tty.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(string, fmt=None)
Apply colors and attributes described in \fBfmt\fP argument to
\fBstring\fP and return the result. Output format depends on renderer\(aqs
class, which defines the implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIstr\fP) \-\- String to format.
.IP \(bu 2
\fBfmt\fP (\fIOptional\fP\fI[\fP\fIFT\fP\fI]\fP) \-\- Style or color to apply. If \fBfmt\fP is a \fBIColor\fP instance,
it is assumed to be a foreground color. See \fI\%FT\fP\&.
.UNINDENT
.TP
.B Returns
String with formatting applied, or without it, depending on
renderer settings.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.SS pytermor.style
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
S
.UNINDENT
.UNINDENT
.sp
Module Attributes
.TS
center;
|l|l|.
_
T{
\fI\%FT\fP
T}	T{
FT is a style descriptor.
T}
_
T{
\fI\%NOOP_STYLE\fP
T}	T{
Special style passing the text through without any modifications.
T}
_
.TE
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fI\%make_style\fP([fmt])
T}	T{
General \fI\%Style\fP constructor.
T}
_
T{
\fI\%merge_styles\fP([base, fallbacks, overwrites])
T}	T{
Bulk style merging method.
T}
_
.TE
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%Style\fP([fallback, fg, bg, frozen, bold, dim, ...])
T}	T{
Create new text render descriptior.
T}
_
T{
\fI\%Styles\fP()
T}	T{
Some ready\-to\-use styles which also can be used as examples.
T}
_
.TE
.INDENT 0.0
.TP
.B pytermor.style.FT
FT is a style descriptor. Used as a shortcut precursor for actual 
styles. Primary handler is \fI\%make_style()\fP\&.
.sp
alias of TypeVar(\(aqFT\(aq, int, str, ~pytermor.color.IColor, Style, None)
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.style.Style(fallback=None, fg=None, bg=None, frozen=False, *, bold=None, dim=None, italic=None, underlined=None, overlined=None, crosslined=None, double_underlined=None, curly_underlined=None, underline_color=None, inversed=None, blink=None, framed=None, class_name=None)
Create new text render descriptior.
.sp
Both \fBfg\fP and \fBbg\fP can be specified as existing \fBIColor\fP instance as well
as plain \fIstr\fP or \fIint\fP (for the details see \fI\%resolve_color()\fP).
.sp
.nf
.ft C
>>> Style(fg=\(aqgreen\(aq, bold=True)
<Style[green +BOLD]>
>>> Style(bg=0x0000ff)
<Style[|#0000ff]>
>>> Style(fg=\(aqDeepSkyBlue1\(aq, bg=\(aqgray3\(aq)
<Style[x39|x232]>
.ft P
.fi
.sp
Attribute merging from \fBfallback\fP works this way:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
If constructor argument is \fInot\fP empty (\fITrue\fP, \fIFalse\fP, \fBIColor\fP
etc.), keep it as attribute value.
.IP \(bu 2
.INDENT 2.0
.TP
.B If constructor argument is empty (\fINone\fP, \fBNOOP_COLOR\fP), take the
value from \fBfallback\fP\(aqs corresponding attribute.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
See \fI\%merge_fallback()\fP and \fI\%merge_overwrite()\fP methods and take the
differences into account. The method used in the constructor is the first one.
.sp
\fBIMPORTANT:\fP
.INDENT 7.0
.INDENT 3.5
Both empty (i.e., \fINone\fP) attributes of type \fBIColor\fP after initialization
will be replaced with special constant \fI\%NOOP_COLOR\fP, which behaves like
there was no color defined, and at the same time makes it safer to work
with nullable color\-type variables. Merge methods are aware of this and
trear \fI\%NOOP_COLOR\fP as \fINone\fP\&.
.UNINDENT
.UNINDENT
.sp
\fBIMPORTANT:\fP
.INDENT 7.0
.INDENT 3.5
\fINone\fP and \fI\%NOOP_COLOR\fP are always treated as placeholders for fallback
values, i.e., they can\(aqt be used as \fIresetters\fP \-\- that\(aqs what \fI\%DEFAULT_COLOR\fP
is for.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
All arguments except \fBfallback\fP, \fBfg\fP, \fBbg\fP and \fBfrozen\fP are
\fIkwonly\fP\-type args.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfallback\fP (\fI\%Style\fP) \-\- Copy empty attributes from speicifed fallback style.
See \fI\%merge_fallback()\fP\&.
.IP \(bu 2
\fBfg\fP (\fICDT\fP\fI | \fP\fIIColor\fP) \-\- Foreground (=text) color.
.IP \(bu 2
\fBbg\fP (\fICDT\fP\fI | \fP\fIIColor\fP) \-\- Background color.
.IP \(bu 2
\fBfrozen\fP (\fIbool\fP) \-\- Set to \fITrue\fP to make an immutable instance.
.IP \(bu 2
\fBbold\fP (\fIbool\fP) \-\- Bold or increased intensity.
.IP \(bu 2
\fBdim\fP (\fIbool\fP) \-\- Faint, decreased intensity.
.IP \(bu 2
\fBitalic\fP (\fIbool\fP) \-\- Italic.
.IP \(bu 2
\fBunderlined\fP (\fIbool\fP) \-\- Underline.
.IP \(bu 2
\fBoverlined\fP (\fIbool\fP) \-\- Overline.
.IP \(bu 2
\fBcrosslined\fP (\fIbool\fP) \-\- Strikethrough.
.IP \(bu 2
\fBdouble_underlined\fP (\fIbool\fP) \-\- Double underline.
.IP \(bu 2
\fBcurly_underlined\fP (\fIbool\fP) \-\- Curly underline.
.IP \(bu 2
\fBunderline_color\fP (\fICDT\fP\fI | \fP\fIIColor\fP) \-\- Underline color, if applicable.
.IP \(bu 2
\fBinversed\fP (\fIbool\fP) \-\- Swap foreground and background colors.
.IP \(bu 2
\fBblink\fP (\fIbool\fP) \-\- Blinking effect.
.IP \(bu 2
\fBframed\fP (\fIbool\fP) \-\- Enclosed in a rectangle border.
.IP \(bu 2
\fBclass_name\fP (\fIstr\fP) \-\- Custom class name for the element.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  fg:  IColor
Foreground (i.e., text) color. Can be set as \fI\%CDT\fP or \fBIColor\fP,
stored always as \fBIColor\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B property  bg:  IColor
Background color. Can be set as \fI\%CDT\fP or \fBIColor\fP, stored always
as \fBIColor\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B property  underline_color:  IColor
Underline color. Can be set as \fI\%CDT\fP or \fBIColor\fP, stored always
as \fBIColor\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B bold:  bool
Bold or increased intensity (depending on terminal settings).
.UNINDENT
.INDENT 7.0
.TP
.B dim:  bool
Faint, decreased intensity.
.INDENT 7.0
.INDENT 3.5
.IP "Terminal\-based rendering"
.sp
Terminals apply this effect to foreground (=text) color, but when 
it\(aqs used together with \fI\%inversed\fP, they usually make the background 
darker instead.
.sp
Also note that usually it affects indexed colors only and has no effect
on RGB\-based ones (True Color mode).
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B italic:  bool
Italic (some terminals may display it as inversed instead).
.UNINDENT
.INDENT 7.0
.TP
.B underlined:  bool
Underline.
.UNINDENT
.INDENT 7.0
.TP
.B overlined:  bool
Overline.
.UNINDENT
.INDENT 7.0
.TP
.B crosslined:  bool
Strikethrough.
.UNINDENT
.INDENT 7.0
.TP
.B double_underlined:  bool
Double underline.
.UNINDENT
.INDENT 7.0
.TP
.B curly_underlined:  bool
Curly underline.
.UNINDENT
.INDENT 7.0
.TP
.B inversed:  bool
Swap foreground and background colors. When inversed effect is active, 
changing the background color will actually change the text color, and
vice versa.
.UNINDENT
.INDENT 7.0
.TP
.B blink:  bool
Blinking effect. Supported by a limited set of \fI\%renderers\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B framed:  bool
Add a rectangular border around the text; the border color is equal to 
the text color. Supported by a limited set of \fI\%renderers\fP and 
(even more) limited amount of terminal emulators.
.UNINDENT
.INDENT 7.0
.TP
.B class_name:  str
Arbitary string used by some \fI\%renderers\fP, e.g. by \(ga
\fBHtmlRenderer\(ga\fP, which will include the value of this property to an output
element class list. This property is not inheritable.
.UNINDENT
.INDENT 7.0
.TP
.B clone(frozen=False)
Make a copy of the instance. Note that a copy is mutable by default
even if an original was frozen.
.INDENT 7.0
.TP
.B Parameters
\fBfrozen\fP \-\- Set to \fITrue\fP to make an immutable instance.
.TP
.B Return type
\fI\%Style\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B autopick_fg()
Pick \fBfg_color\fP depending on \fBbg_color\fP\&. Set \fBfg_color\fP to
either 3% gray (almost black) if background is bright, or to 80% gray
(bright gray) if it is dark. If background is None, do nothing.
.INDENT 7.0
.INDENT 3.5
.SS Todo
.sp
check if there is a better algorithm,
because current thinks text on #000080 should be black
.UNINDENT
.UNINDENT
.sp
Modifies the instance in\-place and returns it as well (for chained calls).
.INDENT 7.0
.TP
.B Return type
\fI\%Style\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B flip()
Swap foreground color and background color. Modifies the instance in\-place
and returns it as well (for chained calls).
.INDENT 7.0
.TP
.B Return type
\fI\%Style\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B merge_fallback(fallback)
Merge current style with specified \fBfallback\fP \fI\%style\fP, following
the rules:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
\fBself\fP attribute value is in priority, i.e. when both \fBself\fP and
\fBfallback\fP attributes are defined, keep \fBself\fP value.
.IP 2. 3
If \fBself\fP attribute is \fINone\fP, take the value from \fBfallback\fP\(aqs
corresponding attribute, and vice versa.
.IP 3. 3
If both attribute values are \fINone\fP, keep the \fINone\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
All attributes corresponding to constructor arguments except \fBfallback\fP
are subject to merging. \fI\%NOOP_COLOR\fP is treated like \fINone\fP (default for \fI\%fg\fP
and \fI\%bg\fP).
.sp
Modifies the instance in\-place and returns it as well (for chained calls).
.sp
Merging different values in fallback mode
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
         FALLBACK   BASE(SELF)   RESULT
         +\-\-\-\-\-\-\-+   +\-\-\-\-\-\-+   +\-\-\-\-\-\-+
ATTR\-1   | False \-\-Ø | True ===>| True |  BASE val is in priority
ATTR\-2   | True \-\-\-\-\-| None |\-\->| True |  no BASE val, taking FALLBACK val
ATTR\-3   | None  |   | True ===>| True |  BASE val is in priority
ATTR\-4   | None  |   | None |   | None |  no vals, keeping unset
         +\-\-\-\-\-\-\-+   +\-\-\-\-\-\-+   +\-\-\-\-\-\-+
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%merge_styles\fP for the examples.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBfallback\fP (\fI\%Style\fP) \-\- Style to merge the attributes with.
.TP
.B Return type
\fI\%Style\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B merge_overwrite(overwrite)
Merge current style with specified \fBoverwrite\fP \fI\%style\fP, following
the rules:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
\fBoverwrite\fP attribute value is in priority, i.e. when both \fBself\fP
and \fBoverwrite\fP attributes are defined, replace \fBself\fP value with
\fBoverwrite\fP one (in contrast to \fI\%merge_fallback()\fP, which works the
opposite way).
.IP 2. 3
If \fBself\fP attribute is \fINone\fP, take the value from \fBoverwrite\fP\(aqs
corresponding attribute, and vice versa.
.IP 3. 3
If both attribute values are \fINone\fP, keep the \fINone\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
All attributes corresponding to constructor arguments except \fBfallback\fP
are subject to merging. \fI\%NOOP_COLOR\fP is treated like \fINone\fP (default for \fI\%fg\fP
and \fI\%bg\fP).
.sp
Modifies the instance in\-place and returns it as well (for chained calls).
.sp
Merging different values in overwrite mode
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
        BASE(SELF)  OVERWRITE    RESULT
         +\-\-\-\-\-\-+   +\-\-\-\-\-\-\-+   +\-\-\-\-\-\-\-+
ATTR\-1   | True ==Ø | False \-\-\->| False |  OVERWRITE val is in priority
ATTR\-2   | None |   | True \-\-\-\->| True  |  OVERWRITE val is in priority
ATTR\-3   | True ====| None  |==>| True  |  no OVERWRITE val, keeping BASE val
ATTR\-4   | None |   | None  |   | None  |  no vals, keeping unset
         +\-\-\-\-\-\-+   +\-\-\-\-\-\-\-+   +\-\-\-\-\-\-\-+
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%merge_styles\fP for the examples.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBoverwrite\fP (\fI\%Style\fP) \-\- Style to merge the attributes with.
.TP
.B Return type
\fI\%Style\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.style.NOOP_STYLE  =  <*_NoOpStyle[]>
Special style passing the text through without any modifications.
.sp
\fBIMPORTANT:\fP
.INDENT 7.0
.INDENT 3.5
Casting to \fIbool\fP results in \fBFalse\fP for all \fBNOOP\fP instances in the 
library (\fI\%NOOP_SEQ\fP, \fI\%NOOP_COLOR\fP and \fI\%NOOP_STYLE\fP). This is intended.
.UNINDENT
.UNINDENT
.sp
This class is immutable, i.e. \fBLogicError\fP will be raised upon an attempt to
modify any of its attributes, which could potentially lead to schrödinbugs:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
st1.merge_fallback(Style(bold=True), [Style(italic=False)])
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If \fBst1\fP is a regular style instance, it\(aqs safe to call self\-modifying methods,
but if it happens to be a \fI\%NOOP_STYLE\fP, the statement could have been alter the 
internal state of the style, which is referenced all over the library, which could 
lead to the changes appearing in an unexpected places.
.sp
To be safe from this outcome one could merge styles via frontend method \fI\%merge_styles\fP, 
which always makes a copy of \fBbase\fP argument and thus cannot lead to such results.
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.style.Styles
Some ready\-to\-use styles which also can be used as examples. All instances
are immutable.
.INDENT 7.0
.TP
.B WARNING  =  <*Style[yellow]>
.UNINDENT
.INDENT 7.0
.TP
.B WARNING_LABEL  =  <*Style[yellow +BOLD]>
.UNINDENT
.INDENT 7.0
.TP
.B WARNING_ACCENT  =  <*Style[hi\-yellow]>
.UNINDENT
.INDENT 7.0
.TP
.B ERROR  =  <*Style[red]>
.UNINDENT
.INDENT 7.0
.TP
.B ERROR_LABEL  =  <*Style[red +BOLD]>
.UNINDENT
.INDENT 7.0
.TP
.B ERROR_ACCENT  =  <*Style[hi\-red]>
.UNINDENT
.INDENT 7.0
.TP
.B CRITICAL  =  <*Style[hi\-white|x160]>
.UNINDENT
.INDENT 7.0
.TP
.B CRITICAL_LABEL  =  <*Style[hi\-white|x160 +BOLD]>
.UNINDENT
.INDENT 7.0
.TP
.B CRITICAL_ACCENT  =  <*Style[hi\-white|x160 +BLIN +BOLD]>
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.style.make_style(fmt=None)
General \fI\%Style\fP constructor. Accepts a variety of argument types:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B \fI\%CDT\fP (\fIstr\fP or \fIint\fP)
This argument type implies the creation of basic \fI\%Style\fP with
the only attribute set being \fI\%fg\fP (i.e., text color). For the
details on color resolving see \fI\%resolve_color()\fP\&.
.UNINDENT
.IP \(bu 2
.INDENT 2.0
.TP
.B \fI\%Style\fP
Existing style instance. Return it as is.
.UNINDENT
.IP \(bu 2
.INDENT 2.0
.TP
.B \fINone\fP
Return \fI\%NOOP_STYLE\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBfmt\fP (\fIFT\fP) \-\- See \fI\%FT\fP\&.
.TP
.B Return type
\fI\%Style\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.style.merge_styles(base=<*_NoOpStyle[]>, *, fallbacks=(), overwrites=())
Bulk style merging method. First merge \fBfallbacks\fP \fI\%styles\fP with the
\fBbase\fP in the same order they are iterated, using \fI\%merge_fallback()\fP algorithm;
then do the same for \fBoverwrites\fP styles, but using \fI\%merge_overwrite()\fP merge
method.
.sp
The original \fI\%base\fP is left untouched, as all the operations are performed on
its clone.
.sp
Dual mode merge diagram
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
                                +\-\-\-\-\-+                                 +\-\-\-\-\-+
   >\-\-\-\->\-\-\-\->\-\-\-\-\->\-\-\-\->\-\-\-\-\-\-\->     >\-\-\-\-\-\-\-(B)\-update\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\->     |
   |    |    |     |    |       |     |                                 |  R  |
   |    |    |     |    |       |  B  >=>Ø    [0]>\-[1]>\-[2]> .. \-[n]>   |  E  |
[0]>\-[1]>\-[2]>\- .. >\-[n]>\->Ø    |  A  >=>Ø       |    |    |        |   |  S  |
   |    |    >\- .. \-\-\-\-\-\-\->Ø    |  S  >=>Ø       >\-\-\-(D)\-update\-\-\-\-\->\-\-\->  U  |
   |    >\-\-\-\-\-  .. \-\-\-\-\-\-\->Ø    |  E  | (C) drop                        |  L  |
   >\-\-\-\-\-\-\-\-\-\-  .. \-\-\-\-\-\-\->Ø    |     |=================(E)=keep========>  T  |
                         (A)    |     |                                 |     |
           FALLBACKS    drop    +\-\-\-\-\-+            OVERWRITES           +\-\-\-\-\-+
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The key actions are marked with (\fBA\fP) to (\fBE\fP) letters. In reality the algorithm
works in slightly different order, but the exact scheme would be less illustrative.
.INDENT 7.0
.TP
.B (A),(B)
Iterate \fBfallback\fP styles one by one; discard all the attributes of a
current \fBfallback\fP style, that are already set in \fBbase\fP style
(i.e., that are not \fINones\fP). Update all \fBbase\fP style empty attributes
with corresponding \fBfallback\fP values, if they exist and are not empty.
Repeat these steps for the next \fBfallback\fP in the list, until the list
is empty.
.sp
Fallback merge algorithm example №1
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> base = Style(fg=\(aqred\(aq)
\&...
>>> fallbacks = [Style(fg=\(aqblue\(aq), Style(bold=True), Style(bold=False)]
\&...
>>> merge_styles(base, fallbacks=fallbacks)
<Style[red +BOLD]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the example above:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
the first fallback will be ignored, as \fI\%fg\fP is already set;
.IP \(bu 2
the second fallback will be applied (\fBbase\fP style will now have \fI\%bold\fP
set to \fITrue\fP;
.IP \(bu 2
which will make the handler ignore third fallback completely; if third
fallback was encountered earlier than the 2nd one, \fBbase\fP \fI\%bold\fP attribute
would have been set to \fIFalse\fP, but alas.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Fallbacks allow to build complex style conditions, e.g. take a look into
\fI\%Highlighter.colorize()\fP method:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
int_st = merge_styles(st, fallbacks=[Style(bold=True)])
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Instead of using \fBStyle(st, bold=True)\fP the merging algorithm is invoked.
This changes the logic of \(dqbold\(dq attribute application \-\- if there is a
necessity to explicitly forbid bold text at base/parent level, one could write:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
STYLE_NUL = Style(STYLE_DEFAULT, cv.GRAY, bold=False)
STYLE_PRC = Style(STYLE_DEFAULT, cv.MAGENTA)
STYLE_KIL = Style(STYLE_DEFAULT, cv.BLUE)
\&...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
As you can see, resulting \fBint_st\fP will be bold for all styles other
than \fBSTYLE_NUL\fP\&.
.sp
Fallback merge algorithm example №2
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
>>> merge_styles(Style(fg=cv.BLUE), fallbacks=[Style(bold=True)])
<Style[blue +BOLD]>
>>> merge_styles(Style(fg=cv.GRAY, bold=False), fallbacks=[Style(bold=True)])
<Style[gray \-BOLD]>
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.TP
.B (C),(D),(E)
Iterate \fBoverwrite\fP styles one by one; discard all the attributes of a \fBbase\fP
style that have a non\-empty counterpart in \fBoverwrite\fP style, and put
corresponding \fBoverwrite\fP attribute values instead of them. Keep \fBbase\fP
attribute values that have no counterpart in current \fBoverwrite\fP style (i.e.,
if attribute value is \fINone\fP). Then pick next \fBoverwrite\fP style from the input
list and repeat all these steps.
.sp
Overwrite merge algorithm example
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> base = Style(fg=\(aqred\(aq)
\&...
>>> overwrites = [Style(fg=\(aqblue\(aq), Style(bold=True), Style(bold=False)]
\&...
>>> merge_styles(base, overwrites=overwrites)
<Style[blue \-BOLD]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the example above all the \fBoverwrites\fP will be applied in order they were
put into \fIlist\fP, and the result attribute values are equal to the last
encountered non\-empty values in \fBoverwrites\fP list.
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbase\fP (\fI\%Style\fP) \-\- Basis style instance.
.IP \(bu 2
\fBfallbacks\fP (\fIIterable\fP\fI[\fP\fI\%Style\fP\fI]\fP) \-\- List of styles to be used as a backup attribute storage, when
there is no value set for the attribute in question. Uses
\fI\%merge_fallback()\fP merging strategy.
.IP \(bu 2
\fBoverwrites\fP (\fIIterable\fP\fI[\fP\fI\%Style\fP\fI]\fP) \-\- List of styles to be used as attribute storage force override
regardless of actual \fI\%base\fP attribute valuse.
.UNINDENT
.TP
.B Returns
Clone of \fBbase\fP style with all specified styles merged into.
.TP
.B Return type
\fI\%Style\fP
.UNINDENT
.UNINDENT
.SS pytermor.template
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fBTemplateEngine\fP([custom_styles])
T}	T{
T}
_
.TE
.SS pytermor.term
.sp
A
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fI\%confirm\fP([attempts, default, keymap, prompt, ...])
T}	T{
Ensure the next action is manually confirmed by user.
T}
_
T{
\fI\%get_char_width\fP(char, block)
T}	T{
General\-purpose method for getting width of a character in terminal columns.
T}
_
T{
\fI\%get_preferable_wrap_width\fP([force_width])
T}	T{
Return preferable terminal width for comfort reading of wrapped text (max=120).
T}
_
T{
\fI\%get_terminal_width\fP([fallback, pad])
T}	T{
Return current terminal width with an optional \(dqsafety buffer\(dq, which ensures that no unwanted line wrapping will happen.
T}
_
T{
\fI\%guess_char_width\fP(c)
T}	T{
Determine how many columns are needed to display a character in a terminal.
T}
_
T{
\fI\%measure_char_width\fP(char[, clear_after])
T}	T{
Low\-level function that returns the exact character width in terminal columns.
T}
_
T{
\fI\%wait_key\fP([block])
T}	T{
Wait for a key press on the console and return it.
T}
_
.TE
.INDENT 0.0
.TP
.B pytermor.term.get_terminal_width(fallback=80, pad=2)
Return current terminal width with an optional \(dqsafety buffer\(dq, which
ensures that no unwanted line wrapping will happen.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfallback\fP (\fIint\fP) \-\- Default value when shutil is unavailable and environment
variable COLUMNS is unset.
.IP \(bu 2
\fBpad\fP (\fIint\fP) \-\- Additional safety space to prevent unwanted line wrapping.
.UNINDENT
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.term.get_preferable_wrap_width(force_width=None)
Return preferable terminal width for comfort reading of wrapped text (max=120).
.INDENT 7.0
.TP
.B Parameters
\fBforce_width\fP (\fIOptional\fP\fI[\fP\fIint\fP\fI]\fP) \-\- Ignore current terminal width and use this value as a result.
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.term.wait_key(block=True)
Wait for a key press on the console and return it.
.INDENT 7.0
.TP
.B Parameters
\fBblock\fP (\fIbool\fP) \-\- Determines setup of O_NONBLOCK flag.
.TP
.B Return type
\fIOptional\fP[AnyStr]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.term.confirm(attempts=1, default=False, keymap=None, prompt=None, quiet=False, required=False)
Ensure the next action is manually confirmed by user. Print the terminal
prompt with \fBprompt\fP text and wait for a keypress. Return \fITrue\fP
if user pressed \fBY\fP and \fIFalse\fP in all the other cases (by default).
.sp
Valid keys are \fBY\fP and \fBN\fP (case insensitive), while all the other keys
and combinations are considered invalid, and will trigger the return of the
\fBdefault\fP value, which is \fIFalse\fP if not set otherwise. In other words,
by default the user is expected to press either \fBY\fP or \fBN\fP, and if
that\(aqs not the case, the confirmation request will be automatically failed.
.sp
\fBCtrl+C\fP instantly aborts the confirmation process regardless of attempts
count and raises \fBUserAbort\fP\&.
.sp
Example keymap (default one):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
keymap = {\(dqy\(dq: True, \(dqn\(dq: False}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBattempts\fP (\fIint\fP) \-\- Set how many times the user is allowed to perform the
input before auto\-cancellation (or auto\-confirmation) will
occur. 1 means there will be only one attempt, the first one.
When set to \-1, allows to repeat the input infinitely.
.IP \(bu 2
\fBdefault\fP (\fIbool\fP) \-\- Default value that will be returned when user presses invalid
key (e.g. \fBBackspace\fP, \fBCtrl+Q\fP etc.) and his
\fBattempts\fP counter decreases to 0. Setting this to \fITrue\fP
effectively means that the user\(aqs only way to deny the request
is to press \fBN\fP or \fBCtrl+C\fP, while all the other
keys are treated as \fBY\fP\&.
.IP \(bu 2
\fBkeymap\fP (\fIOptional\fP\fI[\fP\fIMapping\fP\fI[\fP\fIstr\fP\fI, \fP\fIbool\fP\fI]\fP\fI]\fP) \-\- Key to result mapping.
.IP \(bu 2
\fBprompt\fP (\fIOptional\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- String to display before each input attempt. Default is:
\fB\(dqPress Y to continue, N to cancel, Ctrl+C to abort: \(dq\fP
.IP \(bu 2
\fBquiet\fP (\fIbool\fP) \-\- If set to \fITrue\fP, suppress all messages to stdout and work
silently.
.IP \(bu 2
\fBrequired\fP (\fIbool\fP) \-\- If set to \fITrue\fP, raise \fBUserCancel\fP or \fBUserAbort\fP when
user rejects to confirm current action. If set to \fIFalse\fP,
do not raise any exceptions, just return \fIFalse\fP\&.
.UNINDENT
.TP
.B Raises
.INDENT 7.0
.IP \(bu 2
\fBUserAbort\fP \-\- On corresponding event, if \fBrequired\fP is \fITrue\fP\&.
.IP \(bu 2
\fBUserCancel\fP \-\- On corresponding event, if \fBrequired\fP is \fITrue\fP\&.
.UNINDENT
.TP
.B Returns
\fITrue\fP if there was a confirmation by user\(aqs input or
automatically, \fIFalse\fP otherwise.
.TP
.B Return type
bool
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.term.get_char_width(char, block)
General\-purpose method for getting width of a character in terminal columns.
.sp
Uses \fI\%guess_char_width()\fP method based on \fBunicodedata\fP package,
or/and QCP\-RCP ANSI control sequence communication protocol.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBchar\fP (\fIstr\fP) \-\- Input char.
.IP \(bu 2
\fBblock\fP (\fIbool\fP) \-\- Set to \fITrue\fP if you prefer slow, but 100% accurate
\fI\%measuring\fP (which \fBblocks\fP and
requires an output tty), or \fIFalse\fP for a device\-independent,
deterministic and non\-blocking \fI\%guessing\fP,
which works most of the time, although there could be rare
cases when it is not precise enough.
.UNINDENT
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.term.measure_char_width(char, clear_after=True)
Low\-level function that returns the exact character width in terminal columns.
.sp
The main idea is to reset a cursor position to 1st column, print the required
character and \fI\%QCP\fP control sequence; after that
wait for the response and \fBparse\fP it.
Normally it contains the cursor coordinates, which can tell the exact width of a
character in question.
.sp
After reading the response clear it from the screen and reset the cursor to
column 1 again.
.sp
\fBIMPORTANT:\fP
.INDENT 7.0
.INDENT 3.5
The \fBstdout\fP must be a tty. If it is not, consider using
\fI\%guess_char_width()\fP instead, or \fBIOError\fP will be raised.
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
Invoking this method produces a bit of garbage in the output stream,
which looks like this: \fB⠁[3;2R\fP\&. By default, it is hidden using
screen line clearing (see \fBclear_after\fP).
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
Invoking this method may \fBblock\fP infinitely. Consider using a thread
or set a timeout for the main thread using a signal if that is unwanted.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBchar\fP (\fIstr\fP) \-\- Input char.
.IP \(bu 2
\fBclear_after\fP (\fIbool\fP) \-\- Send \fI\%EL\fP control sequence after the
terminal response to hide excessive utility information from
the output if set to \fITrue\fP, or leave it be otherwise.
.UNINDENT
.TP
.B Raises
\fBIOError\fP \-\- If \fBstdout\fP is not a terminal emulator.
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.term.guess_char_width(c)
Determine how many columns are needed to display a character in a terminal.
.sp
Returns \-1 if the character is not printable.
Returns 0, 1 or 2 for other characters.
.sp
Utilizes \fBunicodedata\fP table. A terminal emulator is unnecessary.
.INDENT 7.0
.TP
.B Parameters
\fBc\fP (\fIstr\fP) \-\- 
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.SS pytermor.text
.sp
\(dqFront\-end\(dq module of the library. Contains classes supporting high\-level
operations such as nesting\-aware style application, concatenating and cropping
of styled strings before the rendering, text alignment and wrapping, etc.
.sp
Module Attributes
.TS
center;
|l|l|.
_
T{
\fI\%RT\fP
T}	T{
RT includes regular \fIstr\fPs as well as \fI\%IRenderable\fP  implementations.
T}
_
.TE
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fBas_fragments\fP(string)
T}	T{
T}
_
T{
\fI\%distribute_padded\fP()
T}	T{
.INDENT 0.0
.TP
.B param max_len
.UNINDENT
T}
_
T{
\fI\%echo\fP([string, fmt, renderer, nl, file, ...])
T}	T{
\&.
T}
_
T{
\fI\%echoi\fP([string, fmt, renderer, file, flush])
T}	T{
echo inline
T}
_
T{
\fI\%flatten\fP(items)
T}	T{
T}
_
T{
\fI\%flatten1\fP(items)
T}	T{
Take a list of nested lists and unpack all nested elements one level up.
T}
_
T{
\fI\%render\fP([string, fmt, renderer, no_log])
T}	T{
\&.
T}
_
T{
\fBsplit_by_spaces\fP(*parts, st)
T}	T{
T}
_
T{
\fI\%wrap_sgr\fP(raw_input, width[, indent_first, ...])
T}	T{
A workaround to make standard library \fBtextwrap.wrap()\fP more friendly to an SGR\-formatted strings.
T}
_
.TE
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%Composite\fP(*parts)
T}	T{
Simple class\-container supporting concatenation of any \fI\%IRenderable\fP instances with each other without extra logic on top of it.
T}
_
T{
\fI\%Fragment\fP([string, fmt, close_this, close_prev])
T}	T{
<Immutable>
T}
_
T{
\fI\%FrozenText\fP()
T}	T{
.INDENT 0.0
.TP
.B param align
default is left
.UNINDENT
T}
_
T{
\fI\%IRenderable\fP()
T}	T{
I
T}
_
T{
\fI\%SimpleTable\fP(*rows[, width, sep, border_st])
T}	T{
Table class with dynamic (not bound to each other) rows.
T}
_
T{
\fI\%Text\fP()
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B pytermor.text.RT
RT includes regular \fIstr\fPs as well as \fI\%IRenderable\fP 
implementations.
.sp
alias of TypeVar(\(aqRT\(aq, str, IRenderable)
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.text.IRenderable
Bases: \fBSized\fP, \fBABC\fP
.sp
I
.INDENT 7.0
.TP
.B abstract  raw()
pass
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B abstract  render(renderer=None)
pass
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B abstract  set_width(width)
raise NotImplementedError
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B abstract  property  has_width:  bool
return self._width is not None
.UNINDENT
.INDENT 7.0
.TP
.B abstract  property  allows_width_setup:  bool
return False
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.text.Fragment(string=\(aq\(aq, fmt=None, *, close_this=True, close_prev=False)
Bases: \fI\%IRenderable\fP
.sp
<Immutable>
.sp
Can be formatted with f\-strings. The text \fB:s\fP mode is required.
Supported features:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
width [of the result];
.IP \(bu 2
max length [of the content];
.IP \(bu 2
alignment;
.IP \(bu 2
filling.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
.nf
.ft C
>>> f\(dq{Fragment(\(aq1234567890\(aq):*^8.4s}\(dq
\(aq**1234**\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBfmt\fP (\fIFT\fP) \-\- 
.IP \(bu 2
\fBclose_this\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBclose_prev\fP (\fIbool\fP) \-\- 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B raw()
pass
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  has_width:  bool
return self._width is not None
.UNINDENT
.INDENT 7.0
.TP
.B property  allows_width_setup:  bool
return False
.UNINDENT
.INDENT 7.0
.TP
.B render(renderer=None)
pass
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B set_width(width)
raise NotImplementedError
.INDENT 7.0
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.text.FrozenText(string:  str, fmt:  FT  =  NOOP_STYLE, *, width:  int  =  None, align:  str  |  \fI\%pytermor.filter.Align\fP  =  None, fill:  str  =  \(aq \(aq, overflow:  str  =  \(aq\(aq, pad:  int  =  0, pad_styled:  bool  =  True)
.TP
.B class  pytermor.text.FrozenText(*fragments:  \fI\%Fragment\fP, width:  int  =  None, align:  str  |  \fI\%pytermor.filter.Align\fP  =  None, fill:  str  =  \(aq \(aq, overflow:  str  =  \(aq\(aq, pad:  int  =  0, pad_styled:  bool  =  True)
Bases: \fI\%IRenderable\fP
.INDENT 7.0
.TP
.B Parameters
\fBalign\fP (\fIstr\fP\fI | \fP\fI\%Align\fP) \-\- default is left
.UNINDENT
.INDENT 7.0
.TP
.B raw()
pass
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(renderer=None)
pass
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  allows_width_setup:  bool
return False
.UNINDENT
.INDENT 7.0
.TP
.B property  has_width:  bool
return self._width is not None
.UNINDENT
.INDENT 7.0
.TP
.B set_width(width)
raise NotImplementedError
.INDENT 7.0
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.text.Text(string:  str, fmt:  FT  =  NOOP_STYLE, *, width:  int  =  None, align:  str  |  \fI\%pytermor.filter.Align\fP  =  None, fill:  str  =  \(aq \(aq, overflow:  str  =  \(aq\(aq, pad:  int  =  0, pad_styled:  bool  =  True)
.TP
.B class  pytermor.text.Text(*fragments:  \fI\%Fragment\fP, width:  int  =  None, align:  str  |  \fI\%pytermor.filter.Align\fP  =  None, fill:  str  =  \(aq \(aq, overflow:  str  =  \(aq\(aq, pad:  int  =  0, pad_styled:  bool  =  True)
Bases: \fI\%FrozenText\fP
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B set_width(width)
raise NotImplementedError
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  allows_width_setup:  bool
return False
.UNINDENT
.INDENT 7.0
.TP
.B property  has_width:  bool
return self._width is not None
.UNINDENT
.INDENT 7.0
.TP
.B raw()
pass
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(renderer=None)
pass
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.text.Composite(*parts)
Bases: \fI\%IRenderable\fP
.sp
Simple class\-container supporting concatenation of
any \fI\%IRenderable\fP instances with each other without
extra logic on top of it. Renders parts joined by an
empty string.
.INDENT 7.0
.TP
.B Parameters
\fBparts\fP (\fI\%IRenderable\fP) \-\- text parts in any format implementing
\fI\%IRenderable\fP interface.
.UNINDENT
.INDENT 7.0
.TP
.B raw()
pass
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(renderer=None)
pass
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B set_width(width)
raise NotImplementedError
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  has_width:  bool
return self._width is not None
.UNINDENT
.INDENT 7.0
.TP
.B property  allows_width_setup:  bool
return False
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.text.SimpleTable(*rows, width=None, sep=\(aq  \(aq, border_st=<*_NoOpStyle[]>)
Bases: \fI\%IRenderable\fP
.sp
Table class with dynamic (not bound to each other) rows. By defualt expands to
the maximum width (terminal size).
.sp
Allows 0 or 1 dynamic\-width cell in each row, while all the others should be
static, i.e., be instances of \fI\%FrozenText\fP\&.
.sp
.nf
.ft C
>>> echo(
\&...     SimpleTable(
\&...     [
\&...         Text(\(dq1\(dq, width=1),
\&...         Text(\(dqword\(dq, width=6, align=\(aqcenter\(aq),
\&...         Text(\(dqsmol string\(dq),
\&...     ],
\&...     [
\&...         Text(\(dq2\(dq, width=1),
\&...         Text(\(dqpadded word\(dq, width=6, align=\(aqcenter\(aq, pad=2),
\&...         Text(\(dqbiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiig string\(dq),
\&...     ],
\&...     width=30,
\&...     sep=\(dq|\(dq
\&... ), file=sys.stdout)
|1| word |smol string        |
|2| padd |biiiiiiiiiiiiiiiiii|
.ft P
.fi
.sp
Create
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
All arguments except \fB*rows\fP are \fIkwonly\fP\-type args.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrows\fP (\fIt.Iterable\fP\fI[\fP\fIRT\fP\fI]\fP) \-\- 
.IP \(bu 2
\fBwidth\fP (\fIint\fP) \-\- Table width, in characters. When omitted, equals to terminal size
if applicable, and to fallback value (80) otherwise.
.IP \(bu 2
\fBsep\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBborder_st\fP (\fI\%Style\fP) \-\- 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B raw()
pass
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  allows_width_setup:  bool
return False
.UNINDENT
.INDENT 7.0
.TP
.B property  has_width:  bool
return self._width is not None
.UNINDENT
.INDENT 7.0
.TP
.B render(renderer=None)
pass
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B set_width(width)
raise NotImplementedError
.INDENT 7.0
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.text.render(string=\(aq\(aq, fmt=<*_NoOpStyle[]>, renderer=None, *, no_log=False)
\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIUnion\fP\fI[\fP\fIRT\fP\fI, \fP\fIIterable\fP\fI[\fP\fIRT\fP\fI]\fP\fI]\fP) \-\- 2
.IP \(bu 2
\fBfmt\fP (\fIFT\fP) \-\- 2
.IP \(bu 2
\fBrenderer\fP (\fI\%IRenderer\fP) \-\- 2
.IP \(bu 2
\fBno_log\fP (\fIbool\fP) \-\- 2
.UNINDENT
.TP
.B Returns

.TP
.B Return type
\fIUnion\fP[str, \fIList\fP[str]]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.text.echo(string=\(aq\(aq, fmt=<*_NoOpStyle[]>, renderer=None, *, nl=True, file=<_io.TextIOWrapper name=\(aq<stdout>\(aq mode=\(aqw\(aq encoding=\(aqutf\-8\(aq>, flush=True, wrap=False, indent_first=0, indent_subseq=0)
\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIUnion\fP\fI[\fP\fIRT\fP\fI, \fP\fIIterable\fP\fI[\fP\fIRT\fP\fI]\fP\fI]\fP) \-\- 
.IP \(bu 2
\fBfmt\fP (\fIFT\fP) \-\- 
.IP \(bu 2
\fBrenderer\fP (\fIOptional\fP\fI[\fP\fI\%IRenderer\fP\fI]\fP) \-\- 
.IP \(bu 2
\fBnl\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBfile\fP (\fIIO\fP) \-\- 
.IP \(bu 2
\fBflush\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBwrap\fP (\fIbool\fP\fI | \fP\fIint\fP) \-\- 
.IP \(bu 2
\fBindent_first\fP (\fIint\fP) \-\- 
.IP \(bu 2
\fBindent_subseq\fP (\fIint\fP) \-\- 
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.text.echoi(string=\(aq\(aq, fmt=<*_NoOpStyle[]>, renderer=None, *, file=<_io.TextIOWrapper name=\(aq<stdout>\(aq mode=\(aqw\(aq encoding=\(aqutf\-8\(aq>, flush=True)
echo inline
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIUnion\fP\fI[\fP\fIRT\fP\fI, \fP\fIIterable\fP\fI[\fP\fIRT\fP\fI]\fP\fI]\fP) \-\- 
.IP \(bu 2
\fBfmt\fP (\fIFT\fP) \-\- 
.IP \(bu 2
\fBrenderer\fP (\fIOptional\fP\fI[\fP\fI\%IRenderer\fP\fI]\fP) \-\- 
.IP \(bu 2
\fBfile\fP (\fIIO\fP) \-\- 
.IP \(bu 2
\fBflush\fP (\fIbool\fP) \-\- 
.UNINDENT
.TP
.B Returns

.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.text.distribute_padded(max_len:  int, *values:  str, pad_left:  int  =  0, pad_right:  int  =  0) -> str
.TP
.B pytermor.text.distribute_padded(max_len:  int, *values:  RT, pad_left:  int  =  0, pad_right:  int  =  0) -> \fI\%Text\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmax_len\fP \-\- 
.IP \(bu 2
\fBvalues\fP \-\- 
.IP \(bu 2
\fBpad_left\fP \-\- 
.IP \(bu 2
\fBpad_right\fP \-\- 
.UNINDENT
.TP
.B Returns

.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.text.wrap_sgr(raw_input, width, indent_first=0, indent_subseq=0)
A workaround to make standard library \fBtextwrap.wrap()\fP more friendly
to an SGR\-formatted strings.
.sp
The main idea is
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBraw_input\fP (\fIstr\fP\fI | \fP\fIlist\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- 
.IP \(bu 2
\fBwidth\fP (\fIint\fP) \-\- 
.IP \(bu 2
\fBindent_first\fP (\fIint\fP) \-\- 
.IP \(bu 2
\fBindent_subseq\fP (\fIint\fP) \-\- 
.UNINDENT
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.text.flatten1(items)
Take a list of nested lists and unpack all nested elements one level up.
.sp
.nf
.ft C
>>> flatten1([[1, 2, 3], [4, 5, 6], [[10, 11, 12]]])
[1, 2, 3, 4, 5, 6, [10, 11, 12]]
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
\fBitems\fP (\fIIterable\fP\fI[\fP\fIIterable\fP\fI[\fP\fIT\fP\fI]\fP\fI]\fP) \-\- Input lists.
.TP
.B Return type
\fIList\fP[\fIT\fP]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.text.flatten(items)
.INDENT 7.0
.INDENT 3.5
.SS Todo
.sp
recursrive
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Return type
\fIList\fP[\fIT\fP]
.UNINDENT
.UNINDENT
.SH CHANGELOG
.SS Releases
.sp
This project uses Semantic Versioning \-\- \fI\%https://semver.org\fP \fI(starting from v2.0)\fP
.SS pending
.INDENT 0.0
.IP \(bu 2
[UPDATE] Update coverage.yml
.IP \(bu 2
 pdf documentation
.IP \(bu 2
 cleanup
.IP \(bu 2
 (c) update
.IP \(bu 2
[FIX] \fBflake8\fP
.IP \(bu 2
[NEW]  \fI\%IRenderable.raw()\fP method
.IP \(bu 2
[NEW] \fI\%cval\fP atlassian colors
.IP \(bu 2
[REFACTOR] made \fBmeasure\fP and \fBtrace\fP private
.IP \(bu 2
[NEW] \fButilmisc\fP color transform methods overloaded
.IP \(bu 2
[DOCS] a lot
.IP \(bu 2
[FIX] \fBpydeps\fP invocation
.IP \(bu 2
[FIX]  \fI\%ESCAPE_SEQ_REGEX\fP
.IP \(bu 2
[NEW] \fI\%contains_sgr\fP method
.IP \(bu 2
[NEW]  \fBText.split_by_spaces()\fP, \fI\%Composite\fP
.IP \(bu 2
[NEW] +3 base sequence classes, +26 preset sequences
.IP \(bu 2
[TESTS] \fI\%Style\fP/\fBIColor\fP reprs
.IP \(bu 2
[FIX] \fBmake_clear_display_and_history()\fP \-> \fI\%make_clear_history()\fP
.IP \(bu 2
 CI coverage now running on python 3.10 (was 3.8)
.IP \(bu 2
[DOCS] fixed pydoc escaped spaces to stop python\(aqs warnings whining that breaks the CI
.IP \(bu 2
 upload to coveralls debug mode !@#$
.IP \(bu 2
 replaced GITHUB_TOKEN secret to COVERALLS_REPO_TOKEN
.IP \(bu 2
 disabled verbose mode on CI
.IP \(bu 2
[NEW] \(dqfrozen\(dq \fI\%Style\fP attribute
.IP \(bu 2
[NEW] \fB__str__\fP methods override for named tuples \fI\%RGB\fP, \fI\%HSV\fP
.IP \(bu 2
[REFACTOR] color resolver
.IP \(bu 2
 add \fBupdated\fP field in _version.py
.IP \(bu 2
  add \fB__updated__\fP field to init file
.IP \(bu 2
[NEW] implement missing 1st\-level sequence classes
.IP \(bu 2
[NEW] add \fI\%ColorTarget\fP enum as there are three extended color modes instead of two
.IP \(bu 2
[NEW] add \fBSubtypedParam\fP support that allows specifying SGRs with subparams like \(aqESC[4:3m\(aq
.IP \(bu 2
[NEW] \fI\%LAB\fP, \fI\%XYZ\fP named tuples + conversions
.IP \(bu 2
[FIX] \fI\%filter.AbstractTracer\fP faulty offset rendering
.IP \(bu 2
[REFACTOR] sequence internal composition
.IP \(bu 2
[NEW] IntCodes: \fBFRAMED\fP (+\(ga\(ga_OFF\(ga\(ga), \fBUNDERLINE_COLOR_EXTENDED\fP (+\(ga\(ga_OFF\(ga\(ga)
.IP \(bu 2
[NEW] SeqIndex: \fBCURLY_UNDERLINED\fP, \fBFRAMED\fP, \fBFRAMED_OFF\fP
.IP \(bu 2
[NEW] \fI\%Style\fP, 
.nf
\(ga\(ga
.fi
SgrRenderer\(ga and \fI\%TmuxRenderer\fP support of all the above
.IP "System Message: WARNING/2 (docs/include/CHANGES.rst:, line 41)"
Inline literal start\-string without end\-string.
.IP \(bu 2

.nf
|DRAFT|
.fi
 \fI\%parser\fP module
.IP \(bu 2
[REWORK] \fButil*\fP \-> \fI\%numfmt\fP, \fI\%filter\fP, \fI\%conv\fP
.UNINDENT
.SS v2.48\-dev
.sp
Apr 23
.INDENT 0.0
.IP \(bu 2
[DOCS] small fixes
.IP \(bu 2
[DOCS] updated changelog
.IP \(bu 2
[FIX]  \fI\%measure_char_width\fP and \fI\%get_char_width\fP internal logic
.IP \(bu 2
[FIX]  pipelines
.IP \(bu 2
[FIX] \fI\%AbstractTracer\fP failure on empty input
.IP \(bu 2
[FIX] \fI\%StaticFormatter\fP padding
.IP \(bu 2
[FIX] bug in \fI\%SimpleTable\fP renderer when row is wider than a terminal
.IP \(bu 2
[FIX] debug logging
.IP \(bu 2
  coverage git ignore
.IP \(bu 2
 \fBcli\-docker\fP make command
.IP \(bu 2
 \fBDockerfile\fP for repeatable builds
.IP \(bu 2
 \fBhatch\fP as build backend
.IP \(bu 2
 copyrights update
.IP \(bu 2
 host system/docker interchangable building automations
.IP \(bu 2
[NEW]  \fI\%format_time\fP, \fI\%format_time_ms\fP, \fI\%format_time_ns\fP
.IP \(bu 2
[NEW] \fBHightlighter\fP from static methods to real class
.IP \(bu 2
[NEW] \fBlab_to_rgb()\fP
.IP \(bu 2
[NEW] numeric formatters fallback mechanics
.IP \(bu 2
[REFACTOR] \fBTDF_REGISTRY\fP \-> \fBdual_registry\- \(ga\(gaFORMATTER_\(ga\fP constants from top\-level imports
.IP \(bu 2
[REFACTOR] \fButilnum._TDF_REGISTRY\fP \-> \fBTDF_REGISTRY\fP
.IP \(bu 2
[REFACTOR] edited highlighter styles
.IP \(bu 2
[REFACTOR] naming:
.INDENT 2.0
.IP \(bu 2
\fBCustomBaseUnit\fP \-> \fI\%DualBaseUnit\fP
.IP \(bu 2
\fBDynamicBaseFormatter\fP \-> \fI\%DynamicFormatter\fP
.IP \(bu 2
\fBStaticBaseFormatter\fP \-> \fI\%StaticFormatter\fP
.UNINDENT
.IP \(bu 2
[TESTS] numeric formatters colorizing
.IP \(bu 2
[UPDATE]  README
.IP \(bu 2
[UPDATE] license is now Lesser GPL v3
.UNINDENT
.SS v2.40\-dev
.sp
Feb 23
.INDENT 0.0
.IP \(bu 2
[DOCS]  \fBchangelog\fP update
.IP \(bu 2
[DOCS] \fButilnum\fP module
.IP \(bu 2
[DOCS] rethinking of references style
.IP \(bu 2
[FIX]  \fBparse\fP method of TemplateEngine
.IP \(bu 2
[FIX] \fI\%Highlighter\fP
.IP \(bu 2
[FIX] critical \fI\%Styles\fP color
.IP \(bu 2
 2023 copytight update
.IP \(bu 2
[NEW]  \fBcoveralls.io\fP integration
.IP \(bu 2
[NEW]  \fI\%echoi\fP, \fI\%flatten\fP, \fI\%flatten1\fP methods;  \fI\%SimpleTable\fP class
.IP \(bu 2
[NEW]  \fI\%StringLinearizer\fP, \fI\%WhitespaceRemover\fP
.IP \(bu 2
[NEW]  \fI\%text\fP Fragments validation
.IP \(bu 2
[NEW] \fI\%Config\fP class
.IP \(bu 2
[NEW] \fBhex\fP rst text role
.IP \(bu 2
[NEW] \fButilnum.format_bytes_human()\fP
.IP \(bu 2
[NEW] add \fBes7s C45/Kalm\fP to rgb colors list
.IP \(bu 2
[NEW] methods \fBpercentile\fP and \fBmedian\fP ; \fBrender_benchmark\fP example
.IP \(bu 2
[REFACTOR]  \fI\%IRenderable\fP rewrite
.IP \(bu 2
[REFACTOR] \fI\%distribute_padded\fP overloads
.IP \(bu 2
[REFACTOR] attempt to break cyclic dependency of \fButil.*\fP modules
.IP \(bu 2
[REFACTOR] moved color transformations and type vars from \fB_commons\fP
.IP \(bu 2
[TESTS] additional coverage for \fButilnum\fP
.UNINDENT
.SS v2.32\-dev
.sp
Jan 23
.INDENT 0.0
.IP \(bu 2
[DOCS]  \fButilnum\fP update
.IP \(bu 2
[DOCS]  docstrings, typing
.IP \(bu 2
[DOCS] \fButilnum\fP module
.IP \(bu 2
[FIX]  \fBformat_prefixed\fP and \fI\%format_auto_float\fP inaccuracies
.IP \(bu 2
[FIX] \fBText.prepend\fP typing
.IP \(bu 2
[FIX] \fI\%TmuxRenderer\fP RGB output
.IP \(bu 2
[NEW]  \fI\%Color256\fP aliases \(dqcolorNN\(dq
.IP \(bu 2
[NEW]  \fI\%Highlighter\fP from \fBes7s\fP, colorizing options of \fButilnum\fP helpers
.IP \(bu 2
[NEW]  \fI\%IRenderable\fP result caching
.IP \(bu 2
[NEW]  \fI\%pad\fP, \fI\%padv\fP helpers
.IP \(bu 2
[NEW]  \fBprefix_refpoint_shift\fP argument of PrefixedUnitFormatter
.IP \(bu 2
[NEW]  \fBPrefixedUnitFormatter\fP inheritance
.IP \(bu 2
[NEW]  \fBString\fP and \fBFixedString\fP base renderables
.IP \(bu 2
[NEW]  \fI\%style.merge_styles()\fP
.IP \(bu 2
[NEW] \fBRenderable\fP __eq__ methods
.IP \(bu 2
[NEW] \fBStyledString\fP
.IP \(bu 2
[NEW] \fButilmisc\fP get_char_width(),  guess_char_width(), measure_char_width()
.IP \(bu 2
[NEW] style merging strategies: \fI\%merge_fallback()\fP, \fI\%merge_overwrite\fP
.IP \(bu 2
[NEW] subsecond delta support for \fBTimeDeltaFormatter\fP
.IP \(bu 2
[TESTS]  \fButilnum\fP update
.IP \(bu 2
[TESTS] integrated in\-code doctests into pytest
.UNINDENT
.SS v2.23\-dev
.INDENT 0.0
.IP \(bu 2
[FIX] \fBOmniHexPrinter\fP missed out newlines
.IP \(bu 2
[NEW] \fI\%dump\fP printer caching
.IP \(bu 2
[NEW] \fBPrinters\fP and \fBMappers\fP
.IP \(bu 2
[NEW] \fI\%SgrRenderer\fP now supports non\-default IO stream specifying
.IP \(bu 2
[NEW] \fButilstr.StringHexPrinter\fP and \fButilstr.StringUcpPrinter\fP
.IP \(bu 2
[NEW] add missing \fI\%hsv_to_rgb\fP function
.IP \(bu 2
[NEW] extracted \fI\%resolve\fP, \fI\%approximate\fP, \fI\%find_closest\fP from \fI\%Color\fP class to module level, as well as color transform functions
.IP \(bu 2
[NEW] split \fI\%Text\fP to \fI\%Text\fP and \fI\%FrozenText\fP
.UNINDENT
.SS v2.18\-dev
.INDENT 0.0
.IP \(bu 2
[FIX] Disabled automatic rendering of \fI\%echo()\fP and \fI\%render()\fP\&.
.IP \(bu 2
[NEW] \fBArgCountError\fP migrated from \fBes7s/core\fP\&.
.IP \(bu 2
[NEW] \fBblack\fP code style.
.IP \(bu 2
[NEW] \fI\%cval\fP autobuild.
.IP \(bu 2
[NEW] Add \fBOmniHexPrinter\fP and \fI\%chunk()\fP helper.
.IP \(bu 2
[NEW] Typehinting.
.UNINDENT
.SS v2.14\-dev
.sp
Dec 22
.INDENT 0.0
.IP \(bu 2
[DOCS] Docs design fixes.
.IP \(bu 2
[NEW] \fI\%confirm()\fP helper command.
.IP \(bu 2
[NEW] \fBEscapeSequenceStringReplacer\fP filter.
.IP \(bu 2
[NEW] \fBexamples/terminal_benchmark\fP script.
.IP \(bu 2
[NEW] \fBStringFilter\fP and \fBOmniFilter\fP classes.
.IP \(bu 2
[NEW] Minor core improvements.
.IP \(bu 2
[NEW] RGB and variations full support.
.IP \(bu 2
[TESTS] Tests for \fI\%color\fP module.
.UNINDENT
.SS v2.6\-dev
.sp
Nov 22
.INDENT 0.0
.IP \(bu 2
[NEW] \fBTemplateEngine\fP implementation.
.IP \(bu 2
[NEW] \fI\%Text\fP nesting.
.IP \(bu 2
[REFACTOR] Changes in \fBConfigurableRenderer.force_styles\fP logic.
.IP \(bu 2
[REFACTOR] Got rid of \fBSpan\fP class.
.IP \(bu 2
[REFACTOR] Package reorganizing.
.IP \(bu 2
[REFACTOR] Rewrite of \fI\%color\fP module.
.UNINDENT
.SS v2.2\-dev
.sp
Oct 22
.INDENT 0.0
.IP \(bu 2
[NEW] \fI\%TmuxRenderer\fP
.IP \(bu 2
[NEW] \fI\%wait_key()\fP input helper.
.IP \(bu 2
[NEW] Color config.
.IP \(bu 2
[NEW] IRenderable\(ga interface.
.IP \(bu 2
[NEW] Named colors list.
.UNINDENT
.SS v2.1\-dev
.sp
Aug 22
.INDENT 0.0
.IP \(bu 2
[NEW] Color presets.
.IP \(bu 2
[TESTS] More unit tests for formatters.
.UNINDENT
.SS v2.0\-dev
.sp
Jul 22
.INDENT 0.0
.IP \(bu 2
[REWORK] Complete library rewrite.
.IP \(bu 2
[DOCS] \fBsphinx\fP and \fBreadthedocs\fP integraton.
.IP \(bu 2
[NEW] High\-level abstractions \fI\%Color\fP, \fI\%Renderer\fP and \fI\%Style\fP\&.
.IP \(bu 2
[TESTS] \fBpytest\fP and \fBcoverage\fP integration.
.IP \(bu 2
[TESTS] Unit tests for formatters and new modules.
.UNINDENT
.SS v1.8
.sp
Jun 22
.INDENT 0.0
.IP \(bu 2
[NEW] \fBformat_prefixed_unit\fP extended for working with decimal and binary metric prefixes.
.IP \(bu 2
[NEW] \fBsequence.NOOP\fP SGR sequence and \fBspan.NOOP\fP format.
.IP \(bu 2
[NEW] \fI\%format_time_delta\fP extended with new settings.
.IP \(bu 2
[NEW] Added 3 formatters: \fBformat_prefixed_unit\fP, \fI\%format_time_delta\fP, \fI\%format_auto_float\fP\&.
.IP \(bu 2
[NEW] Max decimal points for \fBauto_float\fP extended from (2) to (max\-2).
.IP \(bu 2
[REFACTOR] Utility classes reorganization.
.IP \(bu 2
[REFACTOR] Value rounding transferred from  \fI\%format_auto_float\fP to \fBformat_prefixed_unit\fP\&.
.IP \(bu 2
[TESTS] Unit tests output formatting.
.UNINDENT
.SS v1.7
.sp
May 22
.INDENT 0.0
.IP \(bu 2
[FIX] Print reset sequence as \fB\ee[m\fP instead of \fB\ee[0m\fP\&.
.IP \(bu 2
[NEW] \fBSpan\fP constructor can be called without arguments.
.IP \(bu 2
[NEW] Added \fBspan.BG_BLACK\fP format.
.IP \(bu 2
[NEW] Added \fI\%ljust_sgr\fP, \fI\%rjust_sgr\fP, \fI\%center_sgr\fP util functions to align strings with SGRs correctly.
.IP \(bu 2
[NEW] Added SGR code lists.
.UNINDENT
.SS v1.6
.INDENT 0.0
.IP \(bu 2
[REFACTOR] Renamed \fBcode\fP module to \fBsgr\fP because of conflicts in PyCharm debugger (\fBpydevd_console_integration.py\fP).
.IP \(bu 2
[REFACTOR] Ridded of \fBEmptyFormat\fP and \fBAbstractFormat\fP classes.
.IP \(bu 2
[TESTS] Excluded \fBtests\fP dir from distribution package.
.UNINDENT
.SS v1.5
.INDENT 0.0
.IP \(bu 2
[REFACTOR] Removed excessive \fBEmptySequenceSGR\fP \-\- default \fBSGR\fP class was specifically implemented to print out as empty string instead of \fB\ee[m\fP if constructed without params.
.UNINDENT
.SS v1.4
.INDENT 0.0
.IP \(bu 2
[NEW] \fBSpan.wrap()\fP now accepts any type of argument, not only \fIstr\fP\&.
.IP \(bu 2
[NEW] Added equality methods for \fI\%SequenceSGR\fP and \fBSpan\fP classes/subclasses.
.IP \(bu 2
[REFACTOR] Rebuilt \fBSequence\fP inheritance tree.
.IP \(bu 2
[TESTS] Added some tests for \fBfmt.*\fP and \fBseq.*\fP classes.
.UNINDENT
.SS v1.3
.INDENT 0.0
.IP \(bu 2
[NEW] Added \fBspan.GRAY\fP and \fBspan.BG_GRAY\fP format presets.
.IP \(bu 2
[REFACTOR] Interface revisioning.
.UNINDENT
.SS v1.2
.INDENT 0.0
.IP \(bu 2
[NEW] \fBEmptySequenceSGR\fP and \fBEmptyFormat\fP classes.
.IP \(bu 2
[NEW] \fBopening_seq\fP and \fBclosing_seq\fP properties for \fBSpan\fP class.
.UNINDENT
.SS v1.1
.sp
Apr 22
.INDENT 0.0
.IP \(bu 2
[NEW] Autoformat feature.
.UNINDENT
.SS v1.0
.INDENT 0.0
.IP \(bu 2
 First public version.
.UNINDENT
.SS v0.90
.sp
Mar 22
.INDENT 0.0
.IP \(bu 2
 First commit.
.UNINDENT
.SH LICENSE
.SS Disclaimer of Warranty
.sp
THERE IS  NO WARRANTY  FOR THE PROGRAM, TO THE EXTENT  PERMITTED  BY APPLICABLE
LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
PARTIES  PROVIDE  THE PROGRAM  \(dqAS IS\(dq  WITHOUT  WARRANTY  OF ANY KIND,  EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE
QUALITY AND  PERFORMANCE OF THE PROGRAM  IS WITH YOU.  SHOULD THE PROGRAM PROVE
DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
.SS Limitation of Liability
.sp
IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING  WILL ANY
COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS
PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING  ANY  GENERAL, SPECIAL,
INCIDENTAL OR CONSEQUENTIAL DAMAGES  ARISING OUT OF THE USE OR INABILITY TO USE
THE  PROGRAM,  INCLUDING  BUT  NOT  LIMITED TO  LOSSES OF DATA, FAILURES OF THE
PROGRAM TO OPERATE WITH  OTHER PROGRAMS, OTHER LOSSES  AS WELL AS  ACQUISITIONS,
BREAKDOWNS, REPAIRS, UNSCREWINGS,  BLACKOUTS,  FAINTINGS, INJURIES, BURNS, SNOW
AVALANCHES,  EARTHQUAKES,  VOLCANIC,  GEYSER  AND  LIMNIC  ERUPTIONS,  TYPHOONS,
METEORITE  AND  SATELLITE  FALLS  AND  OTHER  NATURAL  DISASTERS,  AS  WELL  AS
BEHAVIORAL DEVIATIONS OF PEOPLE, SHARKS, SNAKES  AND  OTHER ANIMALS,  ROBBERIES,
ASSAULTS,  RAPES, THEFTS  AND  BURGLARIES, DRUNKEN  BRAWLS  AND  RIOTS, INCESTS,
ABORTIONS, SHOULDER  DISLOCATIONS,  MILITARY CONSCRIPTIONS,  DISFELLOWSHIPPINGS,
CONFINEMENTS AND EXTRADITIONS, DIVORCEMENTS,  DEMOTIONS AND PROMOTIONS, EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH  DAMAGES.
.SH AUTHOR
Alexandr Shavykin
.SH COPYRIGHT
2022-2023, A. Shavykin
.\" Generated by docutils manpage writer.
.
