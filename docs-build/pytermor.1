.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "TODO" "1" "Dec 30, 2022" "2.29.0-dev1" "pytermor"
.SH NAME
Todo \- pytermor 2.29.0-dev1
.sp
\fI(yet another)\fP Python library designed for formatting terminal output using ANSI escape codes. Implements automatic \fI\%\(dqsoft\(dq\fP format termination. Provides a registry of low\-level SGR \fI\%sequences\fP and formatting \fBspans\fP (or combined sequences). Also includes a set of formatters for pretty output.
.sp
Key feature of this library is providing necessary abstractions for building complex text sections with lots of formatting, while keeping the application code clear and readable.
.sp
No dependencies besides Python Standard Library are required \fI(there are some for testing and docs building, though).\fP
.INDENT 0.0
.INDENT 3.5
.sp
This is how you \fBshould\fP format examples:
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 2.5
[image]
\fI\%https://chrisyeh96.github.io/2020/03/28/terminal\-colors.html#color\-schemes\fP.UNINDENT
.UNINDENT
.SH GUIDE
.SS Getting started
.SS Installation
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
pip install pytermor
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Structure
.TS
center;
|l|l|l|l|.
_
T{
A L
T}	T{
Module
T}	T{
Class(es)
T}	T{
Purpose
T}
_
T{
Hi
T}	T{
\fI\%text\fP
T}	T{
\fI\%Text\fP
T}	T{
Container consisting of text pieces each with attached \fBStyle\fP\&.
Renders into specified format keeping all the formatting.
T}
_
T{
\fI\%Style\fP
\fI\%Styles\fP
T}	T{
Reusable abstractions defining colors and text attributes (text
color, bg color, \fIbold\fP attribute, \fIunderlined\fP attribute etc).
T}
_
T{
\fI\%SgrRenderer\fP
\fI\%HtmlRenderer\fP
\fI\%TmuxRenderer\fP etc.
T}	T{
\fBSgrRenderer\fP transforms \fBStyle\fP instances into \fBColor\fP, \fBSpan\fP
and \fBSequenceSGR\fP instances and assembles it all up. There are
several other implementations depending on what output
format is required.
T}
_
T{
\fI\%color\fP
T}	T{
\fI\%Color16\fP
\fI\%Color256\fP
\fI\%ColorRGB\fP
T}	T{
Abstractions for color operations in different color modes
(default 16\-color, 256\-color, RGB). Tools for color approximation
and transformations.
T}
_
T{
\fI\%pytermor\fP
T}	T{
Color registry.
T}
_
T{
Lo
T}	T{
\fI\%ansi\fP
T}	T{
\fBSpan\fP
T}	T{
Abstraction consisting of \(dqopening\(dq SGR sequence defined by the
developer (or taken from preset list) and complementary \(dqclosing\(dq
SGR sequence that is built automatically.
T}
_
T{
\fBSpans\fP
T}	T{
Registry of predefined instances in case the developer doesn\(aqt need dynamic
output formatting and just wants to colorize an error message.
T}
_
T{
\fI\%SequenceSGR\fP
\fI\%SeqIndex\fP
T}	T{
Abstractions for manipulating ANSI control sequences and
classes\-factories, plus a registry of preset SGRs.
T}
_
T{
\fBIntCodes\fP
T}	T{
Registry of escape control sequence parameters.
T}
_
T{
\fButil\fP
T}	T{
*
T}	T{
Additional formatters and common methods for manipulating strings with
SGRs inside.
T}
_
.TE
.SS Features
.sp
One of the core concepts of the library is \fBSpan\fP class. \fBSpan\fP is a combination of two control sequences;
it wraps specified string with pre\-defined leading and trailing SGR definitions.
.sp
Example code:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import Spans

print(Spans.RED(\(aqFeat\(aq) + Spans.BOLD(\(aqures\(aq))

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Content\-aware format nesting
.sp
Compose text spans with automatic content\-aware span termination. Preset spans can safely overlap with each
other (as long as they require different \fIbreaker\fP sequences to reset).
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import Span

span1 = Span(\(aqblue\(aq, \(aqbold\(aq)
span2 = Span(\(aqcyan\(aq, \(aqinversed\(aq, \(aqunderlined\(aq, \(aqitalic\(aq)

msg = span1(f\(aqContent{span2(\(dq\-aware format\(dq)} nesting\(aq)
print(msg)

.ft P
.fi
.UNINDENT
.UNINDENT
[image]
.sp
Flexible sequence builder
.sp
Create your own \fI\%SGR sequences\fP using default constructor, which accepts color/attribute keys,
integer codes and even existing \fISGRs\fP, in any amount and in any order. Key resolving is case\-insensitive.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import SeqIndex, SequenceSGR

seq1 = SequenceSGR(\(aqhi_blue\(aq, 1)  # keys or integer codes
seq2 = SequenceSGR(seq1, SeqIndex.ITALIC)  # existing SGRs
seq3 = SequenceSGR(\(aqunderlined\(aq, \(aqYELLOW\(aq)  # case\-insensitive

msg = f\(aq{seq1}Flexible{SeqIndex.RESET} \(aq + \e
      f\(aq{seq2}sequence{SeqIndex.RESET} \(aq + \e
      str(seq3) + \(aqbuilder\(aq + str(SeqIndex.RESET)
print(msg)

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
256 colors / True Color support
.sp
The library supports extended color modes:
.INDENT 0.0
.IP \(bu 2
XTerm 256 colors indexed mode (see \fI\%Preset list\fP);
.IP \(bu 2
True Color RGB mode (16M colors).
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import SequenceSGR, SeqIndex

start_color = 41
for idx, c in enumerate(range(start_color, start_color+(36*6), 36)):
    print(f\(aq{SequenceSGR.new_color_256(c)}███{SeqIndex.COLOR_OFF}\(aq, end=\(aq\(aq)

print(\(aq\en\(aq)
for idx, c in enumerate(range(0, 256, 256//17)):
    r = max(0, 255\-c)
    g = max(0, min(255, 127\-(c*2)))
    b = c
    print(f\(aq{SequenceSGR.new_color_rgb(r, g, b)}█{SeqIndex.COLOR_OFF}\(aq, end=\(aq\(aq)

.ft P
.fi
.UNINDENT
.UNINDENT
[image]
.sp
Customizable output formats
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
@TODOTODO
.UNINDENT
.UNINDENT
.sp
String and number formatters
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
@TODOTODO
.UNINDENT
.UNINDENT
.SS High\-level API
.SS ColorIndex and Styles
.SS Output format control
.SS Color mode fallbacks
.SS Class hierarchy
.INDENT 0.0
.INDENT 2.5
\fI\%color\fP core API.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 2.5
\fI\%text\fP core API.UNINDENT
.UNINDENT
.SS Low\-level API
.sp
So, what\(aqs happening under the hood?
.SS Format soft reset
.sp
There are two ways to manage color and attribute termination:
.INDENT 0.0
.IP \(bu 2
hard reset (SGR\-0 or \fBESC [0m\fP)
.IP \(bu 2
soft reset (SGR\-22, 23, 24 etc.)
.UNINDENT
.sp
The main difference between them is that \fIhard\fP reset disables all formatting after itself, while \fIsoft\fP
reset disables only actually necessary attributes (i.e. used as opening sequence in \fBSpan\fP instance\(aqs context)
and keeps the other.
.sp
That\(aqs what \fBSpan\fP class is designed for: to simplify creation of soft\-resetting text spans, so that developer
doesn\(aqt have to restore all previously applied formats after every closing sequence.
.sp
Example
.sp
We are given a text span which is initially \fIbold\fP and \fIunderlined\fP\&. We want to recolor a few words inside of this
span. By default this will result in losing all the formatting to the right of updated text span (because
\fI\%RESET\fP, or \fBESC [0m\fP, clears all text attributes).
.sp
However, there is an option to specify what attributes should be disabled or let the library do that for you:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import Span, Spans, SeqIndex

# implicitly:
span_warn = Span(93, 4)
# or explicitly:
span_warn = Span.init_explicit(
    SeqIndex.HI_YELLOW + SeqIndex.UNDERLINED,  # sequences can be summed up, remember?
    SeqIndex.COLOR_OFF + SeqIndex.UNDERLINED_OFF,  # \(dqcounteractive\(dq sequences
    hard_reset_after=False
)

orig_text = Spans.BOLD(f\(aqthis is {SeqIndex.BG_GRAY}the original{SeqIndex.RESET} string\(aq)
updated_text = orig_text.replace(\(aqoriginal\(aq, span_warn(\(aqupdated\(aq), 1)
print(orig_text, \(aq\en\(aq, updated_text)

.ft P
.fi
.UNINDENT
.UNINDENT
[image]
.sp
As you can see, the update went well \-\- we kept all the previously applied formatting. Of course, this method
cannot be 100% applicable; for example, imagine that original text was colored blue. After the update \(dqstring\(dq
word won\(aqt be blue anymore, as we used \fBSeqIndex.COLOR_OFF\fP escape sequence to neutralize our own yellow color.
But it still can be helpful for a majority of cases (especially when text is generated and formatted by the same
program and in one go).
.SS Working with Spans
.sp
Use \fBSpan\fP constructor to create new instance with specified control sequence(s) as a opening/starter sequence
and \fBautomatically composed\fP closing sequence that will terminate attributes defined in opening sequence while
keeping the others (soft reset).
.sp
Resulting sequence params\(aq order is the same as argument\(aqs order.
.sp
Each sequence param can be specified as:
.INDENT 0.0
.IP \(bu 2
string key (see \fI\%Preset list\fP);
.IP \(bu 2
integer param value;
.IP \(bu 2
existing \fI\%SequenceSGR\fP instance (params will be extracted).
.UNINDENT
.sp
It\(aqs also possible to avoid auto\-composing mechanism and create \fBSpan\fP with
explicitly set parameters using \fBSpan.init_explicit()\fP\&.
.SS Creating and applying SGRs
.sp
You can use any of predefined sequences from \fI\%SeqIndex\fP registry or create your own via standard constructor. Valid
argument values as well as preset constants are described in \fI\%Preset list\fP page.
.sp
\fBIMPORTANT:\fP
.INDENT 0.0
.INDENT 3.5
\fBSequenceSGR\fP with zero params was specifically implemented to translate into an empty string and not
into \fBESC [m\fP, which would make sense, but also could be very entangling, as terminal emulators interpret
that sequence as \fBESC [0m\fP, which is \fIhard\fP reset sequence.
.UNINDENT
.UNINDENT
.sp
There is also a set of methods for dynamic \fBSequenceSGR\fP creation:
.INDENT 0.0
.IP \(bu 2
\fI\%make_color_256()\fP will produce sequence operating in 256\-colors mode (for a complete list
see \fI\%Preset list\fP);
.IP \(bu 2
\fI\%make_color_rgb()\fP will create a sequence capable of setting the colors in True Color 16M mode (however, some terminal emulators doesn\(aqt
support it).
.UNINDENT
.sp
To get the resulting sequence chars use \fI\%assemble()\fP method or cast instance to \fIstr\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import SequenceSGR

seq = SequenceSGR(4, 7)
msg = f\(aq({seq})\(aq

print(msg + f\(aq{SequenceSGR(0).assemble()}\(aq)
print(str(msg.assemble()))
print(msg.assemble().hex(\(aq:\(aq))

.ft P
.fi
.UNINDENT
.UNINDENT
[image]
.INDENT 0.0
.IP \(bu 2
First line is the string with encoded escape sequence;
.IP \(bu 2
Second line shows up the string in raw mode, as if sequences were ignored by the terminal;
.IP \(bu 2
Third line is hexadecimal string representation.
.UNINDENT
.SS SGR sequence structure
.INDENT 0.0
.IP 1. 3
\fBESC\fP is escape \fIcontrol character\fP, which opens a control sequence (can also be
written as \fB\ex1b\fP, \fB\e033\fP or \fB\ee\fP).
.IP 2. 3
\fB[\fP is sequence \fIintroducer\fP; it determines the type of control sequence (in this case
it\(aqs CSI).
.IP 3. 3
\fB4\fP and \fB7\fP are \fIparameters\fP of the escape sequence; they mean \(dqunderlined\(dq and \(dqinversed\(dq
attributes respectively. Those parameters must be separated by \fB;\fP\&.
.IP 4. 3
\fBm\fP is sequence \fIterminator\fP; it also determines the sub\-type of sequence, in our
case SGR\&. Sequences of this kind are most commonly encountered.
.UNINDENT
.SS Combining SGRs
.sp
One instance of \fI\%SequenceSGR\fP can be added to another. This will result in a new \fBSequenceSGR\fP with combined params.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import SequenceSGR, SeqIndex

combined = SequenceSGR(1, 31) + SequenceSGR(4)
print(f\(aq{combined}combined{SeqIndex.RESET}\(aq, str(combined).assemble())

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Class hierarchy
.INDENT 0.0
.INDENT 2.5
\fI\%ansi\fP core API.UNINDENT
.UNINDENT
.SS Core API
.SS Preset list
.sp
Preset lists are omitted from API docs to avoid unnesessary duplication;
summary list of all presets defined in the library (not including
\fButil.*\fP) is displayed here.
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
USAGE \- list all memthods that accept string keys of those prsets.
.UNINDENT
.UNINDENT
.sp
There are two types of color palettes used in modern terminals \-\- first one
containing 16 colors (\fI\%Color16\fP), and second one consisting of 256 colors
(\fI\%Color256\fP). There is also True Color mode (referenced as \fIRGB\fP mode),
but it is not palette\-based.
.SS Meta, attributes, resetters
.TS
center;
|l|l|l|l|l|l|l|l|.
_
T{
T}	T{
\fBName\fP
T}	T{
int
T}	T{
seq
T}	T{
spn
T}	T{
clr
T}	T{
sty
T}	T{
\fBDescription\fP
T}
_
T{
Meta
T}
_
T{
T}	T{
\fBNOOP\fP
T}	T{
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
No\-operation; always assembled as empty string
T}
_
T{
T}	T{
\fBRESET\fP
T}	T{
\fB0\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Reset all attributes and colors
T}
_
T{
Attributes
T}
_
T{
T}	T{
\fBBOLD\fP
T}	T{
\fB1\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fBV\fP\ [1]
T}	T{
Bold or increased intensity
T}
_
T{
T}	T{
\fBDIM\fP
T}	T{
\fB2\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fBV\fP
T}	T{
Faint, decreased intensity
T}
_
T{
T}	T{
\fBITALIC\fP
T}	T{
\fB3\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fBV\fP
T}	T{
Italic; \fInot widely supported\fP
T}
_
T{
T}	T{
\fBUNDERLINED\fP
T}	T{
\fB4\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fBV\fP
T}	T{
Underline
T}
_
T{
T}	T{
\fBBLINK_SLOW\fP
T}	T{
\fB5\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
\fBV\fP\ [2]
T}	T{
Set blinking to < 150 cpm
T}
_
T{
T}	T{
\fBBLINK_FAST\fP
T}	T{
\fB6\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Set blinking to 150+ cpm; \fInot widely supported\fP
T}
_
T{
T}	T{
\fBINVERSED\fP
T}	T{
\fB7\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fBV\fP
T}	T{
Swap foreground and background colors
T}
_
T{
T}	T{
\fBHIDDEN\fP
T}	T{
\fB8\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Conceal characters; \fInot widely supported\fP
T}
_
T{
T}	T{
\fBCROSSLINED\fP
T}	T{
\fB9\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
Strikethrough
T}
_
T{
T}	T{
\fBDOUBLE_UNDERLINED\fP
T}	T{
\fB21\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Double\-underline; \fIon several terminals disables\fP \fBBOLD\fP \fIinstead\fP
T}
_
T{
T}	T{
\fBCOLOR_EXTENDED\fP
T}	T{
\fB38\fP
T}	T{
T}	T{
T}	T{
T}	T{
T}	T{
Set foreground color [\fIindexed\fP/\fIRGB\fP mode];
\fIuse\fP \fI\%make_color_256\fP \fIand\fP \fI\%make_color_rgb\fP \fIinstead\fP
T}
_
T{
T}	T{
\fBBG_COLOR_EXTENDED\fP
T}	T{
\fB48\fP
T}	T{
T}	T{
T}	T{
T}	T{
T}	T{
Set background color [\fIindexed\fP/\fIRGB\fP mode];
\fIuse\fP \fI\%make_color_256\fP \fIand\fP \fI\%make_color_rgb\fP \fIinstead\fP
T}
_
T{
T}	T{
\fBOVERLINED\fP
T}	T{
\fB53\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fBV\fP
T}	T{
Overline; \fInot widely supported\fP
T}
_
T{
Resetters
T}
_
T{
T}	T{
\fBBOLD_DIM_OFF\fP
T}	T{
\fB22\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Disable \fBBOLD\fP and \fBDIM\fP attributes. \fISpecial aspects... It\(aqs
impossible to reliably disable them on a separate basis.\fP
T}
_
T{
T}	T{
\fBITALIC_OFF\fP
T}	T{
\fB23\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Disable italic
T}
_
T{
T}	T{
\fBUNDERLINED_OFF\fP
T}	T{
\fB24\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Disable underlining
T}
_
T{
T}	T{
\fBBLINK_OFF\fP
T}	T{
\fB25\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Disable blinking
T}
_
T{
T}	T{
\fBINVERSED_OFF\fP
T}	T{
\fB27\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Disable inversing
T}
_
T{
T}	T{
\fBHIDDEN_OFF\fP
T}	T{
\fB28\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Disable conecaling
T}
_
T{
T}	T{
\fBCROSSLINED_OFF\fP
T}	T{
\fB29\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Disable strikethrough
T}
_
T{
T}	T{
\fBCOLOR_OFF\fP
T}	T{
\fB39\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Reset foreground color
T}
_
T{
T}	T{
\fBBG_COLOR_OFF\fP
T}	T{
\fB49\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Reset background color
T}
_
T{
T}	T{
\fBOVERLINED_OFF\fP
T}	T{
\fB55\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Disable overlining
T}
_
T{
.IP [1] 5
for this and subsequent items in \(dqAttributes\(dq section: as boolean flags.
.IP [2] 5
as \fBblink\fP\&.
T}
_
.TE
.SS Color16 presets
.TS
center;
|l|l|l|l|l|l|l|l|l|.
_
T{
T}	T{
\fBName\fP
T}	T{
int
T}	T{
seq
T}	T{
spn
T}	T{
clr
T}	T{
sty
T}	T{
\fBRGB code\fP
T}	T{
\fBXTerm name\fP
T}
_
T{
Foreground \fIdefault\fP colors
T}
_
T{
[image]
T}	T{
\fBBLACK\fP
T}	T{
\fB30\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#000000\fP
T}	T{
Black
T}
_
T{
[image]
T}	T{
\fBRED\fP
T}	T{
\fB31\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#800000\fP
T}	T{
Maroon
T}
_
T{
[image]
T}	T{
\fBGREEN\fP
T}	T{
\fB32\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#008000\fP
T}	T{
Green
T}
_
T{
[image]
T}	T{
\fBYELLOW\fP
T}	T{
\fB33\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#808000\fP
T}	T{
Olive
T}
_
T{
[image]
T}	T{
\fBBLUE\fP
T}	T{
\fB34\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#000080\fP
T}	T{
Navy
T}
_
T{
[image]
T}	T{
\fBMAGENTA\fP
T}	T{
\fB35\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#800080\fP
T}	T{
Purple
T}
_
T{
[image]
T}	T{
\fBCYAN\fP
T}	T{
\fB36\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#008080\fP
T}	T{
Teal
T}
_
T{
[image]
T}	T{
\fBWHITE\fP
T}	T{
\fB37\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#c0c0c0\fP
T}	T{
Silver
T}
_
T{
Background \fIdefault\fP colors
T}
_
T{
[image]
T}	T{
\fBBG_BLACK\fP
T}	T{
\fB40\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#000000\fP
T}	T{
Black
T}
_
T{
[image]
T}	T{
\fBBG_RED\fP
T}	T{
\fB41\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#800000\fP
T}	T{
Maroon
T}
_
T{
[image]
T}	T{
\fBBG_GREEN\fP
T}	T{
\fB42\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#008000\fP
T}	T{
Green
T}
_
T{
[image]
T}	T{
\fBBG_YELLOW\fP
T}	T{
\fB43\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#808000\fP
T}	T{
Olive
T}
_
T{
[image]
T}	T{
\fBBG_BLUE\fP
T}	T{
\fB44\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#000080\fP
T}	T{
Navy
T}
_
T{
[image]
T}	T{
\fBBG_MAGENTA\fP
T}	T{
\fB45\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#800080\fP
T}	T{
Purple
T}
_
T{
[image]
T}	T{
\fBBG_CYAN\fP
T}	T{
\fB46\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#008080\fP
T}	T{
Teal
T}
_
T{
[image]
T}	T{
\fBBG_WHITE\fP
T}	T{
\fB47\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#c0c0c0\fP
T}	T{
Silver
T}
_
T{
High\-intensity foreground \fIdefault\fP colors
T}
_
T{
[image]
T}	T{
\fBGRAY\fP
T}	T{
\fB90\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#808080\fP
T}	T{
Grey
T}
_
T{
[image]
T}	T{
\fBHI_RED\fP
T}	T{
\fB91\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff0000\fP
T}	T{
Red
T}
_
T{
[image]
T}	T{
\fBHI_GREEN\fP
T}	T{
\fB92\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ff00\fP
T}	T{
Lime
T}
_
T{
[image]
T}	T{
\fBHI_YELLOW\fP
T}	T{
\fB93\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffff00\fP
T}	T{
Yellow
T}
_
T{
[image]
T}	T{
\fBHI_BLUE\fP
T}	T{
\fB94\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0000ff\fP
T}	T{
Blue
T}
_
T{
[image]
T}	T{
\fBHI_MAGENTA\fP
T}	T{
\fB95\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff00ff\fP
T}	T{
Fuchsia
T}
_
T{
[image]
T}	T{
\fBHI_CYAN\fP
T}	T{
\fB96\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ffff\fP
T}	T{
Aqua
T}
_
T{
[image]
T}	T{
\fBHI_WHITE\fP
T}	T{
\fB97\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffffff\fP
T}	T{
White
T}
_
T{
High\-intensity background \fIdefault\fP colors
T}
_
T{
[image]
T}	T{
\fBBG_GRAY\fP
T}	T{
\fB100\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#808080\fP
T}	T{
Grey
T}
_
T{
[image]
T}	T{
\fBBG_HI_RED\fP
T}	T{
\fB101\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff0000\fP
T}	T{
Red
T}
_
T{
[image]
T}	T{
\fBBG_HI_GREEN\fP
T}	T{
\fB102\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ff00\fP
T}	T{
Lime
T}
_
T{
[image]
T}	T{
\fBBG_HI_YELLOW\fP
T}	T{
\fB103\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffff00\fP
T}	T{
Yellow
T}
_
T{
[image]
T}	T{
\fBBG_HI_BLUE\fP
T}	T{
\fB104\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0000ff\fP
T}	T{
Blue
T}
_
T{
[image]
T}	T{
\fBBG_HI_MAGENTA\fP
T}	T{
\fB105\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff00ff\fP
T}	T{
Fuchsia
T}
_
T{
[image]
T}	T{
\fBBG_HI_CYAN\fP
T}	T{
\fB106\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ffff\fP
T}	T{
Aqua
T}
_
T{
[image]
T}	T{
\fBBG_HI_WHITE\fP
T}	T{
\fB107\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffffff\fP
T}	T{
White
T}
_
.TE
.SS Color256 presets
.TS
center;
|l|l|l|l|l|l|l|l|l|.
_
T{
T}	T{
\fBName\fP
T}	T{
int
T}	T{
seq
T}	T{
spn
T}	T{
clr
T}	T{
sty
T}	T{
\fBRGB code\fP
T}	T{
\fBXTerm name\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_BLACK\fP [3]
T}	T{
\fB0\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#000000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MAROON\fP
T}	T{
\fB1\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#800000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREEN\fP
T}	T{
\fB2\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#008000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_OLIVE\fP
T}	T{
\fB3\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#808000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_NAVY\fP
T}	T{
\fB4\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#000080\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PURPLE_5\fP
T}	T{
\fB5\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#800080\fP
T}	T{
\fBPurple\fP [4]
T}
_
T{
[image]
T}	T{
\fBXTERM_TEAL\fP
T}	T{
\fB6\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#008080\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SILVER\fP
T}	T{
\fB7\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#c0c0c0\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY\fP
T}	T{
\fB8\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#808080\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_RED\fP
T}	T{
\fB9\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff0000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIME\fP
T}	T{
\fB10\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ff00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_YELLOW\fP
T}	T{
\fB11\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffff00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_BLUE\fP
T}	T{
\fB12\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0000ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_FUCHSIA\fP
T}	T{
\fB13\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff00ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_AQUA\fP
T}	T{
\fB14\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ffff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_WHITE\fP
T}	T{
\fB15\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffffff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_0\fP
T}	T{
\fB16\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#000000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_NAVY_BLUE\fP
T}	T{
\fB17\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00005f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_BLUE\fP
T}	T{
\fB18\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#000087\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_BLUE_3\fP
T}	T{
\fB19\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0000af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_BLUE_2\fP
T}	T{
\fB20\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0000d7\fP
T}	T{
\fBBlue3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_BLUE_1\fP
T}	T{
\fB21\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0000ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_GREEN\fP
T}	T{
\fB22\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#005f00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_SKY_BLUE_7\fP
T}	T{
\fB23\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#005f5f\fP
T}	T{
\fBDeepSkyBlue4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_SKY_BLUE_6\fP
T}	T{
\fB24\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#005f87\fP
T}	T{
\fBDeepSkyBlue4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_SKY_BLUE_5\fP
T}	T{
\fB25\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#005faf\fP
T}	T{
\fBDeepSkyBlue4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DODGER_BLUE_3\fP
T}	T{
\fB26\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#005fd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DODGER_BLUE_2\fP
T}	T{
\fB27\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#005fff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREEN_5\fP
T}	T{
\fB28\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#008700\fP
T}	T{
\fBGreen4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SPRING_GREEN_4\fP
T}	T{
\fB29\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00875f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_TURQUOISE_4\fP
T}	T{
\fB30\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#008787\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_SKY_BLUE_4\fP
T}	T{
\fB31\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0087af\fP
T}	T{
\fBDeepSkyBlue3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_SKY_BLUE_3\fP
T}	T{
\fB32\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0087d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DODGER_BLUE_1\fP
T}	T{
\fB33\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0087ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREEN_4\fP
T}	T{
\fB34\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00af00\fP
T}	T{
\fBGreen3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SPRING_GREEN_5\fP
T}	T{
\fB35\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00af5f\fP
T}	T{
\fBSpringGreen3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_CYAN\fP
T}	T{
\fB36\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00af87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SEA_GREEN\fP
T}	T{
\fB37\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00afaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_SKY_BLUE_2\fP
T}	T{
\fB38\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00afd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_SKY_BLUE_1\fP
T}	T{
\fB39\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00afff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREEN_3\fP
T}	T{
\fB40\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00d700\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SPRING_GREEN_3\fP
T}	T{
\fB41\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00d75f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SPRING_GREEN_6\fP
T}	T{
\fB42\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00d787\fP
T}	T{
\fBSpringGreen2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_CYAN_3\fP
T}	T{
\fB43\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00d7af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_TURQUOISE\fP
T}	T{
\fB44\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00d7d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_TURQUOISE_2\fP
T}	T{
\fB45\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00d7ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREEN_2\fP
T}	T{
\fB46\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ff00\fP
T}	T{
\fBGreen1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SPRING_GREEN_2\fP
T}	T{
\fB47\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ff5f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SPRING_GREEN_1\fP
T}	T{
\fB48\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ff87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_SPRING_GREEN\fP
T}	T{
\fB49\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ffaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CYAN_2\fP
T}	T{
\fB50\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ffd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CYAN_1\fP
T}	T{
\fB51\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ffff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_RED_2\fP
T}	T{
\fB52\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f0000\fP
T}	T{
\fBDarkRed\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_PINK_8\fP
T}	T{
\fB53\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f005f\fP
T}	T{
\fBDeepPink4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PURPLE_6\fP
T}	T{
\fB54\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f0087\fP
T}	T{
\fBPurple4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PURPLE_4\fP
T}	T{
\fB55\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f00af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PURPLE_3\fP
T}	T{
\fB56\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f00d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_BLUE_VIOLET\fP
T}	T{
\fB57\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f00ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_ORANGE_4\fP
T}	T{
\fB58\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f5f00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_37\fP
T}	T{
\fB59\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f5f5f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_PURPLE_7\fP
T}	T{
\fB60\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f5f87\fP
T}	T{
\fBMediumPurple4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SLATE_BLUE_3\fP
T}	T{
\fB61\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f5faf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SLATE_BLUE_2\fP
T}	T{
\fB62\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f5fd7\fP
T}	T{
\fBSlateBlue3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_ROYAL_BLUE_1\fP
T}	T{
\fB63\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f5fff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CHARTREUSE_6\fP
T}	T{
\fB64\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f8700\fP
T}	T{
\fBChartreuse4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_9\fP
T}	T{
\fB65\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f875f\fP
T}	T{
\fBDarkSeaGreen4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PALE_TURQUOISE_4\fP
T}	T{
\fB66\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f8787\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_STEEL_BLUE\fP
T}	T{
\fB67\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f87af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_STEEL_BLUE_3\fP
T}	T{
\fB68\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f87d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CORNFLOWER_BLUE\fP
T}	T{
\fB69\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f87ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CHARTREUSE_5\fP
T}	T{
\fB70\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5faf00\fP
T}	T{
\fBChartreuse3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_8\fP
T}	T{
\fB71\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5faf5f\fP
T}	T{
\fBDarkSeaGreen4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_CADET_BLUE_2\fP
T}	T{
\fB72\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5faf87\fP
T}	T{
\fBCadetBlue\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_CADET_BLUE\fP
T}	T{
\fB73\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fafaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SKY_BLUE_3\fP
T}	T{
\fB74\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fafd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_STEEL_BLUE_2\fP
T}	T{
\fB75\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fafff\fP
T}	T{
\fBSteelBlue1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_CHARTREUSE_4\fP
T}	T{
\fB76\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fd700\fP
T}	T{
\fBChartreuse3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PALE_GREEN_4\fP
T}	T{
\fB77\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fd75f\fP
T}	T{
\fBPaleGreen3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SEA_GREEN_3\fP
T}	T{
\fB78\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fd787\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_AQUAMARINE_3\fP
T}	T{
\fB79\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fd7af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_TURQUOISE\fP
T}	T{
\fB80\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fd7d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_STEEL_BLUE_1\fP
T}	T{
\fB81\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fd7ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CHARTREUSE_2\fP
T}	T{
\fB82\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fff00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SEA_GREEN_4\fP
T}	T{
\fB83\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fff5f\fP
T}	T{
\fBSeaGreen2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SEA_GREEN_2\fP
T}	T{
\fB84\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fff87\fP
T}	T{
\fBSeaGreen1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SEA_GREEN_1\fP
T}	T{
\fB85\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fffaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_AQUAMARINE_2\fP
T}	T{
\fB86\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fffd7\fP
T}	T{
\fBAquamarine1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SLATE_GRAY_2\fP
T}	T{
\fB87\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fffff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_RED\fP
T}	T{
\fB88\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#870000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_PINK_7\fP
T}	T{
\fB89\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87005f\fP
T}	T{
\fBDeepPink4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_MAGENTA_2\fP
T}	T{
\fB90\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#870087\fP
T}	T{
\fBDarkMagenta\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_MAGENTA\fP
T}	T{
\fB91\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#8700af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_VIOLET_2\fP
T}	T{
\fB92\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#8700d7\fP
T}	T{
\fBDarkViolet\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PURPLE_2\fP
T}	T{
\fB93\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#8700ff\fP
T}	T{
\fBPurple\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_ORANGE_3\fP
T}	T{
\fB94\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#875f00\fP
T}	T{
\fBOrange4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_PINK_3\fP
T}	T{
\fB95\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#875f5f\fP
T}	T{
\fBLightPink4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PLUM_4\fP
T}	T{
\fB96\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#875f87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_PURPLE_6\fP
T}	T{
\fB97\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#875faf\fP
T}	T{
\fBMediumPurple3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_PURPLE_5\fP
T}	T{
\fB98\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#875fd7\fP
T}	T{
\fBMediumPurple3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SLATE_BLUE_1\fP
T}	T{
\fB99\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#875fff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_YELLOW_6\fP
T}	T{
\fB100\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#878700\fP
T}	T{
\fBYellow4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_WHEAT_4\fP
T}	T{
\fB101\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87875f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_53\fP
T}	T{
\fB102\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#878787\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SLATE_GREY\fP
T}	T{
\fB103\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#8787af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_PURPLE_4\fP
T}	T{
\fB104\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#8787d7\fP
T}	T{
\fBMediumPurple\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SLATE_BLUE\fP
T}	T{
\fB105\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#8787ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_YELLOW_4\fP
T}	T{
\fB106\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87af00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_6\fP
T}	T{
\fB107\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87af5f\fP
T}	T{
\fBDarkOliveGreen3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_7\fP
T}	T{
\fB108\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87af87\fP
T}	T{
\fBDarkSeaGreen\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SKY_BLUE_3\fP
T}	T{
\fB109\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87afaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SKY_BLUE_2\fP
T}	T{
\fB110\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87afd7\fP
T}	T{
\fBLightSkyBlue3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SKY_BLUE_2\fP
T}	T{
\fB111\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87afff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CHARTREUSE_3\fP
T}	T{
\fB112\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87d700\fP
T}	T{
\fBChartreuse2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_4\fP
T}	T{
\fB113\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87d75f\fP
T}	T{
\fBDarkOliveGreen3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PALE_GREEN_3\fP
T}	T{
\fB114\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87d787\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_5\fP
T}	T{
\fB115\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87d7af\fP
T}	T{
\fBDarkSeaGreen3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SLATE_GRAY_3\fP
T}	T{
\fB116\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87d7d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SKY_BLUE_1\fP
T}	T{
\fB117\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87d7ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CHARTREUSE_1\fP
T}	T{
\fB118\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87ff00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_GREEN_2\fP
T}	T{
\fB119\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87ff5f\fP
T}	T{
\fBLightGreen\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_GREEN\fP
T}	T{
\fB120\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87ff87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PALE_GREEN_1\fP
T}	T{
\fB121\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87ffaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_AQUAMARINE_1\fP
T}	T{
\fB122\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87ffd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SLATE_GRAY_1\fP
T}	T{
\fB123\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87ffff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_RED_4\fP
T}	T{
\fB124\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af0000\fP
T}	T{
\fBRed3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_PINK_6\fP
T}	T{
\fB125\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af005f\fP
T}	T{
\fBDeepPink4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_VIOLET_RED\fP
T}	T{
\fB126\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af0087\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MAGENTA_6\fP
T}	T{
\fB127\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af00af\fP
T}	T{
\fBMagenta3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_VIOLET\fP
T}	T{
\fB128\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af00d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PURPLE\fP
T}	T{
\fB129\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af00ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_ORANGE_3\fP
T}	T{
\fB130\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af5f00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_INDIAN_RED_4\fP
T}	T{
\fB131\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af5f5f\fP
T}	T{
\fBIndianRed\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_HOT_PINK_5\fP
T}	T{
\fB132\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af5f87\fP
T}	T{
\fBHotPink3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_ORCHID_4\fP
T}	T{
\fB133\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af5faf\fP
T}	T{
\fBMediumOrchid3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_ORCHID_3\fP
T}	T{
\fB134\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af5fd7\fP
T}	T{
\fBMediumOrchid\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_PURPLE_2\fP
T}	T{
\fB135\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af5fff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_GOLDENROD\fP
T}	T{
\fB136\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af8700\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SALMON_3\fP
T}	T{
\fB137\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af875f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_ROSY_BROWN\fP
T}	T{
\fB138\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af8787\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_63\fP
T}	T{
\fB139\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af87af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_PURPLE_3\fP
T}	T{
\fB140\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af87d7\fP
T}	T{
\fBMediumPurple2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_PURPLE_1\fP
T}	T{
\fB141\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af87ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GOLD_3\fP
T}	T{
\fB142\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afaf00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_KHAKI\fP
T}	T{
\fB143\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afaf5f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_NAVAJO_WHITE_3\fP
T}	T{
\fB144\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afaf87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_69\fP
T}	T{
\fB145\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afafaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_STEEL_BLUE_3\fP
T}	T{
\fB146\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afafd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_STEEL_BLUE_2\fP
T}	T{
\fB147\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afafff\fP
T}	T{
\fBLightSteelBlue\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_YELLOW_5\fP
T}	T{
\fB148\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afd700\fP
T}	T{
\fBYellow3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_5\fP
T}	T{
\fB149\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afd75f\fP
T}	T{
\fBDarkOliveGreen3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_6\fP
T}	T{
\fB150\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afd787\fP
T}	T{
\fBDarkSeaGreen3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_4\fP
T}	T{
\fB151\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afd7af\fP
T}	T{
\fBDarkSeaGreen2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_CYAN_3\fP
T}	T{
\fB152\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afd7d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SKY_BLUE_1\fP
T}	T{
\fB153\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afd7ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREEN_YELLOW\fP
T}	T{
\fB154\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afff00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_3\fP
T}	T{
\fB155\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afff5f\fP
T}	T{
\fBDarkOliveGreen2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PALE_GREEN_2\fP
T}	T{
\fB156\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afff87\fP
T}	T{
\fBPaleGreen1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_3\fP
T}	T{
\fB157\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afffaf\fP
T}	T{
\fBDarkSeaGreen2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_1\fP
T}	T{
\fB158\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afffd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PALE_TURQUOISE_1\fP
T}	T{
\fB159\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afffff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_RED_3\fP
T}	T{
\fB160\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d70000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_PINK_5\fP
T}	T{
\fB161\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7005f\fP
T}	T{
\fBDeepPink3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_PINK_3\fP
T}	T{
\fB162\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d70087\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MAGENTA_3\fP
T}	T{
\fB163\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d700af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MAGENTA_5\fP
T}	T{
\fB164\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d700d7\fP
T}	T{
\fBMagenta3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_MAGENTA_4\fP
T}	T{
\fB165\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d700ff\fP
T}	T{
\fBMagenta2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_ORANGE_2\fP
T}	T{
\fB166\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d75f00\fP
T}	T{
\fBDarkOrange3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_INDIAN_RED_3\fP
T}	T{
\fB167\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d75f5f\fP
T}	T{
\fBIndianRed\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_HOT_PINK_4\fP
T}	T{
\fB168\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d75f87\fP
T}	T{
\fBHotPink3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_HOT_PINK_3\fP
T}	T{
\fB169\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d75faf\fP
T}	T{
\fBHotPink2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_ORCHID_3\fP
T}	T{
\fB170\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d75fd7\fP
T}	T{
\fBOrchid\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_ORCHID_2\fP
T}	T{
\fB171\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d75fff\fP
T}	T{
\fBMediumOrchid1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_ORANGE_2\fP
T}	T{
\fB172\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d78700\fP
T}	T{
\fBOrange3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SALMON_2\fP
T}	T{
\fB173\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7875f\fP
T}	T{
\fBLightSalmon3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_PINK_2\fP
T}	T{
\fB174\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d78787\fP
T}	T{
\fBLightPink3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PINK_3\fP
T}	T{
\fB175\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d787af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PLUM_3\fP
T}	T{
\fB176\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d787d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_VIOLET\fP
T}	T{
\fB177\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d787ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GOLD_2\fP
T}	T{
\fB178\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7af00\fP
T}	T{
\fBGold3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_GOLDENROD_5\fP
T}	T{
\fB179\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7af5f\fP
T}	T{
\fBLightGoldenrod3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_TAN\fP
T}	T{
\fB180\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7af87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MISTY_ROSE_3\fP
T}	T{
\fB181\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7afaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_THISTLE_3\fP
T}	T{
\fB182\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7afd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PLUM_2\fP
T}	T{
\fB183\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7afff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_YELLOW_3\fP
T}	T{
\fB184\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7d700\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_KHAKI_3\fP
T}	T{
\fB185\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7d75f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_GOLDENROD_3\fP
T}	T{
\fB186\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7d787\fP
T}	T{
\fBLightGoldenrod2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_YELLOW_3\fP
T}	T{
\fB187\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7d7af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_84\fP
T}	T{
\fB188\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7d7d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_STEEL_BLUE_1\fP
T}	T{
\fB189\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7d7ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_YELLOW_2\fP
T}	T{
\fB190\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7ff00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_2\fP
T}	T{
\fB191\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7ff5f\fP
T}	T{
\fBDarkOliveGreen1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_1\fP
T}	T{
\fB192\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7ff87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_2\fP
T}	T{
\fB193\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7ffaf\fP
T}	T{
\fBDarkSeaGreen1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_HONEYDEW_2\fP
T}	T{
\fB194\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7ffd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_CYAN_1\fP
T}	T{
\fB195\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7ffff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_RED_1\fP
T}	T{
\fB196\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff0000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_PINK_4\fP
T}	T{
\fB197\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff005f\fP
T}	T{
\fBDeepPink2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_PINK_2\fP
T}	T{
\fB198\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff0087\fP
T}	T{
\fBDeepPink1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_PINK_1\fP
T}	T{
\fB199\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff00af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MAGENTA_2\fP
T}	T{
\fB200\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff00d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MAGENTA_1\fP
T}	T{
\fB201\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff00ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_ORANGE_RED_1\fP
T}	T{
\fB202\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff5f00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_INDIAN_RED_1\fP
T}	T{
\fB203\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff5f5f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_INDIAN_RED_2\fP
T}	T{
\fB204\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff5f87\fP
T}	T{
\fBIndianRed1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_HOT_PINK_2\fP
T}	T{
\fB205\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff5faf\fP
T}	T{
\fBHotPink\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_HOT_PINK\fP
T}	T{
\fB206\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff5fd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_ORCHID_1\fP
T}	T{
\fB207\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff5fff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_ORANGE\fP
T}	T{
\fB208\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff8700\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SALMON_1\fP
T}	T{
\fB209\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff875f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_CORAL\fP
T}	T{
\fB210\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff8787\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PALE_VIOLET_RED_1\fP
T}	T{
\fB211\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff87af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_ORCHID_2\fP
T}	T{
\fB212\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff87d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_ORCHID_1\fP
T}	T{
\fB213\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff87ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_ORANGE_1\fP
T}	T{
\fB214\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffaf00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SANDY_BROWN\fP
T}	T{
\fB215\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffaf5f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SALMON_1\fP
T}	T{
\fB216\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffaf87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_PINK_1\fP
T}	T{
\fB217\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffafaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PINK_1\fP
T}	T{
\fB218\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffafd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PLUM_1\fP
T}	T{
\fB219\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffafff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GOLD_1\fP
T}	T{
\fB220\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffd700\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_GOLDENROD_4\fP
T}	T{
\fB221\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffd75f\fP
T}	T{
\fBLightGoldenrod2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_GOLDENROD_2\fP
T}	T{
\fB222\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffd787\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_NAVAJO_WHITE_1\fP
T}	T{
\fB223\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffd7af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MISTY_ROSE_1\fP
T}	T{
\fB224\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffd7d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_THISTLE_1\fP
T}	T{
\fB225\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffd7ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_YELLOW_1\fP
T}	T{
\fB226\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffff00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_GOLDENROD_1\fP
T}	T{
\fB227\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffff5f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_KHAKI_1\fP
T}	T{
\fB228\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffff87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_WHEAT_1\fP
T}	T{
\fB229\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffffaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CORNSILK_1\fP
T}	T{
\fB230\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffffd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_100\fP
T}	T{
\fB231\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffffff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_3\fP
T}	T{
\fB232\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#080808\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_7\fP
T}	T{
\fB233\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#121212\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_11\fP
T}	T{
\fB234\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#1c1c1c\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_15\fP
T}	T{
\fB235\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#262626\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_19\fP
T}	T{
\fB236\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#303030\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_23\fP
T}	T{
\fB237\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#3a3a3a\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_27\fP
T}	T{
\fB238\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#444444\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_30\fP
T}	T{
\fB239\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#4e4e4e\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_35\fP
T}	T{
\fB240\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#585858\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_39\fP
T}	T{
\fB241\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#626262\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_42\fP
T}	T{
\fB242\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#6c6c6c\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_46\fP
T}	T{
\fB243\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#767676\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_50\fP
T}	T{
\fB244\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#808080\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_54\fP
T}	T{
\fB245\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#8a8a8a\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_58\fP
T}	T{
\fB246\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#949494\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_62\fP
T}	T{
\fB247\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#9e9e9e\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_66\fP
T}	T{
\fB248\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#a8a8a8\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_70\fP
T}	T{
\fB249\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#b2b2b2\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_74\fP
T}	T{
\fB250\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#bcbcbc\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_78\fP
T}	T{
\fB251\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#c6c6c6\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_82\fP
T}	T{
\fB252\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d0d0d0\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_85\fP
T}	T{
\fB253\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#dadada\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_89\fP
T}	T{
\fB254\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#e4e4e4\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_93\fP
T}	T{
\fB255\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#eeeeee\fP
T}	T{
T}
_
T{
.IP [3] 5
First 16 colors are effectively the same as colors in \fIdefault\fP 16\-color mode and share with them the same color values (and depend on terminal color scheme as well).
.IP [4] 5
XTerm name list contains duplicates; variable names for these were slightly modified (different numbers at the end) to avoid namespace conflicts. Every changed name is displayed with \fBbold\fP font.
T}
_
.TE

.sp
.ce
----

.ce 0
.sp
.sp
Sources
.INDENT 0.0
.IP 1. 3
\fI\%https://en.wikipedia.org/wiki/ANSI_escape_code\fP
.IP 2. 3
\fI\%https://www.ditig.com/256\-colors\-cheat\-sheet\fP
.UNINDENT
.SS Xterm color palette
.sp
Actual colors of \fIdefault\fP palette depend on user\(aqs terminal settings, i.e.
the result color of \fI\%Color16\fP is not guaranteed to exactly match the
corresponding color listed below. What\(aqs more, note that \fIdefault\fP palette
is actually a part of \fIindexed\fP one (first 16 colors of 256\-color table).
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
\fB(Verify)\fP The approximation algomanrithm was explicitly made to ignore these colors because
otherwise the results of transforming \fIRGB\fP values into \fIindexed\fP ones would be
unpredictable, in addition to different results for different users, depending
on their terminal emulator setup.
.UNINDENT
.UNINDENT
.sp
However, it doesn\(aqt mean that \fI\%Color16\fP is useless. Just the opposite \-\- it\(aqs
ideal for situtations when you don\(aqt actually \fBhave to\fP set exact values and
it\(aqs easier to specify estimation of desired color. I.e. setting color to \fB\(aqred\(aq\fP
is usually more than enough for displaying an error message \-\- we don\(aqt really care
of precise hue or brightness values for it.
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
Approximation algorithm is as simple as iterating through all colors in the
\fIlookup table\fP (which contains all possible ...
.UNINDENT
.UNINDENT

.sp
.ce
----

.ce 0
.sp

.sp
.ce
----

.ce 0
.sp
.sp
Sources
.INDENT 0.0
.IP 1. 3
\fI\%https://www.tweaking4all.com/software/linux\-software/xterm\-color\-cheat\-sheet/\fP
.UNINDENT
.SS Named Colors collection
.SS lisr
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
@TODO
.UNINDENT
.UNINDENT
.SS Renderers
.SS Class hierarchy
.INDENT 0.0
.INDENT 2.5
\fI\%renderer\fP core API.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
Win32Renderer ?
.UNINDENT
.UNINDENT
.SS String (and bytes) filters
.SS Class hierarchy
.INDENT 0.0
.INDENT 2.5
\fI\%utilstr\fP helper API.UNINDENT
.UNINDENT
.SS Number formatters
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
The library contains @TODO
.UNINDENT
.UNINDENT
.SS Auto\-float formatter
.SS Prefixed\-unit formatter
.SS Time delta formatter
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import pytermor.utilnum
from pytermor import RendererManager, SgrRenderer
from pytermor.util import time_delta

seconds_list = [2, 10, 60, 2700, 32340, 273600, 4752000, 864000000]
max_len_list = [3, 6, 10]

for max_len in max_len_list:
    formatter = pytermor.utilnum.tdf_registry.find_matching(max_len)

RendererManager.set_default(SgrRenderer)
for seconds in seconds_list:
    for max_len in max_len_list:
        formatter = pytermor.utilnum.tdf_registry.get_by_max_len(max_len)
        print(formatter.format(seconds), end=\(aq \(aq)
    print()

.ft P
.fi
.UNINDENT
.UNINDENT
[image]
.SS Documentation guidelines
.sp
\fI(mostly as a reminder for myself)\fP
.INDENT 0.0
.IP \(bu 2
Basic types and built\-in values should be surrounded with asterisks:
.INDENT 2.0
.INDENT 3.5
\fB*True*\fP → \fITrue\fP
.sp
\fB*None*\fP → \fINone\fP
.sp
\fB*int*\fP → \fIint\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
Library classes, methods, etc. should be enclosed in single backticks in order to become a hyperlinks:
.INDENT 2.0
.INDENT 3.5
\fB\(gaSgrRenderer.render()\(ga\fP → \fI\%SgrRenderer.render()\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
Argument names and string literals that include escape sequences or their fragments should be wrapped in double backticks:
.INDENT 2.0
.INDENT 3.5
\fB\(ga\(gaarg1\(ga\(ga\fP → \fBarg1\fP
.sp
\fB\(ga\(gaESC\ [31m\ ESC\ [m\(ga\(ga\fP → \fBESC [31m ESC [m\fP
.UNINDENT
.UNINDENT
.sp
On the top of that, ESC control char should be padded with spaces for better readability. This also triggers automatic application of custom style for even more visual difference.
.UNINDENT
.SH API REFERENCE
.TS
center;
|l|l|.
_
T{
\fI\%ansi\fP
T}	T{
Module contains definitions for low\-level ANSI escape sequences building.
T}
_
T{
\fI\%color\fP
T}	T{
T}
_
T{
\fI\%common\fP
T}	T{
T}
_
T{
\fI\%cval\fP
T}	T{
Color preset list.
T}
_
T{
\fI\%renderer\fP
T}	T{
Module with output formatters.
T}
_
T{
\fI\%style\fP
T}	T{
T}
_
T{
\fI\%text\fP
T}	T{
\(dqFront\-end\(dq module of the library.
T}
_
T{
\fI\%utilmisc\fP
T}	T{
A
T}
_
T{
\fI\%utilnum\fP
T}	T{
utilnum
T}
_
T{
\fI\%utilstr\fP
T}	T{
Package containing a set of formatters for prettier output, as well as utility classes for removing some of the boilerplate code when dealing with escape sequences.
T}
_
.TE
.SS pytermor.ansi
.sp
Module contains definitions for low\-level ANSI escape sequences building.
Can be used for creating a variety of sequences including:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
SGR sequences (text and background
coloring, other text formatting and effects);
.IP \(bu 2
CSI sequences (cursor management,
selective screen cleraing);
.IP \(bu 2
OSC sequences (varoius system commands).
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBIMPORTANT:\fP
.INDENT 0.0
.INDENT 3.5
blah\-blah\-blah low\-level @TODO
.UNINDENT
.UNINDENT
.sp
The module doesn\(aqt distinguish \(dqsingle\-instruction\(dq sequences from several
ones merged together, e.g. \fBStyle(fg=\(aqred\(aq, bold=True)\fP produces only one
opening SequenceSGR instance:
.sp
.nf
.ft C
>>> SequenceSGR(IntCode.BOLD, IntCode.RED).assemble()
\(aq[1;31m\(aq
.ft P
.fi
.sp
\&...although generally speaking it is two of them (\fBESC [1m\fP and
\fBESC [31m\fP). However, the module can automatically match terminating
sequences for any form of input SGRs and translate it to specified format.
.INDENT 0.0
.TP
\fBXTerm Control Sequences\fP
\fI\%https://invisible\-island.net/xterm/ctlseqs/ctlseqs.html\fP
.TP
\fBECMA\-48 specification\fP
\fI\%https://www.ecma\-international.org/publications\-and\-standards/standards/ecma\-48/\fP
.UNINDENT
.sp
Module Attributes
.TS
center;
|l|l|.
_
T{
\fI\%NOOP_SEQ\fP
T}	T{
Special sequence in case you \fIhave to\fP provide one or another SGR, but do  not want any control sequences to be actually included in the output.
T}
_
.TE
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fI\%assemble_hyperlink\fP(url[, label])
T}	T{
.INDENT 0.0
.TP
.B param url
.UNINDENT
T}
_
T{
\fI\%decompose_request_cursor_position\fP(string)
T}	T{
Parse RCP sequence that generally comes from a terminal as a response to \fI\%QCP\fP sequence and contains a cursor\(aqs current row and column.
T}
_
T{
\fI\%enclose\fP(opening_seq, string)
T}	T{
.INDENT 0.0
.TP
.B param opening_seq
.UNINDENT
T}
_
T{
\fI\%get_closing_seq\fP(opening_seq)
T}	T{
.INDENT 0.0
.TP
.B param opening_seq
.UNINDENT
T}
_
T{
\fI\%make_color_256\fP(code[, bg])
T}	T{
Wrapper for creation of \fI\%SequenceSGR\fP that sets foreground (or background) to one of 256\-color palette value.
T}
_
T{
\fI\%make_color_rgb\fP(r, g, b[, bg])
T}	T{
Wrapper for creation of \fI\%SequenceSGR\fP operating in True Color mode (16M). Valid values for \fBr\fP, \fBg\fP and \fBb\fP are in range of [0; 255]. This range linearly translates into [0x00; 0xFF] for each channel. The result value is composed as \(dq0xRRGGBB\(dq. For example, sequence with color of 0xFF3300 can be created with::.
T}
_
T{
\fI\%make_erase_in_line\fP([mode])
T}	T{
Create EL sequence that erases a part of the line or the entire line.
T}
_
T{
\fI\%make_hyperlink_part\fP([url])
T}	T{
.INDENT 0.0
.TP
.B param url
.UNINDENT
T}
_
T{
\fI\%make_query_cursor_position\fP()
T}	T{
Create QCP sequence that requests an output device to respond with a structure containing current cursor coordinates (\fI\%RCP\fP).
T}
_
T{
\fI\%make_set_cursor_x_abs\fP([x])
T}	T{
Create CHA sequence that sets cursor horizontal position, or column, to \fBx\fP\&.
T}
_
.TE
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%ISequence\fP(*params)
T}	T{
Abstract ancestor of all escape sequences.
T}
_
T{
\fI\%ISequenceFe\fP(*params)
T}	T{
Wide range of sequence types that includes \fI\%CSI\fP, \fI\%OSC\fP and more.
T}
_
T{
\fI\%IntCode\fP(value)
T}	T{
Complete or almost complete list of reliably working SGR param integer codes.
T}
_
T{
\fI\%SeqIndex\fP()
T}	T{
Registry of static sequence presets.
T}
_
T{
\fI\%SequenceCSI\fP(terminator, short_name, *params)
T}	T{
Class representing CSI\-type ANSI escape sequence.
T}
_
T{
\fI\%SequenceOSC\fP(*params)
T}	T{
OSC\-type sequence.
T}
_
T{
\fI\%SequenceSGR\fP(*args)
T}	T{
Class representing SGR\-type escape sequence with varying amount of parameters.
T}
_
T{
\fI\%SequenceST\fP(*params)
T}	T{
String Terminator sequence (ST).
T}
_
.TE
.INDENT 0.0
.TP
.B class  pytermor.ansi.ISequence(*params)
Bases: \fBSized\fP
.sp
Abstract ancestor of all escape sequences.
.INDENT 7.0
.TP
.B assemble()
Build up actual byte sequence and return
as an ASCII\-encoded string.
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  params:  t.List[int  |  str]
Return internal params as array.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.ISequenceFe(*params)
Bases: \fI\%ISequence\fP
.sp
Wide range of sequence types that includes \fI\%CSI\fP,
\fI\%OSC\fP and more.
.sp
All subtypes of this sequence start with \fBESC\fP plus ASCII byte
from \fB0x40\fP to \fB0x5F\fP (\fB@\fP, \fB[\fP, \fB\e\fP, \fB]\fP, \fB_\fP, \fB^\fP and
capital letters \fBA\fP\-\fBZ\fP).
.INDENT 7.0
.TP
.B assemble()
Build up actual byte sequence and return
as an ASCII\-encoded string.
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  params:  t.List[int  |  str]
Return internal params as array.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SequenceST(*params)
Bases: \fI\%ISequenceFe\fP
.sp
String Terminator sequence (ST). Terminates strings in other control
sequences. Encoded as \fBESC \e\fP (\fB0x1B\fP \fB0x5C\fP).
.INDENT 7.0
.TP
.B assemble()
Build up actual byte sequence and return
as an ASCII\-encoded string.
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  params:  t.List[int  |  str]
Return internal params as array.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SequenceOSC(*params)
Bases: \fI\%ISequenceFe\fP
.sp
OSC\-type sequence. Starts a control
string for the operating system to use. Encoded as \fBESC ]\fP, plus params
separated by \fB;\fP, and terminated with \fI\%SequenceST\fP\&.
.INDENT 7.0
.TP
.B assemble()
Build up actual byte sequence and return
as an ASCII\-encoded string.
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  params:  t.List[int  |  str]
Return internal params as array.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SequenceCSI(terminator, short_name, *params)
Bases: \fI\%ISequenceFe\fP
.sp
Class representing CSI\-type ANSI
escape sequence. All subtypes of this sequence start with \fBESC [\fP\&.
.sp
Sequences of this type are used to control text formatting,
change cursor position, erase screen and more.
.sp
.nf
.ft C
>>> make_erase_in_line().assemble()
\(aq[0K\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBterminator\fP \-\- 
.IP \(bu 2
\fBshort_name\fP \-\- 
.IP \(bu 2
\fBparams\fP \-\- 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B assemble()
Build up actual byte sequence and return
as an ASCII\-encoded string.
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  params:  t.List[int  |  str]
Return internal params as array.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SequenceSGR(*args)
Bases: \fI\%SequenceCSI\fP
.sp
Class representing SGR\-type escape sequence
with varying amount of parameters. SGR sequences allow to change the color
of text or/and terminal background (in 3 different color spaces) as well
as set decorate text with italic style, underlining, overlining, cross\-lining,
making it bold or blinking etc.
.sp
When cast to \fIstr\fP, as all other sequences, invokes \fI\%assemble()\fP method
and transforms into encoded control sequence string. It is possible to add
of one SGR sequence to another, resulting in a new one with merged params
(see examples).
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%SequenceSGR\fP with zero params was specifically implemented to
translate into empty string and not into \fBESC [m\fP, which would have
made sense, but also would be entangling, as this sequence is the equivalent
of \fBESC [0m\fP \-\- hard reset sequence. The empty\-string\-sequence is
predefined at module level as \fI\%NOOP_SEQ\fP\&.
.UNINDENT
.UNINDENT
.sp
.nf
.ft C
>>> SequenceSGR(IntCode.HI_CYAN, \(aqunderlined\(aq, 1)
<SGR[96,4,1]>
>>> SequenceSGR(31) + SequenceSGR(1) == SequenceSGR(31, 1)
True
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBargs\fP \-\- 
.sp
Sequence params. Resulting param order is the same as an
argument order. Each argument can be specified as:
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fIstr\fP \-\- any of \fI\%IntCode\fP names, case\-insensitive
.IP \(bu 2
\fIint\fP \-\- \fI\%IntCode\fP instance or plain integer
.IP \(bu 2
\fI\%SequenceSGR\fP instance (params will be extracted)
.UNINDENT
.UNINDENT
.UNINDENT

.IP \(bu 2
\fBterminator\fP \-\- 
.IP \(bu 2
\fBshort_name\fP \-\- 
.IP \(bu 2
\fBparams\fP \-\- 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B assemble()
Build up actual byte sequence and return
as an ASCII\-encoded string.
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  params:  List[int]
.INDENT 7.0
.TP
.B Returns
Sequence params as integers or \fI\%IntCode\fP instances.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.NOOP_SEQ  =  <SGR[NOP]>
Special sequence in case you \fIhave to\fP provide one or another SGR, but do 
not want any control sequences to be actually included in the output. 
\fBNOOP_SEQ.assemble()\fP returns empty string, \fBNOOP_SEQ.params\fP 
returns empty list.
.sp
.nf
.ft C
>>> NOOP_SEQ.assemble()
\(aq\(aq
>>> NOOP_SEQ.params
[]
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.IntCode(value)
Bases: \fBIntEnum\fP
.sp
Complete or almost complete list of reliably working SGR param integer codes.
Fully interchangeable with plain \fIint\fP\&. Suitable for \fI\%SequenceSGR\fP
default constructor.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%IntCode\fP predefined constants are omitted from documentation to avoid
useless repeats and save space, as most of the time \(dqnext level\(dq class
\fI\%SeqIndex\fP is more appropriate, and on top of that, the constant
names are literally the same for \fI\%SeqIndex\fP and \fI\%IntCode\fP\&.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  resolve(name)
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\fIstr\fP) \-\- 
.TP
.B Return type
\fI\%IntCode\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SeqIndex
Registry of static sequence presets.
.INDENT 7.0
.TP
.B RESET  =  <SGR[0]>
Hard reset sequence.
.UNINDENT
.INDENT 7.0
.TP
.B BOLD  =  <SGR[1]>
Bold or increased intensity.
.UNINDENT
.INDENT 7.0
.TP
.B DIM  =  <SGR[2]>
Faint, decreased intensity.
.UNINDENT
.INDENT 7.0
.TP
.B ITALIC  =  <SGR[3]>
Italic \fI(not widely supported)\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B UNDERLINED  =  <SGR[4]>
Underline.
.UNINDENT
.INDENT 7.0
.TP
.B BLINK_SLOW  =  <SGR[5]>
Set blinking to < 150 cpm.
.UNINDENT
.INDENT 7.0
.TP
.B BLINK_FAST  =  <SGR[6]>
Set blinking to 150+ cpm \fI(not widely supported)\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B INVERSED  =  <SGR[7]>
Swap foreground and background colors.
.UNINDENT
.INDENT 7.0
.TP
.B HIDDEN  =  <SGR[8]>
Conceal characters \fI(not widely supported)\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B CROSSLINED  =  <SGR[9]>
Strikethrough.
.UNINDENT
.INDENT 7.0
.TP
.B DOUBLE_UNDERLINED  =  <SGR[21]>
Double\-underline. \fIOn several terminals disables\fP \fI\%BOLD\fP \fIinstead\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B OVERLINED  =  <SGR[53]>
Overline \fI(not widely supported)\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B BOLD_DIM_OFF  =  <SGR[22]>
Disable \fBBOLD\fP and \fBDIM\fP attributes.
.sp
\fISpecial aspects... It\(aqs impossible to reliably disable them on a separate basis.\fP
.UNINDENT
.INDENT 7.0
.TP
.B ITALIC_OFF  =  <SGR[23]>
Disable italic.
.UNINDENT
.INDENT 7.0
.TP
.B UNDERLINED_OFF  =  <SGR[24]>
Disable underlining.
.UNINDENT
.INDENT 7.0
.TP
.B BLINK_OFF  =  <SGR[25]>
Disable blinking.
.UNINDENT
.INDENT 7.0
.TP
.B INVERSED_OFF  =  <SGR[27]>
Disable inversing.
.UNINDENT
.INDENT 7.0
.TP
.B HIDDEN_OFF  =  <SGR[28]>
Disable conecaling.
.UNINDENT
.INDENT 7.0
.TP
.B CROSSLINED_OFF  =  <SGR[29]>
Disable strikethrough.
.UNINDENT
.INDENT 7.0
.TP
.B OVERLINED_OFF  =  <SGR[55]>
Disable overlining.
.UNINDENT
.INDENT 7.0
.TP
.B BLACK  =  <SGR[30]>
Set text color to 0x000000.
.UNINDENT
.INDENT 7.0
.TP
.B RED  =  <SGR[31]>
Set text color to 0x800000.
.UNINDENT
.INDENT 7.0
.TP
.B GREEN  =  <SGR[32]>
Set text color to 0x008000.
.UNINDENT
.INDENT 7.0
.TP
.B YELLOW  =  <SGR[33]>
Set text color to 0x808000.
.UNINDENT
.INDENT 7.0
.TP
.B BLUE  =  <SGR[34]>
Set text color to 0x000080.
.UNINDENT
.INDENT 7.0
.TP
.B MAGENTA  =  <SGR[35]>
Set text color to 0x800080.
.UNINDENT
.INDENT 7.0
.TP
.B CYAN  =  <SGR[36]>
Set text color to 0x008080.
.UNINDENT
.INDENT 7.0
.TP
.B WHITE  =  <SGR[37]>
Set text color to 0xc0c0c0.
.UNINDENT
.INDENT 7.0
.TP
.B COLOR_OFF  =  <SGR[39]>
Reset foreground color.
.UNINDENT
.INDENT 7.0
.TP
.B BG_BLACK  =  <SGR[40]>
Set background color to 0x000000.
.UNINDENT
.INDENT 7.0
.TP
.B BG_RED  =  <SGR[41]>
Set background color to 0x800000.
.UNINDENT
.INDENT 7.0
.TP
.B BG_GREEN  =  <SGR[42]>
Set background color to 0x008000.
.UNINDENT
.INDENT 7.0
.TP
.B BG_YELLOW  =  <SGR[43]>
Set background color to 0x808000.
.UNINDENT
.INDENT 7.0
.TP
.B BG_BLUE  =  <SGR[44]>
Set background color to 0x000080.
.UNINDENT
.INDENT 7.0
.TP
.B BG_MAGENTA  =  <SGR[45]>
Set background color to 0x800080.
.UNINDENT
.INDENT 7.0
.TP
.B BG_CYAN  =  <SGR[46]>
Set background color to 0x008080.
.UNINDENT
.INDENT 7.0
.TP
.B BG_WHITE  =  <SGR[47]>
Set background color to 0xc0c0c0.
.UNINDENT
.INDENT 7.0
.TP
.B BG_COLOR_OFF  =  <SGR[49]>
Reset background color.
.UNINDENT
.INDENT 7.0
.TP
.B GRAY  =  <SGR[90]>
Set text color to 0x808080.
.UNINDENT
.INDENT 7.0
.TP
.B HI_RED  =  <SGR[91]>
Set text color to 0xff0000.
.UNINDENT
.INDENT 7.0
.TP
.B HI_GREEN  =  <SGR[92]>
Set text color to 0x00ff00.
.UNINDENT
.INDENT 7.0
.TP
.B HI_YELLOW  =  <SGR[93]>
Set text color to 0xffff00.
.UNINDENT
.INDENT 7.0
.TP
.B HI_BLUE  =  <SGR[94]>
Set text color to 0x0000ff.
.UNINDENT
.INDENT 7.0
.TP
.B HI_MAGENTA  =  <SGR[95]>
Set text color to 0xff00ff.
.UNINDENT
.INDENT 7.0
.TP
.B HI_CYAN  =  <SGR[96]>
Set text color to 0x00ffff.
.UNINDENT
.INDENT 7.0
.TP
.B HI_WHITE  =  <SGR[97]>
Set text color to 0xffffff.
.UNINDENT
.INDENT 7.0
.TP
.B BG_GRAY  =  <SGR[100]>
Set background color to 0x808080.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_RED  =  <SGR[101]>
Set background color to 0xff0000.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_GREEN  =  <SGR[102]>
Set background color to 0x00ff00.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_YELLOW  =  <SGR[103]>
Set background color to 0xffff00.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_BLUE  =  <SGR[104]>
Set background color to 0x0000ff.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_MAGENTA  =  <SGR[105]>
Set background color to 0xff00ff.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_CYAN  =  <SGR[106]>
Set background color to 0x00ffff.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_WHITE  =  <SGR[107]>
Set background color to 0xffffff.
.UNINDENT
.INDENT 7.0
.TP
.B HYPERLINK  =  <OSC[8]>
Create a hyperlink in the text \fI(supported by limited amount of terminals)\fP\&.
Note that for a working hyperlink you\(aqll need two sequences, not just one.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%make_hyperlink_part()\fP and \fI\%assemble_hyperlink()\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.get_closing_seq(opening_seq)
.INDENT 7.0
.TP
.B Parameters
\fBopening_seq\fP (\fI\%SequenceSGR\fP) \-\- 
.TP
.B Returns

.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.enclose(opening_seq, string)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBopening_seq\fP (\fI\%SequenceSGR\fP) \-\- 
.IP \(bu 2
\fBstring\fP (\fIstr\fP) \-\- 
.UNINDENT
.TP
.B Returns

.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_set_cursor_x_abs(x=1)
Create CHA sequence that sets
cursor horizontal position, or column, to \fBx\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBx\fP (\fIint\fP) \-\- New cursor horizontal position.
.TP
.B Example
\fBESC [1G\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_erase_in_line(mode=0)
Create EL sequence that erases a part of the line
or the entire line. Cursor position does not change.
.INDENT 7.0
.TP
.B Parameters
\fBmode\fP (\fIint\fP) \-\- 
.sp
Sequence operating mode.
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
If set to 0, clear from cursor to the end of the line.
.IP \(bu 2
If set to 1, clear from cursor to beginning of the line.
.IP \(bu 2
If set to 2, clear the entire line.
.UNINDENT
.UNINDENT
.UNINDENT

.TP
.B Example
\fBESC [0K\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_query_cursor_position()
Create QCP sequence that requests an output
device to respond with a structure containing current cursor coordinates
(\fI\%RCP\fP).
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
Sending this sequence to the terminal may \fBblock\fP infinitely. Consider
using a thread or set a timeout for the main thread using a signal.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Example
\fBESC [6n\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.decompose_request_cursor_position(string)
Parse RCP sequence that generally comes from
a terminal as a response to \fI\%QCP\fP sequence and
contains a cursor\(aqs current row and column.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
As the library in general provides sequence assembling methods, but not
the disassembling ones, there is no dedicated class for RCP sequences yet.
.UNINDENT
.UNINDENT
.sp
.nf
.ft C
>>> decompose_request_cursor_position(\(aq[18;2R\(aq)
(18, 2)
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
\fBstring\fP (\fIstr\fP) \-\- Terminal response with a sequence.
.TP
.B Returns
Current row and column if the expected sequence exists
in \fBstring\fP, \fINone\fP otherwise.
.TP
.B Return type
t.Tuple[int, int] | None
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_color_256(code, bg=False)
Wrapper for creation of \fI\%SequenceSGR\fP that sets foreground
(or background) to one of 256\-color palette value.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcode\fP (\fIint\fP) \-\- Index of the color in the palette, 0 \-\- 255.
.IP \(bu 2
\fBbg\fP (\fIbool\fP) \-\- Set to \fITrue\fP to change the background color
(default is foreground).
.UNINDENT
.TP
.B Example
\fBESC [38;5;141m\fP
.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_color_rgb(r, g, b, bg=False)
Wrapper for creation of \fI\%SequenceSGR\fP operating in True Color mode (16M).
Valid values for \fBr\fP, \fBg\fP and \fBb\fP are in range of [0; 255]. This range
linearly translates into [0x00; 0xFF] for each channel. The result
value is composed as \(dq0xRRGGBB\(dq. For example, sequence with color of
0xFF3300 can be created with:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
make_color_rgb(255, 51, 0)
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBr\fP (\fIint\fP) \-\- Red channel value, 0 \-\- 255.
.IP \(bu 2
\fBg\fP (\fIint\fP) \-\- Blue channel value, 0 \-\- 255.
.IP \(bu 2
\fBb\fP (\fIint\fP) \-\- Green channel value, 0 \-\- 255.
.IP \(bu 2
\fBbg\fP (\fIbool\fP) \-\- Set to \fITrue\fP to change the background color (default is foreground).
.UNINDENT
.TP
.B Example
\fBESC [38;2;255;51;0m\fP
.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_hyperlink_part(url=None)
.INDENT 7.0
.TP
.B Parameters
\fBurl\fP (\fIOptional\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- 
.TP
.B Example
\fBESC ]8;;http://localhost ESC \e\fP
.TP
.B Return type
\fI\%SequenceOSC\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.assemble_hyperlink(url, label=None)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBurl\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBlabel\fP (\fIOptional\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- 
.UNINDENT
.TP
.B Example
\fBESC ]8;;http://localhost ESC \eText ESC ]8;; ESC \e\fP
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.SS pytermor.color
.sp
Module Attributes
.TS
center;
|l|l|.
_
T{
\fI\%CT\fP
T}	T{
Any non\-abstract \fBColor\fP type.
T}
_
T{
\fI\%NOOP_COLOR\fP
T}	T{
Special \fBColor\fP instance always rendering into empty string.
T}
_
.TE
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fI\%approximate\fP(hex_value[, color_type, max_results])
T}	T{
Search for nearest to \fBhex_value\fP colors of specified \fBcolor_type\fP and return the first \fBmax_results\fP of them.
T}
_
T{
\fI\%find_closest\fP(hex_value[, color_type])
T}	T{
Search and return nearest to \fBhex_value\fP instance of specified \fBcolor_type\fP\&.
T}
_
T{
\fI\%hex_to_hsv\fP(hex_value)
T}	T{
Transforms \fBhex_value\fP in 0xFFFFFF format into a tuple of three numbers corresponding to \fBhue\fP, \fBsaturation\fP and \fBvalue\fP channel values respectively.
T}
_
T{
\fI\%hex_to_rgb\fP(hex_value)
T}	T{
Transforms \fBhex_value\fP in 0xFFFFFF format into a tuple of three integers corresponding to \fBred\fP, \fBblue\fP and \fBgreen\fP channel value respectively.
T}
_
T{
\fI\%hsv_to_hex\fP(h, s, v)
T}	T{
Transforms HSV value in three\-floats form (where 0 <= h < 360, 0 <= s <= 1, and 0 <= v <= 1) into an one\-integer form 0xFFFFFF.
T}
_
T{
\fI\%hsv_to_rgb\fP(h, s, v)
T}	T{
Transforms HSV value in three\-floats form (where 0 <= h < 360, 0 <= s <= 1, and 0 <= v <= 1) into RGB three\-integer form ([0; 255], [0; 255], [0; 255]).
T}
_
T{
\fI\%resolve\fP(subject[, color_type])
T}	T{
Case\-insensitive search through registry contents.
T}
_
T{
\fI\%rgb_to_hex\fP(r, g, b)
T}	T{
Transforms RGB value in a three\-integers form ([0; 255], [0; 255], [0; 255]) to an one\-integer form 0xFFFFFF.
T}
_
T{
\fI\%rgb_to_hsv\fP(r, g, b)
T}	T{
Transforms RGB value in a three\-integers form ([0; 255], [0; 255], [0; 255]) to an HSV in three\-floats form such as (0 <= h < 360, 0 <= s <= 1, and 0 <= v <= 1).
T}
_
.TE
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%ApxResult\fP(color, distance)
T}	T{
Approximation result.
T}
_
T{
\fI\%Color16\fP(*args, **kwargs)
T}	T{
This variant of a \fBColor\fP operates within the most basic color set \-\- \fBXterm\-16\fP\&.
T}
_
T{
\fI\%Color256\fP(*args, **kwargs)
T}	T{
This variant of a \fBColor\fP operates within relatively modern \fBXterm\-256\fP indexed color table.
T}
_
T{
\fI\%ColorRGB\fP(*args, **kwargs)
T}	T{
This variant of a \fBColor\fP operates within \fBPytermor Named Colors\fP, unique collection of colors compiled from several known sources after careful selection (see \fI\%Named Colors collection\fP).
T}
_
T{
\fBIColor\fP(*args, **kwargs)
T}	T{
Abstract superclass for other \fBColors\fP\&.
T}
_
.TE
.sp
Exceptions
.TS
center;
|l|l|.
_
T{
\fI\%ColorCodeConflictError\fP(code, existing_color, ...)
T}	T{
T}
_
T{
\fI\%ColorNameConflictError\fP(tokens, ...)
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B pytermor.color.CT
Any non\-abstract \fBColor\fP type.
.INDENT 7.0
.UNINDENT
.sp
alias of TypeVar(\(aqCT\(aq, Color16, Color256, ColorRGB)
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.color.ApxResult(color, distance)
Bases: \fBGeneric\fP[\fI\%CT\fP]
.sp
Approximation result.
.INDENT 7.0
.TP
.B color:  CT
Found \fBColor\fP instance.
.UNINDENT
.INDENT 7.0
.TP
.B distance:  int
Squared sRGB distance from this instance to the approximation target.
.UNINDENT
.INDENT 7.0
.TP
.B property  distance_real:  float
Actual distance from instance to target:
.sp
.ce
distance_{real} = \esqrt{distance}
.ce 0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.color.Color16(*args, **kwargs)
Bases: \fBIColor\fP
.sp
This variant of a \fBColor\fP operates within the most basic color set
\-\- \fBXterm\-16\fP\&. Represents basic color\-setting SGRs with primary codes
30\-37, 40\-47, 90\-97 and 100\-107 (see \fI\%Color16 presets\fP).
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Arguments \fBregister\fP, \fBindex\fP and \fBaliases\fP
are \fIkwonly\fP\-type args.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP \-\- Color RGB value, e.g. 0x800000.
.IP \(bu 2
\fBcode_fg\fP \-\- Int code for a foreground color setup, e.g. 30.
.IP \(bu 2
\fBcode_bg\fP \-\- Int code for a background color setup. e.g. 40.
.IP \(bu 2
\fBname\fP \-\- Name of the color, e.g. \(dqred\(dq.
.IP \(bu 2
\fBregister\fP \-\- If \fITrue\fP, add color to registry for resolving by name.
.IP \(bu 2
\fBindex\fP \-\- If \fITrue\fP, add color to approximation index.
.IP \(bu 2
\fBaliases\fP \-\- Alternative color names (used in \fI\%resolve()\fP).
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  code_fg:  int
Int code for a foreground color setup, e.g. 30.
.UNINDENT
.INDENT 7.0
.TP
.B property  code_bg:  int
Int code for a background color setup. e.g. 40.
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  get_by_code(code)
Get a \fI\%Color16\fP instance with specified code. Only \fIforeground\fP (=text) colors
are indexed, therefore it is impossible to look up for a \fI\%Color16\fP with
given background color.
.INDENT 7.0
.TP
.B Parameters
\fBcode\fP (\fIint\fP) \-\- Foreground integer code to look up for (see
\fI\%Color16 presets\fP).
.TP
.B Raises
\fBKeyError\fP \-\- If no color with specified code is found.
.TP
.B Return type
\fI\%Color16\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_sgr(bg, upper_bound=None)
Make an \fI\%SGR sequence\fP out of \fBColor\fP\&. Used by \fI\%SgrRenderer\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbg\fP (\fIbool\fP) \-\- Set to \fITrue\fP if required SGR should change the background color, or
\fIFalse\fP for the foreground (=text) color.
.IP \(bu 2
\fBupper_bound\fP (\fIOptional\fP\fI[\fP\fIType\fP\fI[\fP\fIIColor\fP\fI]\fP\fI]\fP) \-\- Required result \fBColor\fP type upper boundary, i.e., the
maximum acceptable color class, which will be the basis for
SGR being made. See \fI\%Color256.to_sgr()\fP for the details.
.UNINDENT
.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_tmux(bg)
Make a tmux markup directive, which will change the output color to
this color\(aqs value (after tmux processes and prints it). Used by \fI\%TmuxRenderer\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBbg\fP (\fIbool\fP) \-\- Set to \fITrue\fP if required tmux directive should change the background
color, or \fIFalse\fP for the foreground (=text) color.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  approximate(hex_value, max_results=1)
Search for the colors nearest to \fBhex_value\fP and return the first \fBmax_results\fP\&.
.INDENT 7.0
.TP
.B See
\fI\%color.approximate()\fP for the details
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP (\fIint\fP) \-\- Target RGB value.
.IP \(bu 2
\fBmax_results\fP (\fIint\fP) \-\- Result limit.
.UNINDENT
.TP
.B Return type
\fIList\fP[\fI\%ApxResult\fP[\fICT\fP]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  find_closest(hex_value)
Search and return nearest to \fBhex_value\fP color instance.
.INDENT 7.0
.TP
.B See
\fI\%color.find_closest()\fP for the details
.TP
.B Parameters
\fBhex_value\fP (\fIint\fP) \-\- Target RGB value.
.TP
.B Return type
\fICT\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B format_value(prefix=\(aq0x\(aq)
Format color value as \(dq0xFFFFFF\(dq.
.INDENT 7.0
.TP
.B Parameters
\fBprefix\fP (\fIstr\fP) \-\- Can be customized.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  hex_value:  int
Color value, e.g. 0x3AEB0C.
.UNINDENT
.INDENT 7.0
.TP
.B property  name:  str  |  None
Color name, e.g. \(dqnavy\-blue\(dq.
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  resolve(name)
Case\-insensitive search through registry contents.
.INDENT 7.0
.TP
.B See
\fI\%color.resolve()\fP for the details
.TP
.B Parameters
\fBname\fP (\fIstr\fP) \-\- \fBColor\fP name to search for.
.TP
.B Return type
\fICT\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_hsv()
Wrapper around \fI\%hex_to_hsv()\fP for concrete instance.
.INDENT 7.0
.TP
.B See
hex_to_hsv() for the details
.TP
.B Return type
\fITuple\fP[float, float, float]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_rgb()
Wrapper around \fI\%to_rgb()\fP for concrete instance.
.INDENT 7.0
.TP
.B See
to_rgb() for the details
.TP
.B Return type
\fITuple\fP[int, int, int]
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.color.Color256(*args, **kwargs)
Bases: \fBIColor\fP
.sp
This variant of a \fBColor\fP operates within relatively modern \fBXterm\-256\fP
indexed color table. Represents SGR complex codes \fB38;5;*\fP and \fB48;5;*\fP
(see \fI\%Color256 presets\fP).
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Arguments \fBregister\fP, \fBindex\fP, \fBaliases\fP and \fBcolor16_equiv\fP
are \fIkwonly\fP\-type args.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP \-\- Color RGB value, e.g. 0x5f0000.
.IP \(bu 2
\fBcode\fP \-\- Int code for a color setup, e.g. 52.
.IP \(bu 2
\fBname\fP \-\- Name of the color, e.g. \(dqdark\-red\(dq.
.IP \(bu 2
\fBregister\fP \-\- If \fITrue\fP, add color to registry for resolving by name.
.IP \(bu 2
\fBindex\fP \-\- If \fITrue\fP, add color to approximation index.
.IP \(bu 2
\fBaliases\fP \-\- Alternative color names (used in \fI\%resolve()\fP).
.IP \(bu 2
\fBcolor16_equiv\fP \-\- \fI\%Color16\fP counterpart (applies only to codes 0\-15).
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_sgr(bg, upper_bound=None)
Make an \fI\%SGR sequence\fP out of \fBColor\fP\&. Used by \fI\%SgrRenderer\fP\&.
.sp
Each \fBColor\fP type represents one SGR type in the context of colors. For
example, if \fBupper_bound\fP is set to \fI\%Color16\fP, the resulting SGR will always
be one of 16\-color index table, even if the original color was of different
type \-\- it will be approximated just before the SGR assembling.
.sp
The reason for this is the necessity to provide a similar look for all users
with different terminal settings/ capabilities. When the library sees that
user\(aqs output device supports 256 colors only, it cannot assemble True Color
SGRs, because they will be ignored (if we are lucky), or displayed in a
glitchy way, or mess up the output completely. The good news is that the
process is automatic and in most cases the library will manage the
transformations by itself. If it\(aqs not the case, the developer can correct the
behaviour by overriding the renderers\(aq output mode. See \fI\%SgrRenderer\fP and
\fI\%OutputMode\fP docs.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbg\fP (\fIbool\fP) \-\- Set to \fITrue\fP if required SGR should change the background color, or
\fIFalse\fP for the foreground (=text) color.
.IP \(bu 2
\fBupper_bound\fP (\fIOptional\fP\fI[\fP\fIType\fP\fI[\fP\fIIColor\fP\fI]\fP\fI]\fP) \-\- Required result \fBColor\fP type upper boundary, i.e., the
maximum acceptable color class, which will be the basis for
SGR being made.
.UNINDENT
.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_tmux(bg)
Make a tmux markup directive, which will change the output color to
this color\(aqs value (after tmux processes and prints it). Used by \fI\%TmuxRenderer\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBbg\fP (\fIbool\fP) \-\- Set to \fITrue\fP if required tmux directive should change the background
color, or \fIFalse\fP for the foreground (=text) color.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  code:  int
Int code for a color setup, e.g. 52.
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  get_by_code(code)
Get a \fI\%Color256\fP instance with specified code (=position in the index).
.INDENT 7.0
.TP
.B Parameters
\fBcode\fP (\fIint\fP) \-\- Color code to look up for (see \fI\%Color256 presets\fP).
.TP
.B Raises
\fBKeyError\fP \-\- If no color with specified code is found.
.TP
.B Return type
\fI\%Color256\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  approximate(hex_value, max_results=1)
Search for the colors nearest to \fBhex_value\fP and return the first \fBmax_results\fP\&.
.INDENT 7.0
.TP
.B See
\fI\%color.approximate()\fP for the details
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP (\fIint\fP) \-\- Target RGB value.
.IP \(bu 2
\fBmax_results\fP (\fIint\fP) \-\- Result limit.
.UNINDENT
.TP
.B Return type
\fIList\fP[\fI\%ApxResult\fP[\fICT\fP]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  find_closest(hex_value)
Search and return nearest to \fBhex_value\fP color instance.
.INDENT 7.0
.TP
.B See
\fI\%color.find_closest()\fP for the details
.TP
.B Parameters
\fBhex_value\fP (\fIint\fP) \-\- Target RGB value.
.TP
.B Return type
\fICT\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B format_value(prefix=\(aq0x\(aq)
Format color value as \(dq0xFFFFFF\(dq.
.INDENT 7.0
.TP
.B Parameters
\fBprefix\fP (\fIstr\fP) \-\- Can be customized.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  hex_value:  int
Color value, e.g. 0x3AEB0C.
.UNINDENT
.INDENT 7.0
.TP
.B property  name:  str  |  None
Color name, e.g. \(dqnavy\-blue\(dq.
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  resolve(name)
Case\-insensitive search through registry contents.
.INDENT 7.0
.TP
.B See
\fI\%color.resolve()\fP for the details
.TP
.B Parameters
\fBname\fP (\fIstr\fP) \-\- \fBColor\fP name to search for.
.TP
.B Return type
\fICT\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_hsv()
Wrapper around \fI\%hex_to_hsv()\fP for concrete instance.
.INDENT 7.0
.TP
.B See
hex_to_hsv() for the details
.TP
.B Return type
\fITuple\fP[float, float, float]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_rgb()
Wrapper around \fI\%to_rgb()\fP for concrete instance.
.INDENT 7.0
.TP
.B See
to_rgb() for the details
.TP
.B Return type
\fITuple\fP[int, int, int]
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.color.ColorRGB(*args, **kwargs)
Bases: \fBIColor\fP
.sp
This variant of a \fBColor\fP operates within \fBPytermor Named Colors\fP,
unique collection of colors compiled from several known sources after careful
selection (see \fI\%Named Colors collection\fP). However, it\(aqs not limited to aforementioned
color list and can be easily extended.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Arguments \fBregister\fP, \fBindex\fP, \fBaliases\fP and \fBvariation_map\fP
are \fIkwonly\fP\-type args.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP \-\- Color RGB value, e.g. 0x73a9c2.
.IP \(bu 2
\fBname\fP \-\- Name of the color, e.g. \(dqmoonstone\-blue\(dq.
.IP \(bu 2
\fBregister\fP \-\- If \fITrue\fP, add color to registry for resolving by name.
.IP \(bu 2
\fBindex\fP \-\- If \fITrue\fP, add color to approximation index.
.IP \(bu 2
\fBaliases\fP \-\- Alternative color names (used in \fI\%resolve()\fP).
.IP \(bu 2
\fBvariation_map\fP \-\- Mapping {\fIint\fP: \fIstr\fP}, where keys are hex values,
and values are variation names.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_sgr(bg, upper_bound=None)
Make an \fI\%SGR sequence\fP out of \fBColor\fP\&. Used by \fI\%SgrRenderer\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbg\fP (\fIbool\fP) \-\- Set to \fITrue\fP if required SGR should change the background color, or
\fIFalse\fP for the foreground (=text) color.
.IP \(bu 2
\fBupper_bound\fP (\fIOptional\fP\fI[\fP\fIType\fP\fI[\fP\fIIColor\fP\fI]\fP\fI]\fP) \-\- Required result \fBColor\fP type upper boundary, i.e., the
maximum acceptable color class, which will be the basis for
SGR being made. See \fI\%Color256.to_sgr()\fP for the details.
.UNINDENT
.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_tmux(bg)
Make a tmux markup directive, which will change the output color to
this color\(aqs value (after tmux processes and prints it). Used by \fI\%TmuxRenderer\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBbg\fP (\fIbool\fP) \-\- Set to \fITrue\fP if required tmux directive should change the background
color, or \fIFalse\fP for the foreground (=text) color.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  base:  CT  |  None
Parent color for color variations. Empty for regular colors.
.UNINDENT
.INDENT 7.0
.TP
.B property  variations:  Dict[str,  CT]
List of color variations. \fIVariation\fP of a color is a similar color with
almost the same name, but with differing suffix. The main idea of variations
is to provide a basis for fuzzy searching, which will return several results
for one query; i.e., when the query matches a color with variations, the whole
color family can be considered a match, which should increase searching speed.
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  approximate(hex_value, max_results=1)
Search for the colors nearest to \fBhex_value\fP and return the first \fBmax_results\fP\&.
.INDENT 7.0
.TP
.B See
\fI\%color.approximate()\fP for the details
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP (\fIint\fP) \-\- Target RGB value.
.IP \(bu 2
\fBmax_results\fP (\fIint\fP) \-\- Result limit.
.UNINDENT
.TP
.B Return type
\fIList\fP[\fI\%ApxResult\fP[\fICT\fP]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  find_closest(hex_value)
Search and return nearest to \fBhex_value\fP color instance.
.INDENT 7.0
.TP
.B See
\fI\%color.find_closest()\fP for the details
.TP
.B Parameters
\fBhex_value\fP (\fIint\fP) \-\- Target RGB value.
.TP
.B Return type
\fICT\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B format_value(prefix=\(aq0x\(aq)
Format color value as \(dq0xFFFFFF\(dq.
.INDENT 7.0
.TP
.B Parameters
\fBprefix\fP (\fIstr\fP) \-\- Can be customized.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  hex_value:  int
Color value, e.g. 0x3AEB0C.
.UNINDENT
.INDENT 7.0
.TP
.B property  name:  str  |  None
Color name, e.g. \(dqnavy\-blue\(dq.
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  resolve(name)
Case\-insensitive search through registry contents.
.INDENT 7.0
.TP
.B See
\fI\%color.resolve()\fP for the details
.TP
.B Parameters
\fBname\fP (\fIstr\fP) \-\- \fBColor\fP name to search for.
.TP
.B Return type
\fICT\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_hsv()
Wrapper around \fI\%hex_to_hsv()\fP for concrete instance.
.INDENT 7.0
.TP
.B See
hex_to_hsv() for the details
.TP
.B Return type
\fITuple\fP[float, float, float]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_rgb()
Wrapper around \fI\%to_rgb()\fP for concrete instance.
.INDENT 7.0
.TP
.B See
to_rgb() for the details
.TP
.B Return type
\fITuple\fP[int, int, int]
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.color.NOOP_COLOR  =  <_NoopColor[NOP]>
Special \fBColor\fP instance always rendering into empty string.
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.color.resolve(subject, color_type=None)
Case\-insensitive search through registry contents. Search is performed for
\fBColor\fP instance named as specified in \fBsubject\fP argument, and of specified
\fBcolor_type\fP, or for any type if argument is omitted: first it will be performed
in the registry of \fI\%Color16\fP class, then \-\- in \fI\%Color256\fP, and, if previous two
were unsuccessful, in the largest \fI\%ColorRGB\fP registry. Therefore, the return value
could be any of these types:
.sp
.nf
.ft C
>>> resolve(\(aqred\(aq)
<Color16[#31,800000?,red]>
.ft P
.fi
.sp
If \fBcolor_type\fP is \fI\%ColorRGB\fP or if it is omitted, there is one more way
to specify a color: in form of a hexadecimal value \(dq#RRGGBB\(dq (or in short form, as
\(dq#RGB\(dq), as well as just use an \fIint\fP in [0x0; 0xFFFFFF] range. In this case no
actual searching is performed, and a new nameless instance of \fI\%ColorRGB\fP is
created and returned.
.sp
.nf
.ft C
>>> resolve(\(dq#333\(dq)
<ColorRGB[333333]>
>>> resolve(0xfafef0)
<ColorRGB[FAFEF0]>
.ft P
.fi
.sp
Color names are stored in registries as tokens, which allows to use any form of
input and get the correct result regardless. The only requirement is to split the
words in any matter, so that tokenizer could distinguish the words from each other:
.sp
.nf
.ft C
>>> resolve(\(aqdeep\-sky\-blue\-7\(aq)
<Color256[#23,005F5F,deep\-sky\-blue\-7]>
>>> resolve(\(aqDEEP_SKY_BLUE_7\(aq)
<Color256[#23,005F5F,deep\-sky\-blue\-7]>
>>> resolve(\(aqDeepSkyBlue7\(aq)
<Color256[#23,005F5F,deep\-sky\-blue\-7]>
.ft P
.fi
.sp
.nf
.ft C
>>> resolve(\(aqdeepskyblue7\(aq)
Traceback (most recent call last):
LookupError: Color \(aqdeepskyblue7\(aq was not found in any of registries
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsubject\fP (\fIstr\fP\fI | \fP\fIint\fP) \-\- \fBColor\fP name or hex value to search for.
.IP \(bu 2
\fBcolor_type\fP (\fIt.Type\fP\fI[\fP\fICT\fP\fI]\fP) \-\- Target color type (\fI\%Color16\fP, \fI\%Color256\fP or \fI\%ColorRGB\fP).
.UNINDENT
.TP
.B Raises
\fBLookupError\fP \-\- If nothing was found in either of registries.
.TP
.B Returns
\fBColor\fP instance with specified name or value.
.TP
.B Return type
CT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.color.find_closest(hex_value, color_type=None)
Search and return nearest to \fBhex_value\fP instance of specified \fBcolor_type\fP\&.
If \fBcolor_type\fP is omitted, search for the closest \fI\%Color256\fP element.
.sp
Method is useful for finding applicable color alternatives if user\(aqs
terminal is incapable of operating in more advanced mode. Usually it is
done by the library automatically and transparently for both the developer
and the end\-user.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This method caches the results, i.e., the same search query will from then
onward result in the same return value without the necessity of iterating
through the color index. If that\(aqs not applicable, use similar method
\fI\%approximate()\fP, which is unaware of caching mechanism altogether.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP (\fIint\fP) \-\- Target color RGB value.
.IP \(bu 2
\fBcolor_type\fP (\fIOptional\fP\fI[\fP\fIType\fP\fI[\fP\fICT\fP\fI]\fP\fI]\fP) \-\- Target color type (\fI\%Color16\fP, \fI\%Color256\fP or \fI\%ColorRGB\fP).
.UNINDENT
.TP
.B Returns
Nearest to \fBhex_value\fP color instance of specified type.
.TP
.B Return type
\fICT\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.color.approximate(hex_value, color_type=None, max_results=1)
Search for nearest to \fBhex_value\fP colors of specified \fBcolor_type\fP and
return the first \fBmax_results\fP of them. If \fBcolor_type\fP is omitted, search
for the closest \fI\%Color256\fP elements. This method is similar to the
\fI\%find_closest()\fP, although they differ in some aspects:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%approximate()\fP can return more than one result;
.IP \(bu 2
\fI\%approximate()\fP returns not just a \fBColor\fP instance(s), but also a
number equal to squared distance to the target color for each of them;
.IP \(bu 2
\fI\%find_closest()\fP caches the results, while \fI\%approximate()\fP ignores
the cache completely.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP (\fIint\fP) \-\- Target color RGB value.
.IP \(bu 2
\fBcolor_type\fP (\fIOptional\fP\fI[\fP\fIType\fP\fI[\fP\fICT\fP\fI]\fP\fI]\fP) \-\- Target color type (\fI\%Color16\fP, \fI\%Color256\fP or \fI\%ColorRGB\fP).
.IP \(bu 2
\fBmax_results\fP (\fIint\fP) \-\- Return no more than \fBmax_results\fP items.
.UNINDENT
.TP
.B Returns
Pairs of closest \fBColor\fP instance(s) found with their distances
to the target color, sorted by distance descending, i.e., element
at index 0 is the closest color found, paired with its distance
to the target; element with index 1 is second\-closest color
(if any) and corresponding distance value, etc.
.TP
.B Return type
\fIList\fP[\fI\%ApxResult\fP[\fICT\fP]]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.color.hex_to_rgb(hex_value)
Transforms \fBhex_value\fP in 0xFFFFFF format into a tuple of three
integers corresponding to \fBred\fP, \fBblue\fP and \fBgreen\fP channel value
respectively. Values are within [0; 255] range.
.sp
.nf
.ft C
>>> hex_to_rgb(0x80ff80)
(128, 255, 128)
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
\fBhex_value\fP (\fIint\fP) \-\- RGB value.
.TP
.B Returns
R, G, B channel values correspondingly.
.TP
.B Return type
\fITuple\fP[int, int, int]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.color.rgb_to_hex(r, g, b)
Transforms RGB value in a three\-integers form ([0; 255], [0; 255], [0; 255])
to an one\-integer form 0xFFFFFF.
.sp
.nf
.ft C
>>> hex(rgb_to_hex(0, 128, 0))
\(aq0x8000\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBr\fP (\fIint\fP) \-\- value of red channel.
.IP \(bu 2
\fBg\fP (\fIint\fP) \-\- value of green channel.
.IP \(bu 2
\fBb\fP (\fIint\fP) \-\- value of blue channel.
.UNINDENT
.TP
.B Returns
RGB value.
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.color.hsv_to_rgb(h, s, v)
Transforms HSV value in three\-floats form (where 0 <= h < 360, 0 <= s <= 1,
and 0 <= v <= 1) into RGB three\-integer form ([0; 255], [0; 255], [0; 255]).
.sp
.nf
.ft C
>>> hsv_to_rgb(270, 2/3, 0.75)
(128, 64, 192)
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBh\fP (\fIfloat\fP) \-\- hue channel value.
.IP \(bu 2
\fBs\fP (\fIfloat\fP) \-\- saturation channel value.
.IP \(bu 2
\fBv\fP (\fIfloat\fP) \-\- value channel value.
.UNINDENT
.TP
.B Returns
R, G, B channel values correspondingly.
.TP
.B Return type
\fITuple\fP[int, int, int]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.color.rgb_to_hsv(r, g, b)
Transforms RGB value in a three\-integers form ([0; 255], [0; 255], [0; 255]) to an
HSV in three\-floats form such as (0 <= h < 360, 0 <= s <= 1, and 0 <= v <= 1).
.sp
.nf
.ft C
>>> rgb_to_hsv(0, 0, 255)
(240.0, 1.0, 1.0)
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBr\fP (\fIint\fP) \-\- value of red channel.
.IP \(bu 2
\fBg\fP (\fIint\fP) \-\- value of green channel.
.IP \(bu 2
\fBb\fP (\fIint\fP) \-\- value of blue channel.
.UNINDENT
.TP
.B Returns
H, S, V channel values correspondingly.
.TP
.B Return type
\fITuple\fP[float, float, float]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.color.hex_to_hsv(hex_value)
Transforms \fBhex_value\fP in 0xFFFFFF format into a tuple of three numbers
corresponding to \fBhue\fP, \fBsaturation\fP and \fBvalue\fP channel values respectively.
Hue is within [0, 359] range, both saturation and value are within [0; 1] range.
.sp
.nf
.ft C
>>> hex_to_hsv(0x999999)
(0, 0.0, 0.6)
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
\fBhex_value\fP (\fIint\fP) \-\- RGB value.
.TP
.B Returns
H, S, V channel values correspondingly.
.TP
.B Return type
\fITuple\fP[float, float, float]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.color.hsv_to_hex(h, s, v)
Transforms HSV value in three\-floats form (where 0 <= h < 360, 0 <= s <= 1,
and 0 <= v <= 1) into an one\-integer form 0xFFFFFF.
.sp
.nf
.ft C
>>> hex(hsv_to_hex(90, 0.5, 0.5))
\(aq0x608040\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBh\fP (\fIfloat\fP) \-\- hue channel value.
.IP \(bu 2
\fBs\fP (\fIfloat\fP) \-\- saturation channel value.
.IP \(bu 2
\fBv\fP (\fIfloat\fP) \-\- value channel value.
.UNINDENT
.TP
.B Returns
RGB value.
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B exception  pytermor.color.ColorNameConflictError(tokens, existing_color, new_color)
Bases: \fBException\fP
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B with_traceback()
Exception.with_traceback(tb) \-\-
set self.__traceback__ to tb and return self.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B exception  pytermor.color.ColorCodeConflictError(code, existing_color, new_color)
Bases: \fBException\fP
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B with_traceback()
Exception.with_traceback(tb) \-\-
set self.__traceback__ to tb and return self.
.UNINDENT
.UNINDENT
.SS pytermor.common
.sp
Module Attributes
.TS
center;
|l|l|.
_
T{
\fI\%RT\fP
T}	T{
E
T}
_
T{
\fI\%CRT\fP
T}	T{
\fI\%CRT\fP in a method signature usually means that regular strings as well as  IRenderable\(ga implementations are supported, can be intermixed, and:
T}
_
.TE
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%Align\fP(value)
T}	T{
Align type for \fI\%FixedString\fP enum.
T}
_
.TE
.sp
Exceptions
.TS
center;
|l|l|.
_
T{
\fBArgCountError\fP(actual, *expected)
T}	T{
T}
_
T{
\fBArgTypeError\fP(actual_type[, arg_name, fn])
T}	T{
T}
_
T{
\fI\%ConflictError\fP
T}	T{
T}
_
T{
\fI\%LogicError\fP
T}	T{
T}
_
T{
\fI\%UserAbort\fP
T}	T{
T}
_
T{
\fI\%UserCancel\fP
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B pytermor.common.RT
E
.sp
alias of TypeVar(\(aqRT\(aq, bound=\fBUnion\fP[\fBstr\fP, \fBIRenderable\fP])
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.common.CRT
\fI\%CRT\fP in a method signature usually means that regular strings as well as 
IRenderable\(ga implementations are supported, can be intermixed, and:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
return type will be \fIstr\fP if and only if the type of all arguments is \fIstr\fP;
.IP \(bu 2
otherwise return type will be \fI\%Text\fP \-\- \fIstr\fP arguments, if any, will
be transformed into IRenderable\(ga and concatenated. \fI\%Text\fP type is used because
it\(aqs the only IRenderable\(ga that is mutable.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
alias of TypeVar(\(aqCRT\(aq, bound=\fBUnion\fP[\fBstr\fP, \fBIRenderable\fP])
.UNINDENT
.INDENT 0.0
.TP
.B exception  pytermor.common.UserCancel
Bases: \fBException\fP
.INDENT 7.0
.TP
.B with_traceback()
Exception.with_traceback(tb) \-\-
set self.__traceback__ to tb and return self.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B exception  pytermor.common.UserAbort
Bases: \fBException\fP
.INDENT 7.0
.TP
.B with_traceback()
Exception.with_traceback(tb) \-\-
set self.__traceback__ to tb and return self.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B exception  pytermor.common.LogicError
Bases: \fBException\fP
.INDENT 7.0
.TP
.B with_traceback()
Exception.with_traceback(tb) \-\-
set self.__traceback__ to tb and return self.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B exception  pytermor.common.ConflictError
Bases: \fBException\fP
.INDENT 7.0
.TP
.B with_traceback()
Exception.with_traceback(tb) \-\-
set self.__traceback__ to tb and return self.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.common.Align(value)
Bases: \fBstr\fP, \fBEnum\fP
.sp
Align type for \fI\%FixedString\fP enum.
.INDENT 7.0
.TP
.B LEFT  =  \(aq<\(aq
.UNINDENT
.INDENT 7.0
.TP
.B RIGHT  =  \(aq>\(aq
.UNINDENT
.INDENT 7.0
.TP
.B CENTER  =  \(aq^\(aq
.UNINDENT
.UNINDENT
.SS pytermor.cval
.sp
Color preset list.
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%CVAL\fP()
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B class  pytermor.cval.CVAL
.UNINDENT
.SS pytermor.renderer
.sp
Module with output formatters. Default global renderer type is \fI\%SgrRenderer\fP\&.
.sp
Setting up a rendering mode can be accomplished in several ways:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP a. 3
By using general\-purpose functions \fI\%text.render()\fP and \fI\%text.echo()\fP \-\-
both have an argument \fBrenderer\fP (preferrable; introduced in \fBpytermor 2.x\fP).
.IP b. 3
Method \fI\%RendererManager.set_default()\fP sets the default renderer globally.
After that calling \fI\%text.render()\fP will automatically invoke a said renderer
and apply the required formatting (that is, if \fBrenderer\fP argument is
left empty).
.IP c. 3
Alternatively, you can use renderer\(aqs own instance method \fBrender()\fP
directly and avoid messing up with the manager: \fI\%HtmlRenderer.render()\fP
(not recommended and possibly will be deprecated in future versions).
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Generally speaking, if you need to invoke a custom renderer just once, it\(aqs
convenient to use the first method for this matter, and use the second one
in all the other cases.
.sp
On the contrary, if there is a necessity to use more than one renderer
alternatingly, it\(aqs better to avoid using the global one at all, and just
instantiate and invoke both renderers independently.
.sp
TL;DR
.sp
To unconditionally print formatted message to standard output, do something like
this:
.sp
.nf
.ft C
>>> from pytermor import render, RendererManager, Styles
>>> RendererManager.set_default_format_always()
>>> render(\(aqWarning: AAAA\(aq, Styles.WARNING)
\(aq[33mWarning: AAAA[39m\(aq
.ft P
.fi
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%HtmlRenderer\fP()
T}	T{
Translate \fI\%Styles\fP attributes into a rudimentary HTML markup.
T}
_
T{
\fI\%IRenderer\fP()
T}	T{
Renderer interface.
T}
_
T{
\fI\%NoOpRenderer\fP()
T}	T{
Special renderer type that does nothing with the input string and just returns it as is.
T}
_
T{
\fI\%OutputMode\fP(value)
T}	T{
Determines what types of SGR sequences are allowed to use in the output.
T}
_
T{
\fI\%RendererManager\fP()
T}	T{
Class for global renderer setup.
T}
_
T{
\fI\%SgrRenderer\fP([output_mode, io])
T}	T{
Default renderer invoked by \fBText.render()\fP\&.
T}
_
T{
\fI\%SgrRendererDebugger\fP([output_mode])
T}	T{
Subclass of regular \fI\%SgrRenderer\fP with two differences \-\- instead of rendering the proper ANSI escape sequences it renders them with \fBESC\fP character replaced by \(dqǝ\(dq, and encloses the whole sequence into \(aq()\(aq for visual separation.
T}
_
T{
\fI\%TmuxRenderer\fP()
T}	T{
Translates \fI\%Styles\fP attributes into \fI\%tmux\-compatible\fP markup.
T}
_
.TE
.INDENT 0.0
.TP
.B class  pytermor.renderer.RendererManager
Class for global renderer setup.
.INDENT 7.0
.TP
.B classmethod  set_default(renderer=None)
Select a global renderer.
.sp
.nf
.ft C
>>> RendererManager.set_default(SgrRendererDebugger(OutputMode.XTERM_16))
>>> render(\(aqtext\(aq, Style(fg=\(aqred\(aq))
\(aq(ǝ[31m)text(ǝ[39m)\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
\fBrenderer\fP (\fI\%IRenderer\fP\fI | \fP\fIt.Type\fP\fI[\fP\fI\%IRenderer\fP\fI]\fP) \-\- 
.sp
Default renderer to use globally. Calling this method without arguments
will result in library default renderer \fI\%SgrRenderer\fP being set as default.
.sp
All the methods with the \fBrenderer\fP argument (e.g., \fI\%text.render()\fP)
will use the global default one if said argument is omitted or set to \fINone\fP\&.
.sp
You can specify either the renderer class, in which case manager will
instantiate it with the default parameters, or provide already instantiated
and set up renderer, which will be registred as global.

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  get_default()
Get global renderer instance (\fI\%SgrRenderer\fP, or the one provided earlier with
\fI\%set_default()\fP).
.INDENT 7.0
.TP
.B Return type
\fI\%IRenderer\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  set_default_format_always()
Shortcut for forcing all control sequences to be present in the
output of a global renderer.
.sp
Note that it applies only to the renderer that is set up as default at
the moment of calling this method, i.e., all previously created instances,
as well as the ones that will be created afterwards, are unaffected.
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  set_default_format_never()
Shortcut for disabling all output formatting of a global renderer.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.IRenderer
Renderer interface.
.INDENT 7.0
.TP
.B abstract  property  is_caching_allowed:  bool
Class\-level property.
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if caching of renderer\(aqs results makes any sense and \fIFalse\fP
otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B abstract  property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if renderer is set up to use the formatting and will do
it on invocation, and \fIFalse\fP otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B abstract  render(string, fmt=<Style[NOP]>)
Apply colors and attributes described in \fBfmt\fP argument to
\fBstring\fP and return the result. Output format depends on renderer\(aqs
class, which defines the implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIstr\fP) \-\- String to format.
.IP \(bu 2
\fBfmt\fP (\fIIColor\fP\fI | \fP\fI\%Style\fP) \-\- Style or color to apply. If \fBfmt\fP is a \fBColor\fP instance,
it is assumed to be a foreground color.
.UNINDENT
.TP
.B Returns
String with formatting applied, or without it, depending on
renderer settings.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B abstract  clone(*args, **kwargs)
Make a copy of the renderer with the same setup.
.INDENT 7.0
.TP
.B Return type
self
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.OutputMode(value)
Bases: \fBEnum\fP
.sp
Determines what types of SGR sequences are allowed to use in the output.
.INDENT 7.0
.TP
.B NO_ANSI  =  \(aqno_ansi\(aq
The renderer discards all color and format information completely.
.UNINDENT
.INDENT 7.0
.TP
.B XTERM_16  =  \(aqxterm_16\(aq
16\-colors mode. Enforces the renderer to approximate all color types
to \fI\%Color16\fP and render them as basic mode selection SGR sequences
(\fBESC [31m\fP, \fBESC [42m\fP etc). See \fBColor.approximate()\fP for approximation
algorithm details.
.UNINDENT
.INDENT 7.0
.TP
.B XTERM_256  =  \(aqxterm_256\(aq
256\-colors mode. Allows the renderer to use either \fI\%Color16\fP or \fI\%Color256\fP 
(but RGB will be approximated to 256\-color pallette).
.UNINDENT
.INDENT 7.0
.TP
.B TRUE_COLOR  =  \(aqtrue_color\(aq
RGB color mode. Does not apply restrictions to color rendering.
.UNINDENT
.INDENT 7.0
.TP
.B AUTO  =  \(aqauto\(aq
Lets the renderer select the most suitable mode by itself.
See \fI\%SgrRenderer\fP constructor documentation for the details.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.SgrRenderer(output_mode=OutputMode.AUTO, io=<_io.TextIOWrapper name=\(aq<stdout>\(aq mode=\(aqw\(aq encoding=\(aqutf\-8\(aq>)
Bases: \fI\%IRenderer\fP
.sp
Default renderer invoked by \fBText.render()\fP\&. Transforms \fBColor\fP instances
defined in \fBstyle\fP into ANSI control sequence bytes and merges them with
input string. Type of resulting \fI\%SequenceSGR\fP depends on type of \fBColor\fP
instances in \fBstyle\fP argument and current output mode of the renderer.
.INDENT 7.0
.IP 1. 3
\fI\%ColorRGB\fP can be rendered as True Color sequence, 256\-color sequence
or 16\-color sequence depending on specified \fI\%OutputMode\fP\&.
.IP 2. 3
\fI\%Color256\fP can be rendered as 256\-color sequence or 16\-color
sequence.
.IP 3. 3
\fI\%Color16\fP will be rendered as 16\-color sequence.
.IP 4. 3
Nothing of the above will happen and all formatting will be discarded
completely if output device is not a terminal emulator or if the developer
explicitly set up the renderer to do so (\fI\%OutputMode.NO_ANSI\fP).
.UNINDENT
.sp
Renderer approximates RGB colors to closest \fBindexed\fP colors if terminal doesn\(aqt
support RGB output. In case terminal doesn\(aqt support even 256 colors, it
falls back to 16\-color palette and picks closest samples again the same way.
See \fI\%OutputMode\fP documentation for exact mappings.
.sp
.nf
.ft C
>>> SgrRenderer(OutputMode.XTERM_256).render(\(aqtext\(aq, Styles.WARNING_LABEL)
\(aq[1;33mtext[22;39m\(aq
>>> SgrRenderer(OutputMode.NO_ANSI).render(\(aqtext\(aq, Styles.WARNING_LABEL)
\(aqtext\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
\fBoutput_mode\fP (\fI\%OutputMode\fP) \-\- 
.sp
SGR output mode to use. Valid values are listed in \fI\%OutputMode\fP enum.
.sp
With \fI\%OutputMode.AUTO\fP the renderer will first check if the output
device is a terminal emulator, and use \fI\%OutputMode.NO_ANSI\fP when it
is not. Otherwise, the renderer will read \fBTERM\fP environment
variable and follow these rules:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%OutputMode.NO_ANSI\fP if \fBTERM\fP is set to \fBxterm\fP\&.
.IP \(bu 2
\fI\%OutputMode.XTERM_16\fP if \fBTERM\fP is set to \fBxterm\-color\fP\&.
.IP \(bu 2
\fI\%OutputMode.XTERM_256\fP in all other cases.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Special case is when \fBTERM\fP equals to \fBxterm\-256color\fP \fBand\fP
\fBCOLORTERM\fP is either \fBtruecolor\fP or  \fB24bit\fP, then
\fI\%OutputMode.TRUE_COLOR\fP will be used.

.UNINDENT
.INDENT 7.0
.TP
.B property  is_caching_allowed:  bool
Class\-level property.
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if caching of renderer\(aqs results makes any sense and \fIFalse\fP
otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if renderer is set up to use the formatting and will do
it on invocation, and \fIFalse\fP otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(string, fmt=<Style[NOP]>)
Apply colors and attributes described in \fBfmt\fP argument to
\fBstring\fP and return the result. Output format depends on renderer\(aqs
class, which defines the implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIstr\fP) \-\- String to format.
.IP \(bu 2
\fBfmt\fP (\fIIColor\fP\fI | \fP\fI\%Style\fP) \-\- Style or color to apply. If \fBfmt\fP is a \fBColor\fP instance,
it is assumed to be a foreground color.
.UNINDENT
.TP
.B Returns
String with formatting applied, or without it, depending on
renderer settings.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B clone()
Make a copy of the renderer with the same setup.
.INDENT 7.0
.TP
.B Return type
self
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.TmuxRenderer
Bases: \fI\%IRenderer\fP
.sp
Translates \fI\%Styles\fP attributes into
\fI\%tmux\-compatible\fP
markup. \fI\%tmux\fP is a commonly used terminal
multiplexer.
.sp
.nf
.ft C
>>> TmuxRenderer().render(\(aqtext\(aq,  Style(fg=\(aqblue\(aq, bold=True))
\(aq#[fg=blue bold]text#[fg=default nobold]\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B property  is_caching_allowed:  bool
Class\-level property.
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if caching of renderer\(aqs results makes any sense and \fIFalse\fP
otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns
Always \fITrue\fP, because tmux markup can be used without regard
to the type of output device and its capabilities \-\- all the
dirty work will be done by the multiplexer itself.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(string, fmt=<Style[NOP]>)
Apply colors and attributes described in \fBfmt\fP argument to
\fBstring\fP and return the result. Output format depends on renderer\(aqs
class, which defines the implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIstr\fP) \-\- String to format.
.IP \(bu 2
\fBfmt\fP (\fIIColor\fP\fI | \fP\fI\%Style\fP) \-\- Style or color to apply. If \fBfmt\fP is a \fBColor\fP instance,
it is assumed to be a foreground color.
.UNINDENT
.TP
.B Returns
String with formatting applied, or without it, depending on
renderer settings.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B clone()
Make a copy of the renderer with the same setup.
.INDENT 7.0
.TP
.B Return type
self
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.NoOpRenderer
Bases: \fI\%IRenderer\fP
.sp
Special renderer type that does nothing with the input string and just
returns it as is. Often used as a default argument value (along with similar
\(dqNoOps\(dq like \fI\%NOOP_STYLE\fP, \fI\%NOOP_COLOR\fP etc.)
.sp
.nf
.ft C
>>> NoOpRenderer().render(\(aqtext\(aq, Style(fg=\(aqgreen\(aq, bold=True))
\(aqtext\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B property  is_caching_allowed:  bool
Class\-level property.
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if caching of renderer\(aqs results makes any sense and \fIFalse\fP
otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns
Nothing to apply → nothing to allow, thus the returned value
is always \fIFalse\fP\&.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(string, fmt=<Style[NOP]>)
Return the \fBstring\fP argument untouched, don\(aqt mind the \fBfmt\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIstr\fP) \-\- String to format ignore.
.IP \(bu 2
\fBfmt\fP (\fIIColor\fP\fI | \fP\fI\%Style\fP) \-\- Style or color to appl  discard.
.UNINDENT
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B clone()
Make a copy of the renderer with the same setup.
.INDENT 7.0
.TP
.B Return type
self
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.HtmlRenderer
Bases: \fI\%IRenderer\fP
.sp
Translate \fI\%Styles\fP attributes into a rudimentary HTML markup.
All the formatting is inlined into \fBstyle\fP attribute of the \fB<span>\fP
elements. Can be optimized by extracting the common styles as CSS classes
and referencing them by DOM elements instead.
.sp
.nf
.ft C
>>> HtmlRenderer().render(\(aqtext\(aq, Style(fg=\(aqred\(aq, bold=True))
\(aq<span style=\(dqcolor: #800000; font\-weight: 700\(dq>text</span>\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B property  is_caching_allowed:  bool
Class\-level property.
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if caching of renderer\(aqs results makes any sense and \fIFalse\fP
otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns
Always \fITrue\fP, because the capabilities of the terminal have
nothing to do with HTML markup meant for web\-browsers.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(string, fmt=<Style[NOP]>)
Apply colors and attributes described in \fBfmt\fP argument to
\fBstring\fP and return the result. Output format depends on renderer\(aqs
class, which defines the implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIstr\fP) \-\- String to format.
.IP \(bu 2
\fBfmt\fP (\fIIColor\fP\fI | \fP\fI\%Style\fP) \-\- Style or color to apply. If \fBfmt\fP is a \fBColor\fP instance,
it is assumed to be a foreground color.
.UNINDENT
.TP
.B Returns
String with formatting applied, or without it, depending on
renderer settings.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B clone()
Make a copy of the renderer with the same setup.
.INDENT 7.0
.TP
.B Return type
self
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.SgrRendererDebugger(output_mode=OutputMode.AUTO)
Bases: \fI\%SgrRenderer\fP
.sp
Subclass of regular \fI\%SgrRenderer\fP with two differences \-\- instead of rendering the
proper ANSI escape sequences it renders them with \fBESC\fP character replaced by \(dqǝ\(dq,
and encloses the whole sequence into \(aq()\(aq for visual separation.
.sp
Can be used for debugging of assembled sequences, because such a transformation
reliably converts a control sequence into a harmless piece of bytes completely ignored
by the terminals.
.sp
.nf
.ft C
>>> SgrRendererDebugger(OutputMode.XTERM_16).render(\(aqtext\(aq, Style(fg=\(aqred\(aq, bold=True))
\(aq(ǝ[1;31m)text(ǝ[22;39m)\(aq
.ft P
.fi
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B property  is_caching_allowed:  bool
Class\-level property.
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if caching of renderer\(aqs results makes any sense and \fIFalse\fP
otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns
\fITrue\fP if renderer is set up to use the formatting and will do
it on invocation, and \fIFalse\fP otherwise.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(string, fmt=<Style[NOP]>)
Apply colors and attributes described in \fBfmt\fP argument to
\fBstring\fP and return the result. Output format depends on renderer\(aqs
class, which defines the implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIstr\fP) \-\- String to format.
.IP \(bu 2
\fBfmt\fP (\fIIColor\fP\fI | \fP\fI\%Style\fP) \-\- Style or color to apply. If \fBfmt\fP is a \fBColor\fP instance,
it is assumed to be a foreground color.
.UNINDENT
.TP
.B Returns
String with formatting applied, or without it, depending on
renderer settings.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B clone()
Make a copy of the renderer with the same setup.
.INDENT 7.0
.TP
.B Return type
self
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B set_format_always()
Force all control sequences to be present in the output.
.UNINDENT
.INDENT 7.0
.TP
.B set_format_auto()
Reset the force formatting flag and let the renderer decide by itself (see
\fI\%SgrRenderer\fP docs for the details).
.UNINDENT
.INDENT 7.0
.TP
.B set_format_never()
Force disabling of all output formatting.
.UNINDENT
.UNINDENT
.SS pytermor.style
.sp
Module Attributes
.TS
center;
|l|l|.
_
T{
\fI\%NOOP_STYLE\fP
T}	T{
Special style passing the text through without any modifications.
T}
_
.TE
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%Style\fP([parent, fg, bg, blink, bold, ...])
T}	T{
style
T}
_
T{
\fI\%Styles\fP()
T}	T{
Some ready\-to\-use styles.
T}
_
.TE
.INDENT 0.0
.TP
.B class  pytermor.style.Style(parent=None, fg=None, bg=None, *, blink=None, bold=None, crosslined=None, dim=None, double_underlined=None, inversed=None, italic=None, overlined=None, underlined=None, class_name=None)
style
.sp
Create a new \fBStyle()\fP\&. Both \fBfg\fP and \fBbg\fP can be specified as:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
\fBColor\fP instance or library preset;
.IP 2. 3
\fB*str*\fP \-\- name of any of these presets, case\-insensitive;
.IP 3. 3
\fB*int*\fP \-\- color value in hexadecimal RGB format;
.IP 4. 3
\fINone\fP \-\- the color will be unset.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Inheritance \fBparent\fP \-> \fBchild\fP works this way:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
If an argument in child\(aqs constructor is empty (\fINone\fP), take value from
\fBparent\fP\(aqs corresponding attribute.
.IP \(bu 2
If an argument in child\(aqs constructor is \fInot\fP empty (\fBTrue\fP,
\fBFalse\fP, \fBColor\fP etc.), use it as child\(aqs attribute.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Both empty (i.e., \fINone\fP) attributes of type \fBColor\fP after initialization
will be replaced with special constant \fI\%NOOP_COLOR\fP, which behaves like
there was no color defined, and at the same time makes it safer to work
with nullable color\-type variables.
.UNINDENT
.UNINDENT
.sp
All arguments except \fBparent\fP, \fBfg\fP and \fBbg\fP are \fIkwonly\fP\-type args.
.sp
.nf
.ft C
>>> Style(fg=\(aqgreen\(aq, bold=True)
<Style[fg=<Color16[#32,008000?,green]>,bg=<_NoopColor[NOP]>,bold]>
>>> Style(bg=0x0000ff)
<Style[fg=<_NoopColor[NOP]>,bg=<ColorRGB[0000FF]>]>
>>> Style(fg=\(aqDeepSkyBlue1\(aq, bg=\(aqgray3\(aq)
<Style[fg=<Color256[#39,00AFFF,deep\-sky\-blue\-1]>,bg=<Color256[#232,080808,gray\-3]>]>
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBparent\fP (\fI\%Style\fP) \-\- Style to copy attributes without value from.
.IP \(bu 2
\fBfg\fP (\fIIColor\fP\fI | \fP\fIint\fP\fI | \fP\fIstr\fP) \-\- Foreground (i.e., text) color.
.IP \(bu 2
\fBbg\fP (\fIIColor\fP\fI | \fP\fIint\fP\fI | \fP\fIstr\fP) \-\- Background color.
.IP \(bu 2
\fBblink\fP (\fIbool\fP) \-\- Blinking effect; \fIsupported by limited amount of Renderers\fP\&.
.IP \(bu 2
\fBbold\fP (\fIbool\fP) \-\- Bold or increased intensity.
.IP \(bu 2
\fBcrosslined\fP (\fIbool\fP) \-\- Strikethrough.
.IP \(bu 2
\fBdim\fP (\fIbool\fP) \-\- Faint, decreased intensity.
.IP \(bu 2
\fBdouble_underlined\fP (\fIbool\fP) \-\- Faint, decreased intensity.
.IP \(bu 2
\fBinversed\fP (\fIbool\fP) \-\- Swap foreground and background colors.
.IP \(bu 2
\fBitalic\fP (\fIbool\fP) \-\- Italic.
.IP \(bu 2
\fBoverlined\fP (\fIbool\fP) \-\- Overline.
.IP \(bu 2
\fBunderlined\fP (\fIbool\fP) \-\- Underline.
.IP \(bu 2
\fBclass_name\fP (\fIstr\fP) \-\- Arbitary string used by some _get_renderers, e.g. by
\fBHtmlRenderer\fP\&.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B autopick_fg()
Pick \fBfg_color\fP depending on \fBbg_color\fP\&. Set \fBfg_color\fP to
either 3% gray (almost black) if background is bright, or to 80% gray
(bright gray) if it is dark. If background is None, do nothing.
.INDENT 7.0
.INDENT 3.5
.SS Todo
.sp
check if there is a better algorithm,
because current thinks text on #000080 should be black
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns
self
.TP
.B Return type
\fI\%Style\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B flip()
Swap foreground color and background color.
:return: self
.INDENT 7.0
.TP
.B Return type
\fI\%Style\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.style.NOOP_STYLE  =  <Style[NOP]>
Special style passing the text through without any modifications.
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.style.Styles
Some ready\-to\-use styles. Can be used as examples.
.UNINDENT
.SS pytermor.text
.sp
\(dqFront\-end\(dq module of the library. Contains classes supporting high\-level
operations such as nesting\-aware style application, concatenating and cropping
of styled strings before the rendering, text alignment and wrapping, etc.
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fI\%echo\fP([string, fmt, renderer, ...])
T}	T{
\&.
T}
_
T{
\fI\%render\fP([string, fmt, renderer, ...])
T}	T{
\&.
T}
_
.TE
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%FixedString\fP([string, fmt, align, width, ...])
T}	T{
T}
_
T{
\fI\%FrozenText\fP([string, fmt, close_this, close_prev])
T}	T{
T}
_
T{
\fI\%IRenderable\fP()
T}	T{
Renderable abstract class.
T}
_
T{
\fI\%String\fP([string, fmt])
T}	T{
T}
_
T{
\fBTemplateEngine\fP([custom_styles])
T}	T{
T}
_
T{
\fI\%Text\fP([string, fmt, close_this, close_prev])
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B class  pytermor.text.IRenderable
Bases: \fBSized\fP, \fBABC\fP
.sp
Renderable abstract class. Can be inherited when the default style
overlaps resolution mechanism implemented in \fI\%Text\fP is not good enough.
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.text.String(string=\(aq\(aq, fmt=<Style[NOP]>)
Bases: \fI\%IRenderable\fP
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.text.FixedString(string=\(aq\(aq, fmt=<Style[NOP]>, align=Align.LEFT, *, width=0, pad_left=0, pad_right=0, overflow_char=None)
Bases: \fI\%String\fP
.INDENT 7.0
.INDENT 3.5
.SS Todo
.sp
store already formatted string right after initialization, and provide
it as \fBraw\fP when joining several Renderables, or else width limit, padding
and aligning simply do not work.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.text.FrozenText(string=\(aq\(aq, fmt=<Style[NOP]>, *, close_this=True, close_prev=False)
Bases: \fI\%IRenderable\fP
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.text.Text(string=\(aq\(aq, fmt=<Style[NOP]>, *, close_this=True, close_prev=False)
Bases: \fI\%FrozenText\fP
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.text.render(string=\(aq\(aq, fmt=<Style[NOP]>, renderer=None, parse_template=False, *, stderr=False)
\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIRT\fP\fI | \fP\fIt.Iterable\fP\fI[\fP\fIRT\fP\fI]\fP) \-\- 
.IP \(bu 2
\fBfmt\fP (\fIIColor\fP\fI | \fP\fI\%Style\fP) \-\- 
.IP \(bu 2
\fBrenderer\fP (\fI\%IRenderer\fP) \-\- 
.IP \(bu 2
\fBparse_template\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBstderr\fP (\fIbool\fP) \-\- 
.UNINDENT
.TP
.B Returns

.TP
.B Return type
str | t.List[str]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.text.echo(string=\(aq\(aq, fmt=<Style[NOP]>, renderer=None, parse_template=False, *, nl=True, file=<_io.TextIOWrapper name=\(aq<stdout>\(aq mode=\(aqw\(aq encoding=\(aqutf\-8\(aq>, flush=True, wrap=False, indent_first=0, indent_subseq=0)
\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIRT\fP\fI | \fP\fIt.Iterable\fP\fI[\fP\fIRT\fP\fI]\fP) \-\- 
.IP \(bu 2
\fBfmt\fP (\fIIColor\fP\fI | \fP\fI\%Style\fP) \-\- 
.IP \(bu 2
\fBrenderer\fP (\fI\%IRenderer\fP) \-\- 
.IP \(bu 2
\fBparse_template\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBnl\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBfile\fP (\fIt.IO\fP) \-\- 
.IP \(bu 2
\fBflush\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBwrap\fP (\fIbool\fP\fI | \fP\fIint\fP) \-\- 
.IP \(bu 2
\fBindent_first\fP (\fIint\fP) \-\- 
.IP \(bu 2
\fBindent_subseq\fP (\fIint\fP) \-\- 
.UNINDENT
.UNINDENT
.UNINDENT
.SS pytermor.utilmisc
.sp
A
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fI\%chunk\fP(items, size)
T}	T{
Split item list into chunks of size \fBsize\fP and return these chunks as \fItuples\fP\&.
T}
_
T{
\fI\%confirm\fP([attempts, default, keymap, prompt, ...])
T}	T{
Ensure the next action is manually confirmed by user.
T}
_
T{
\fI\%get_char_width\fP(char, wait)
T}	T{
General\-purpose method for getting width of a character in terminal columns.
T}
_
T{
\fI\%get_preferable_wrap_width\fP([force_width])
T}	T{
Return preferable terminal width for comfort reading of wrapped text (max=120).
T}
_
T{
\fI\%get_qname\fP(obj)
T}	T{
Convenient method for getting a class name for class instances as well as for the classes themselves.
T}
_
T{
\fI\%get_terminal_width\fP([default, padding])
T}	T{
Return current terminal width with an optional \(dqsafety buffer\(dq, which ensures that no unwanted line wrapping will happen.
T}
_
T{
\fI\%guess_char_width\fP(c)
T}	T{
Determine how many columns are needed to display a character in a terminal.
T}
_
T{
\fI\%measure_char_width\fP(char[, clear_after, legacy])
T}	T{
Low\-level function that returns the exact character width in terminal columns.
T}
_
T{
\fI\%total_size\fP(o[, handlers, verbose])
T}	T{
Return the approximate memory footprint of an object and all of its contents.
T}
_
T{
\fI\%wait_key\fP()
T}	T{
Wait for a key press on the console and return it.
T}
_
.TE
.INDENT 0.0
.TP
.B pytermor.utilmisc.get_qname(obj)
Convenient method for getting a class name for class instances
as well as for the classes themselves. Suitable for debug output in
\fB__repr__\fP methods, for example.
.sp
.nf
.ft C
>>> get_qname(\(dqaaa\(dq)
\(aqstr\(aq
>>> get_qname(make_query_cursor_position())
\(aqSequenceCSI\(aq
>>> get_qname(threading.Thread)
\(aqThread\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilmisc.chunk(items, size)
Split item list into chunks of size \fBsize\fP and return these
chunks as \fItuples\fP\&.
.sp
.nf
.ft C
>>> for c in chunk(range(5), 2):
\&...     print(c)
(0, 1)
(2, 3)
(4,)
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBitems\fP (\fIIterable\fP\fI[\fP\fIT\fP\fI]\fP) \-\- Input elements.
.IP \(bu 2
\fBsize\fP (\fIint\fP) \-\- Chunk size.
.UNINDENT
.TP
.B Return type
\fIIterator\fP[\fITuple\fP[\fIT\fP, \&...]]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilmisc.get_terminal_width(default=80, padding=2)
Return current terminal width with an optional \(dqsafety buffer\(dq, which
ensures that no unwanted line wrapping will happen.
.INDENT 7.0
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilmisc.get_preferable_wrap_width(force_width=None)
Return preferable terminal width for comfort reading of wrapped text (max=120).
.INDENT 7.0
.TP
.B Parameters
\fBforce_width\fP (\fIOptional\fP\fI[\fP\fIint\fP\fI]\fP) \-\- Ignore current terminal width and use this value as a result.
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilmisc.wait_key()
Wait for a key press on the console and return it.
.INDENT 7.0
.TP
.B Raises
\fBEOFError\fP \-\- 
.TP
.B Return type
t.AnyStr | None
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilmisc.confirm(attempts=1, default=False, keymap=None, prompt=None, quiet=False, required=False)
Ensure the next action is manually confirmed by user. Print the terminal
prompt with \fBprompt\fP text and wait for a keypress. Return \fITrue\fP
if user pressed \fBY\fP and \fIFalse\fP in all the other cases (by default).
.sp
Valid keys are \fBY\fP and \fBN\fP (case insensitive), while all the other keys
and combinations are considered invalid, and will trigger the return of the
\fBdefault\fP value, which is \fIFalse\fP if not set otherwise. In other words,
by default the user is expected to press either \fBY\fP or \fBN\fP, and if
that\(aqs not the case, the confirmation request will be automatically failed.
.sp
\fBCtrl+C\fP instantly aborts the confirmation process regardless of attempts
count and raises \fI\%UserAbort\fP\&.
.sp
Example keymap (default one):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
keymap = {\(dqy\(dq: True, \(dqn\(dq: False}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBattempts\fP (\fIint\fP) \-\- Set how many times the user is allowed to perform the
input before auto\-cancellation (or auto\-confirmation) will
occur. 1 means there will be only one attempt, the first one.
When set to \-1, allows to repeat the input infinitely.
.IP \(bu 2
\fBdefault\fP (\fIbool\fP) \-\- Default value that will be returned when user presses invalid
key (e.g. \fBBackspace\fP, \fBCtrl+Q\fP etc.) and his
\fBattempts\fP counter decreases to 0. Setting this to \fITrue\fP
effectively means that the user\(aqs only way to deny the request
is to press \fBN\fP or \fBCtrl+C\fP, while all the other
keys are treated as \fBY\fP\&.
.IP \(bu 2
\fBkeymap\fP (\fIOptional\fP\fI[\fP\fIMapping\fP\fI[\fP\fIstr\fP\fI, \fP\fIbool\fP\fI]\fP\fI]\fP) \-\- Key to result mapping.
.IP \(bu 2
\fBprompt\fP (\fIOptional\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- String to display before each input attempt. Default is:
\fB\(dqPress Y to continue, N to cancel, Ctrl+C to abort: \(dq\fP
.IP \(bu 2
\fBquiet\fP (\fIbool\fP) \-\- If set to \fITrue\fP, suppress all messages to stdout and work
silently.
.IP \(bu 2
\fBrequired\fP (\fIbool\fP) \-\- If set to \fITrue\fP, raise \fI\%UserCancel\fP or \fI\%UserAbort\fP when
user rejects to confirm current action. If set to \fIFalse\fP,
do not raise any exceptions, just return \fIFalse\fP\&.
.UNINDENT
.TP
.B Raises
.INDENT 7.0
.IP \(bu 2
\fI\%UserAbort\fP \-\- On corresponding event, if \fBrequired\fP is \fITrue\fP\&.
.IP \(bu 2
\fI\%UserCancel\fP \-\- On corresponding event, if \fBrequired\fP is \fITrue\fP\&.
.UNINDENT
.TP
.B Returns
\fITrue\fP if there was a confirmation by user\(aqs input or
automatically, \fIFalse\fP otherwise.
.TP
.B Return type
bool
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilmisc.get_char_width(char, wait)
General\-purpose method for getting width of a character in terminal columns.
.sp
Uses \fI\%guess_char_width()\fP method based on \fBunicodedata\fP package,
or/and QCP\-RCP ANSI control sequence communication protocol.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBchar\fP (\fIstr\fP) \-\- Input char.
.IP \(bu 2
\fBwait\fP (\fIbool\fP) \-\- Set to \fITrue\fP if you prefer slow, but 100% accurate
\fI\%measuring\fP (which \fBblocks\fP and
requires an output tty), or \fIFalse\fP to invoke device\-independent,
deterministic and non\-blocking \fI\%guessing\fP,
which works most of the time, although there could be rare
cases when it is not accurate.
.UNINDENT
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilmisc.measure_char_width(char, clear_after=True, legacy=False)
Low\-level function that returns the exact character width in terminal columns.
.sp
The main idea is to reset a cursor position to 1st column, print the required
character and \fI\%QCP\fP control sequence; after that
wait for the response and \fI\%parse\fP it.
Normally it contains the cursor coordinates, which can tell the exact width of a
character in question.
.sp
After reading the response clear it from the screen and reset the cursor to
column 1 again.
.sp
\fBIMPORTANT:\fP
.INDENT 7.0
.INDENT 3.5
The \fBstdout\fP must be a tty. If it is not, consider using
\fI\%guess_char_width()\fP instead, or \fBIOError\fP will be raised.
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
Invoking this method produces a bit of garbage in the output stream,
which looks like this: \fB⠁[3;2R\fP\&. By default, it is hidden using
screen line clearing (see \fBclear_after\fP).
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 7.0
.INDENT 3.5
Invoking this method may \fBblock\fP infinitely. Consider using a thread
or set a timeout for the main thread using a signal if that is unwanted.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBchar\fP (\fIstr\fP) \-\- Input char.
.IP \(bu 2
\fBclear_after\fP (\fIbool\fP) \-\- Send \fI\%EL\fP control sequence after the
terminal response to hide excessive utility information from
the output if set to \fITrue\fP, or leave it be otherwise.
.IP \(bu 2
\fBlegacy\fP (\fIbool\fP) \-\- For some terminal and interpreter configurations the method
can put the application into an endless wait cycle, unless
a newline character appears in \fBstdin\fP (for example, when
the python debugger is attached). For these cases it is
recommended to set this parameter to \fITrue\fP to switch the
internal input reading mode, which helps to avoid this.
.UNINDENT
.TP
.B Raises
\fBIOError\fP \-\- If \fBstdout\fP is not a terminal emulator.
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilmisc.guess_char_width(c)
Determine how many columns are needed to display a character in a terminal.
.sp
Returns \-1 if the character is not printable.
Returns 0, 1 or 2 for other characters.
.sp
Utilizes \fBunicodedata\fP table. A terminal emulator is unnecessary.
.INDENT 7.0
.TP
.B Origin
\fI\%_pytest._io.wcwidth\fP
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilmisc.total_size(o, handlers=None, verbose=False)
Return the approximate memory footprint of an object and all of its contents.
.sp
Automatically finds the contents of the following builtin containers and
their subclasses: \fItuple, list, deque, dict, set\fP and \fIfrozenset\fP\&.
To search other containers, add handlers to iterate over their contents:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
handlers = {ContainerClass: iter, ContainerClass2: ContainerClass2.get_elements}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Origin
\fI\%https://code.activestate.com/recipes/577504/\fP
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.SS pytermor.utilnum
.sp
utilnum
.sp
Module Attributes
.TS
center;
|l|l|.
_
T{
\fI\%formatter_si_metric\fP
T}	T{
Format \fBvalue\fP as meters with SI\-prefixes.
T}
_
T{
\fI\%formatter_si_binary\fP
T}	T{
Format \fBvalue\fP as binary size (bytes, kbytes, Mbytes) with base  = 1024.
T}
_
.TE
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fI\%format_auto_float\fP(val, req_len[, allow_exp_form])
T}	T{
Dynamically adjust decimal digit amount and format to fill up the output string with as many significant digits as possible, and keep the output length strictly equal to \fBreq_len\fP  at the same time.
T}
_
T{
\fI\%format_si_binary\fP(val[, unit, color])
T}	T{
Wrapper for \fI\%formatter_si_binary.format()\fP\&.
T}
_
T{
\fI\%format_si_metric\fP(val[, unit, color])
T}	T{
Wrapper for \fI\%formatter_si_metric.format()\fP\&.
T}
_
T{
\fI\%format_thousand_sep\fP(val[, separator])
T}	T{
Returns input \fBval\fP with integer part split into groups of three digits, joined then with \fBseparator\fP string.
T}
_
T{
\fI\%format_time_delta\fP(val_sec[, max_len, color_ov])
T}	T{
Format time delta using suitable format (which depends on \fBmax_len\fP argument).
T}
_
.TE
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fBNumHighlighter\fP()
T}	T{
T}
_
T{
\fI\%PrefixedUnitFormatter\fP([parent, ...])
T}	T{
Formats \fBvalue\fP using settings passed to constructor.
T}
_
T{
\fI\%TimeDeltaFormatter\fP(units[, color, ...])
T}	T{
Formatter for time intervals.
T}
_
T{
\fI\%TimeUnit\fP(name[, in_next, custom_short, ...])
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B pytermor.utilnum.format_thousand_sep(val, separator=\(aq \(aq)
Returns input \fBval\fP with integer part split into groups of three digits,
joined then with \fBseparator\fP string.
.sp
.nf
.ft C
>>> format_thousand_sep(260341)
\(aq260 341\(aq
>>> format_thousand_sep(\-9123123123.55, \(aq,\(aq)
\(aq\-9,123,123,123.55\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval\fP (\fIint\fP\fI | \fP\fIfloat\fP) \-\- 
.IP \(bu 2
\fBseparator\fP (\fIstr\fP) \-\- 
.UNINDENT
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilnum.format_auto_float(val, req_len, allow_exp_form=True)
Dynamically adjust decimal digit amount and format to fill up the output string
with as many significant digits as possible, and keep the output length strictly
equal to \fBreq_len\fP  at the same time.
.sp
For values impossible to fit into a string of required length and when rounding
doesn\(aqt help (e.g. 12 500 000 and 5 chars) algorithm switches to scientific notation,
and the result looks like \(aq1.2e7\(aq, unless this feature is explicitly disabled
with \fBallow_exp_form\fP = \fIFalse\fP; in that case:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
if absolute value is less than 1, zeros will be displayed (\(aq0.0000\(aq);
.IP 2. 3
if value is a big number (like 10\s-2\u9\d\s0), \fIValueError\fP will be
raised instead.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
.nf
.ft C
>>> format_auto_float(0.012345678, 5)
\(aq0.012\(aq
>>> format_auto_float(0.123456789, 5)
\(aq0.123\(aq
>>> format_auto_float(1.234567891, 5)
\(aq1.235\(aq
>>> format_auto_float(12.34567891, 5)
\(aq12.35\(aq
>>> format_auto_float(123.4567891, 5)
\(aq123.5\(aq
>>> format_auto_float(1234.567891, 5)
\(aq 1235\(aq
>>> format_auto_float(12345.67891, 5)
\(aq12346\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval\fP (\fIfloat\fP) \-\- Value to format.
.IP \(bu 2
\fBreq_len\fP (\fIint\fP) \-\- Required output string length.
.IP \(bu 2
\fBallow_exp_form\fP (\fIbool\fP) \-\- Enable/disable the possibility to use an exponent form, when
there is no other way of fitting the value into string of
requested length.
.UNINDENT
.TP
.B Raises
\fBValueError\fP \-\- If value is too big to fit into \fBreq_len\fP digits and
\fBallow_exponent_notation\fP is set to False.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilnum.PrefixedUnitFormatter(parent=None, *, max_value_len=None, color=None, allow_negative=None, allow_fractional=None, unit=None, unit_separator=None, mcoef=None, pad=None, legacy_rounding=None, prefixes=None, prefix_refpoint_shift=None, value_mapping=None)
Formats \fBvalue\fP using settings passed to constructor. The main idea of this class
is to fit into specified string length as much significant digits as it\(aqs
theoretically possible by using multipliers and unit prefixes to
indicate them.
.sp
You can create your own formatters if you need fine tuning of the
output and customization. If that\(aqs not the case, there are facade
methods \fI\%format_si_metric()\fP and \fI\%format_si_binary()\fP,
which will invoke predefined formatters and doesn\(aqt require setting up.
.sp
\fBmax_value_len\fP must be at least \fB3\fP, because it\(aqs a
minimum requirement for formatting values from 0 to 999.
Next number to 999 is 1000, which will be formatted as \(dq1k\(dq.
.sp
Setting \fBallow_negative\fP to \fITrue\fP increases lower bound of \fBmax_value_len\fP
to \fB4\fP because the values now can be less than 0, and minus sign also occupies
one char of the output.
.sp
Setting \fBmcoef\fP to anything other than 1000.0 also increases the minimum
of \fBmax_value_len\fP argument by 1, to \fB5\fP\&. The reason is that non\-decimal
coefficients like 1024 require additional char to render as switching
to the next prefix happens later: 999 b, 1000 b, 1001 b ... 1023 b, 1 Kb.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
All arguments except \fBparent\fP are \fIkwonly\fP\-type arguments.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBparent\fP (\fI\%PrefixedUnitFormatter\fP) \-\- 
.IP \(bu 2
\fBmax_value_len\fP (\fIint\fP) \-\- Target string length. As mentioned above, must be at
least 3\-5, depending on other options.
.IP \(bu 2
\fBcolor\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBallow_fractional\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBallow_negative\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBunit\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBunit_separator\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBmcoef\fP (\fIfloat\fP) \-\- 
.IP \(bu 2
\fBpad\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBlegacy_rounding\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBprefixes\fP (\fIt.List\fP\fI[\fP\fIstr\fP\fI | \fP\fINone\fP\fI]\fP) \-\- 
.IP \(bu 2
\fBprefix_refpoint_shift\fP (\fIint\fP) \-\- Should be set to a non\-zero number if input represents
already prefixed value; e.g. to correctly format a variable,
which stores the frequency in MHz, set prefix shift to 2;
the formatter then will render 2333 as \(dq2.33 GHz\(dq instead of
incorrect \(dq2.33 kHz\(dq.
.IP \(bu 2
\fBvalue_mapping\fP (\fIt.Dict\fP\fI[\fP\fIfloat\fP\fI, \fP\fIRT\fP\fI] \fP\fI| \fP\fIt.Callable\fP\fI[\fP\fI[\fP\fIfloat\fP\fI]\fP\fI, \fP\fIRT\fP\fI]\fP) \-\- @TODO
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B PREFIXES_SI  =  [\(aqy\(aq, \(aqz\(aq, \(aqa\(aq, \(aqf\(aq, \(aqp\(aq, \(aqn\(aq, \(aqμ\(aq, \(aqm\(aq, None, \(aqk\(aq, \(aqM\(aq, \(aqG\(aq, \(aqT\(aq, \(aqP\(aq, \(aqE\(aq, \(aqZ\(aq, \(aqY\(aq]
Prefix presets used by default module formatters. Can be
useful if you are building your own formatter.
.UNINDENT
.INDENT 7.0
.TP
.B _attribute_defaults  =  {\(aq_allow_fractional\(aq: True, \(aq_allow_negative\(aq: False, \(aq_color\(aq: False, \(aq_legacy_rounding\(aq: False, \(aq_max_value_len\(aq: 5, \(aq_mcoef\(aq: 1000, \(aq_pad\(aq: False, \(aq_prefix_refpoint_shift\(aq: 0, \(aq_prefixes\(aq: [\(aqy\(aq, \(aqz\(aq, \(aqa\(aq, \(aqf\(aq, \(aqp\(aq, \(aqn\(aq, \(aqμ\(aq, \(aqm\(aq, None, \(aqk\(aq, \(aqM\(aq, \(aqG\(aq, \(aqT\(aq, \(aqP\(aq, \(aqE\(aq, \(aqZ\(aq, \(aqY\(aq], \(aq_unit\(aq: \(aq\(aq, \(aq_unit_separator\(aq: \(aq\(aq, \(aq_value_mapping\(aq: {}}
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  max_len:  int
.INDENT 7.0
.TP
.B Returns
Maximum length of the result. Note that constructor argument
is \fBmax_value_len\fP, which is a different parameter.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B format(val, unit_ov=None, color_ov=None)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval\fP (\fIfloat\fP) \-\- Input value.
.IP \(bu 2
\fBunit_ov\fP (\fIOptional\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- Unit override.
.IP \(bu 2
\fBcolor_ov\fP (\fIOptional\fP\fI[\fP\fIbool\fP\fI]\fP) \-\- Color mode override, \fIbool\fP to enable/disable
colorizing, \fINone\fP to use formatters\(aq setting value.
.UNINDENT
.TP
.B Returns
Formatted value, \fIText\fP if colorizing is on, \fIstr\fP otherwise.
.TP
.B Return type
\fIRT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilnum.formatter_si_metric  =  PrefixedUnitFormatter
Format \fBvalue\fP as meters with SI\-prefixes. Base is 1000. 
Unit can be changed at \fI\%format()\fP invocation. Suitable for formatting 
any SI unit with values from approximately 10^\-27 to 10^27.
.INDENT 7.0
.TP
.B Usage
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
# either of: 
formatter_si_metric.format(<value>, ...)
format_si_metric(<value>, ...)
.ft P
.fi
.UNINDENT
.UNINDENT
.TP
.B Max len
Total maximum length is \fBmax_value_len + 3\fP, which is \fB7\fP
(base + 3 from separator, unit and prefix, assuming all of them
have 1\-char width).
.TP
.B See
\fI\%format_si_metric()\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilnum.formatter_si_binary  =  PrefixedUnitFormatter
Format \fBvalue\fP as binary size (bytes, kbytes, Mbytes) with base 
= 1024. Unit can be customized.
.sp
While being similar to \fI\%formatter_si_metric\fP, this formatter 
differs in one aspect.  Given a variable with default value = 995,
formatting it\(aqs value results in \(dq995 b\(dq. After increasing it
by 20 we\(aqll have 1015, but it\(aqs still not enough to become
a kilobyte \-\- so returned value will be \(dq1015 b\(dq. Only after one
more increase (at 1024 and more) the value will be in a form
of \(dq1.00 kb\(dq.
.INDENT 7.0
.TP
.B Usage
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
# either of: 
formatter_si_binary.format(<value>, ...)
format_si_binary(<value>, ...)
.ft P
.fi
.UNINDENT
.UNINDENT
.TP
.B Max len
So, in this case \fBmax_value_len\fP must be at least 5 (not 4),
because it\(aqs a minimum requirement for formatting values from 1023
to \-1023.
.sp
The negative values for this formatter are disabled by default and thus 
will be rounded to 0, which decreases the \fBmax_value_len\fP minimum value 
by 1 (to 4).
.sp
Total maximum length is \fBmax_value_len + 3\fP = 7 (base + 3 from separator,
unit and prefix, assuming all of them have 1\-char width).
.TP
.B See
\fI\%format_si_binary()\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilnum.format_si_metric(val, unit=None, color=None)
Wrapper for \fI\%formatter_si_metric.format()\fP\&.
.sp
.nf
.ft C
>>> format_si_metric(1010, \(aqm²\(aq)
\(aq1.01 km²\(aq
>>> format_si_metric(0.0319, \(aqg\(aq)
\(aq31.9 mg\(aq
>>> format_si_metric(1213531546, \(aqW\(aq)  # great scott
\(aq1.21 GW\(aq
>>> format_si_metric(1.26e\-9, \(aqeV\(aq)
\(aq1.26 neV\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval\fP (\fIfloat\fP) \-\- Input value (unitless).
.IP \(bu 2
\fBunit\fP (\fIOptional\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- A unit override [default unit is \(dqm\(dq].
.IP \(bu 2
\fBcolor\fP (\fIOptional\fP\fI[\fP\fIbool\fP\fI]\fP) \-\- If \fITrue\fP, the result will be colorized depending
on prefix type.
.UNINDENT
.TP
.B Returns
Formatted value, \fIText\fP if colorizing is on, \fIstr\fP otherwise.
.TP
.B Return type
\fIRT\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilnum.format_si_binary(val, unit=None, color=False)
Wrapper for \fI\%formatter_si_binary.format()\fP\&.
.sp
.nf
.ft C
>>> format_si_binary(1010)  # 1010 b < 1 kb
\(aq1010 b\(aq
>>> format_si_binary(1080)
\(aq1 kb\(aq
>>> format_si_binary(45200)
\(aq44 kb\(aq
>>> format_si_binary(1.258 * pow(10, 6), \(aqbps\(aq)
\(aq1 Mbps\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval\fP (\fIfloat\fP) \-\- Input value in bytes.
.IP \(bu 2
\fBunit\fP (\fIOptional\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- A unit override [default unit is \(dqb\(dq].
.IP \(bu 2
\fBcolor\fP (\fIbool\fP) \-\- If \fITrue\fP, the result will be colorized depending
on prefix type.
.UNINDENT
.TP
.B Returns
Formatted value, \fIText\fP if colorizing is on, \fIstr\fP otherwise.
.TP
.B Return type
\fIRT\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilnum.format_time_delta(val_sec, max_len=None, color_ov=None)
Format time delta using suitable format (which depends on
\fBmax_len\fP argument). Key feature of this formatter is
ability to combine two units and display them simultaneously,
e.g. return \(dq3h 48min\(dq instead of \(dq228 mins\(dq or \(dq3 hours\(dq,
.sp
There are predefined formatters with output length of 3, 4,
6 and 10 characters. Therefore, you can pass in any value
from 3 inclusive and it\(aqs guarenteed that result\(aqs length
will be less or equal to required length. If \fI\%max_len\fP is
omitted, longest registred formatter will be used.
.sp
.nf
.ft C
>>> format_time_delta(10, 3)
\(aq10s\(aq
>>> format_time_delta(10, 6)
\(aq10.0s\(aq
>>> format_time_delta(15350, 4)
\(aq4 h\(aq
>>> format_time_delta(15350)
\(aq4h 15min\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval_sec\fP (\fIfloat\fP) \-\- Value to format.
.IP \(bu 2
\fBmax_len\fP (\fIOptional\fP\fI[\fP\fIint\fP\fI]\fP) \-\- Maximum output string length (total).
.IP \(bu 2
\fBcolor_ov\fP (\fIOptional\fP\fI[\fP\fIbool\fP\fI]\fP) \-\- Color mode override, \fIbool\fP to enable/disable
colorizing depending on unit type, \fINone\fP to use formatters\(aq
setting value.
.UNINDENT
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilnum.TimeDeltaFormatter(units, color=False, allow_negative=False, allow_fractional=True, unit_separator=None, pad=False, plural_suffix=None, overflow_msg=\(aqOVERFLOW\(aq)
Formatter for time intervals. Key feature of this formatter is
ability to combine two units and display them simultaneously,
e.g. return \(dq3h 48min\(dq instead of \(dq228 mins\(dq or \(dq3 hours\(dq, etc.
.sp
You can create your own formatters if you need fine tuning of the
output and customization. If that\(aqs not the case, there is a
facade method \fI\%format_time_delta()\fP which will select appropriate
formatter automatically.
.sp
Example output:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
\(dq10 secs\(dq, \(dq5 mins\(dq, \(dq4h 15min\(dq, \(dq5d 22h\(dq
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBunits\fP (\fIt.List\fP\fI[\fP\fI\%TimeUnit\fP\fI]\fP) \-\- 
.IP \(bu 2
\fBcolor\fP (\fIbool\fP) \-\- If \fITrue\fP, the result will be colorized depending on unit type.
.IP \(bu 2
\fBallow_negative\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBallow_fractional\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBunit_separator\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBpad\fP (\fIbool\fP) \-\- Set to \fITrue\fP to pad the value with spaces on the left side
and ensure it\(aqs length is equal to \fI\%max_len\fP, or to \fIFalse\fP
to allow shorter result strings.
.IP \(bu 2
\fBplural_suffix\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBoverflow_msg\fP (\fIstr\fP) \-\- 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  max_len:  int
This property cannot be set manually, it is
computed on initialization automatically.
.INDENT 7.0
.TP
.B Returns
Maximum possible output string length.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B format(val_sec, color_ov=None)
Pretty\-print difference between two moments in time. If input
value is too big for the current formatter to handle, return \(dqOVERFLOW\(dq
string (or a part of it, depending on \fBmax_len\fP).
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval_sec\fP (\fIfloat\fP) \-\- Input value.
.IP \(bu 2
\fBcolor_ov\fP (\fIOptional\fP\fI[\fP\fIbool\fP\fI]\fP) \-\- Color mode override, \fIbool\fP to enable/disable
colorizing, \fINone\fP to use formatters\(aq setting value.
.UNINDENT
.TP
.B Returns
Formatted time delta, \fIText\fP if colorizing is on, \fIstr\fP otherwise.
.TP
.B Return type
\fIRT\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B format_base(val_sec, color_ov=None)
Pretty\-print difference between two moments in time. If input
value is too big for the current formatter to handle, return \fINone\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBval_sec\fP (\fIfloat\fP) \-\- Input value.
.IP \(bu 2
\fBcolor_ov\fP (\fIbool\fP) \-\- Color mode override, \fIbool\fP to enable/disable
colorizing, \fINone\fP to use formatters\(aq setting value.
.UNINDENT
.TP
.B Returns
Formatted time delta, \fIText\fP if colorizing is on, \fIstr\fP otherwise.
.TP
.B Return type
RT | None
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilnum.TimeUnit(name:  \(aqstr\(aq, in_next:  \(aqint\(aq  =  None, custom_short:  \(aqstr\(aq  =  None, collapsible_after:  \(aqint\(aq  =  None, overflow_afer:  \(aqint\(aq  =  None)
.INDENT 7.0
.UNINDENT
.UNINDENT
.SS pytermor.utilstr
.sp
Package containing a set of formatters for prettier output, as well as utility classes
for removing some of the boilerplate code when dealing with escape sequences. Also
includes several Python Standard Library methods rewritten for correct work with
strings containing control sequences.
.sp
Functions
.TS
center;
|l|l|.
_
T{
\fI\%apply_filters\fP(string, *args)
T}	T{
Method for applying dynamic filter list to a target string/bytes.
T}
_
T{
\fI\%center_sgr\fP(s, width[, fillchar, actual_len])
T}	T{
SGR\-formatting\-aware implementation of \fBstr.center\fP\&.
T}
_
T{
\fI\%distribute_padded\fP(values, max_len[, ...])
T}	T{
T}
_
T{
\fI\%dump\fP(data[, label, max_len_shift])
T}	T{
T}
_
T{
\fI\%ljust_sgr\fP(s, width[, fillchar, actual_len])
T}	T{
SGR\-formatting\-aware implementation of \fBstr.ljust\fP\&.
T}
_
T{
\fBpad\fP(n)
T}	T{
T}
_
T{
\fBpadv\fP(n)
T}	T{
T}
_
T{
\fI\%rjust_sgr\fP(s, width[, fillchar, actual_len])
T}	T{
SGR\-formatting\-aware implementation of \fBstr.rjust\fP\&.
T}
_
T{
\fI\%wrap_sgr\fP(raw_input, width[, indent_first, ...])
T}	T{
A workaround to make standard library \fBtextwrap.wrap()\fP more friendly to an SGR\-formatted strings.
T}
_
.TE
.sp
Classes
.TS
center;
|l|l|.
_
T{
\fI\%AbstractDumper\fP(char_per_line)
T}	T{
T}
_
T{
\fI\%AbstractStringDumper\fP(char_per_line)
T}	T{
T}
_
T{
\fI\%BytesDumper\fP([char_per_line])
T}	T{
str/bytes as byte hex codes, grouped by 4
T}
_
T{
\fI\%CsiStringReplacer\fP([repl])
T}	T{
Find all CSI seqs (i.e.
T}
_
T{
\fI\%DumperExtra\fP(label)
T}	T{
T}
_
T{
\fBEscSeqStringReplacer\fP([repl])
T}	T{
T}
_
T{
\fI\%IFilter\fP(*args, **kwds)
T}	T{
Main idea is to provide a common interface for string filtering, that can make possible working with filters like with objects rather than with functions/lambdas.
T}
_
T{
\fI\%NonPrintsOmniVisualizer\fP([override])
T}	T{
Input type: \fIstr\fP, \fIbytes\fP\&.
T}
_
T{
\fI\%NonPrintsStringVisualizer\fP([keep_newlines])
T}	T{
Input type: \fIstr\fP\&.
T}
_
T{
\fBNoopFilter\fP(*args, **kwds)
T}	T{
T}
_
T{
\fBOmniDecoder\fP(*args, **kwds)
T}	T{
T}
_
T{
\fBOmniEncoder\fP(*args, **kwds)
T}	T{
T}
_
T{
\fI\%OmniMapper\fP([override])
T}	T{
Input type: \fIstr\fP, \fIbytes\fP\&.
T}
_
T{
\fI\%OmniSanitizer\fP([repl])
T}	T{
Input type: \fIstr\fP, \fIbytes\fP\&.
T}
_
T{
\fI\%SgrStringReplacer\fP([repl])
T}	T{
Find all SGR seqs (e.g.
T}
_
T{
\fI\%StringAligner\fP(align)
T}	T{
T}
_
T{
\fI\%StringDumper\fP([char_per_line])
T}	T{
str as byte hex codes (UTF\-8), grouped by characters
T}
_
T{
\fI\%StringMapper\fP([override])
T}	T{
a
T}
_
T{
\fI\%StringReplacer\fP(pattern, repl)
T}	T{
\&.
T}
_
T{
\fI\%StringUcpDumper\fP([char_per_line])
T}	T{
str as Unicode codepoints
T}
_
.TE
.INDENT 0.0
.TP
.B pytermor.utilstr.distribute_padded(values, max_len, pad_before=False, pad_after=False)
.INDENT 7.0
.INDENT 3.5
.SS Todo
.sp
todo
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvalues\fP (\fIList\fP\fI[\fP\fICRT\fP\fI]\fP) \-\- 
.IP \(bu 2
\fBmax_len\fP (\fIint\fP) \-\- 
.IP \(bu 2
\fBpad_before\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBpad_after\fP (\fIbool\fP) \-\- 
.UNINDENT
.TP
.B Return type
\fICRT\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilstr.ljust_sgr(s, width, fillchar=\(aq \(aq, actual_len=None)
SGR\-formatting\-aware implementation of \fBstr.ljust\fP\&.
.sp
Return a left\-justified string of length \fBwidth\fP\&. Padding is done
using the specified fill character (default is a space).
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilstr.rjust_sgr(s, width, fillchar=\(aq \(aq, actual_len=None)
SGR\-formatting\-aware implementation of \fBstr.rjust\fP\&.
.sp
Return a right\-justified string of length \fBwidth\fP\&. Padding is done
using the specified fill character (default is a space).
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilstr.center_sgr(s, width, fillchar=\(aq \(aq, actual_len=None)
SGR\-formatting\-aware implementation of \fBstr.center\fP\&.
.sp
Return a centered string of length \fBwidth\fP\&. Padding is done using the
specified fill character (default is a space).
.INDENT 7.0
.INDENT 3.5
.SS Todo
.sp
поверить корректность работы в случае эмодзи (напр. 🔋)
если алгоритм поедет \-\- можно заменить на f\-стринги
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilstr.wrap_sgr(raw_input, width, indent_first=0, indent_subseq=0)
A workaround to make standard library \fBtextwrap.wrap()\fP more friendly
to an SGR\-formatted strings.
.sp
The main idea is
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBraw_input\fP (\fIstr\fP\fI | \fP\fIlist\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- 
.IP \(bu 2
\fBwidth\fP (\fIint\fP) \-\- 
.UNINDENT
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.IFilter(*args, **kwds)
Bases: \fBGeneric\fP[\fBIT\fP, \fBOT\fP]
.sp
Main idea is to provide a common interface for string filtering, that can make
possible working with filters like with objects rather than with functions/lambdas.
.INDENT 7.0
.TP
.B abstract  apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
\fIOT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.StringAligner(align)
Bases: \fI\%IFilter\fP[\fBstr\fP, \fBstr\fP]
.INDENT 7.0
.TP
.B apply(inp, raw_mode=False)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIstr\fP) \-\- input string
.IP \(bu 2
\fBextra\fP \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.AbstractDumper(char_per_line)
Bases: \fI\%IFilter\fP[\fBIT\fP, \fBstr\fP]
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fI\%DumperExtra\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.BytesDumper(char_per_line=32)
Bases: \fI\%AbstractDumper\fP[\fBbytes\fP]
.sp
str/bytes as byte hex codes, grouped by 4
.sp
Example output
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
 0000  0A 20 32 31 36 20 20 20  E2 94 82 20 20 75 70 6C  |a
 0010  20 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |a
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fI\%DumperExtra\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.AbstractStringDumper(char_per_line)
Bases: \fI\%AbstractDumper\fP[\fBstr\fP]
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fI\%DumperExtra\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.StringDumper(char_per_line=16)
Bases: \fI\%AbstractStringDumper\fP
.sp
str as byte hex codes (UTF\-8), grouped by characters
.sp
Example output
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
0056  45 4D 20 43 50 55     20     4F 56 48 20 4E   45 3E 0A 20  |E|
0072  20 20 20 20 20 20 E29482     20 20 20 20 20   20 20 20 20  |␣|
0088  20 20 20 20 37 20     2B     30 20 20 20 20 CE94 20 32 68  |␣|
0104  20 33 33 6D 20 20     20 EFAA8F 20 2D 35 20 C2B0 43 20 20  |␣|
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fI\%DumperExtra\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.StringUcpDumper(char_per_line=16)
Bases: \fI\%AbstractStringDumper\fP
.sp
str as Unicode codepoints
.INDENT 7.0
.INDENT 3.5
.SS Todo
.sp
venv/lib/python3.8/site\-packages/pygments/lexers/hexdump.py
.UNINDENT
.UNINDENT
.sp
Example output
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
 56 |U+ 45 4d 20 43 50 55   20   4f 56 48 20 4e  45 3e 0a 20 | EM␣CPU␣OVH␣NE>↵␣
 72 |U+ 20 20 20 20 20 20 2502   20 20 20 20 20  20 20 20 20 | ␣␣␣␣␣␣│␣␣␣␣␣␣␣␣␣
 88 |U+ 20 20 20 20 37 20   2b   30 20 20 20 20 394 20 32 68 | ␣␣␣␣7␣+0␣␣␣␣Δ␣2h
104 |U+ 20 33 33 6d 20 20   20 fa8f 20 2d 35 20  b0 43 20 20 | ␣33m␣␣␣摒␣\-5␣°C␣␣
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fI\%DumperExtra\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.DumperExtra(label:  \(aqstr\(aq)
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.StringReplacer(pattern, repl)
Bases: \fI\%IFilter\fP[\fBstr\fP, \fBstr\fP]
.sp
\&.
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIstr\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.SgrStringReplacer(repl=\(aq\(aq)
Bases: \fI\%StringReplacer\fP
.sp
Find all SGR seqs (e.g. \fBESC\fP\fB[1;4m\fP) and replace with given string. More
specific version of \fBCsiReplacer\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBrepl\fP \-\- Replacement, can contain regexp groups (see \fI\%apply_filters()\fP).
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIstr\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.CsiStringReplacer(repl=\(aq\(aq)
Bases: \fI\%StringReplacer\fP
.sp
Find all CSI seqs (i.e. starting with \fBESC\fP\fB[\fP) and replace with given
string. Less specific version of \fBSgrReplacer\fP, as CSI consists of SGR
and many other sequence subtypes.
.INDENT 7.0
.TP
.B Parameters
\fBrepl\fP \-\- Replacement, can contain regexp groups (see \fI\%apply_filters()\fP).
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIstr\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.OmniMapper(override=None)
Bases: \fI\%IFilter\fP[\fBIT\fP, \fBIT\fP]
.sp
Input type: \fIstr\fP, \fIbytes\fP\&. Abstract mapper. Replaces every character found in
map keys to corresponding map value. Map should be a dictionary of this type:
\fBdict[int, str|bytes|None]\fP; moreover, length of \fIstr\fP/\fIbytes\fP must be strictly 1
character (ASCII codepage). If there is a necessity to map Unicode characters,
\fI\%StringMapper\fP should be used instead.
.sp
.nf
.ft C
>>> OmniMapper({0x20: \(aq.\(aq}).apply(b\(aqabc def ghi\(aq)
b\(aqabc.def.ghi\(aq
.ft P
.fi
.sp
For mass mapping it is better to subclass \fI\%OmniMapper\fP and override two methods \-\-
\fB_get_default_keys\fP and \fB_get_default_replacer\fP\&. In this case you don\(aqt have to
manually compose a replacement map with every character you want to replace.
.INDENT 7.0
.TP
.B Parameters
\fBoverride\fP \-\- a dictionary with mappings: keys must be \fIints\fP, values must be
either a single\-char \fIstrs\fP or \fIbytes\fP, or None.
.TP
.B See
\fI\%NonPrintsOmniVisualizer\fP
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
\fIIT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.StringMapper(override=None)
Bases: \fI\%OmniMapper\fP[\fBstr\fP]
.sp
a
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIstr\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.NonPrintsOmniVisualizer(override=None)
Bases: \fI\%OmniMapper\fP
.sp
Input type: \fIstr\fP, \fIbytes\fP\&. Replace every whitespace character with \fB\&.\fP\&.
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
\fIIT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.NonPrintsStringVisualizer(keep_newlines=True)
Bases: \fI\%StringMapper\fP
.sp
Input type: \fIstr\fP\&. Replace every whitespace character with \(dq·\(dq, except
newlines. Newlines are kept and get prepneded with same char by default,
but this behaviour can be disabled with \fBkeep_newlines\fP = \fIFalse\fP\&.
.sp
.nf
.ft C
>>> NonPrintsStringVisualizer().apply(\(aqA  B  C\(aq)
\(aqA␣␣B␣␣C\(aq
>>> apply_filters(\(aq1. D\(aq+os.linesep+\(aq2. L \(aq, NonPrintsStringVisualizer(keep_newlines=False))
\(aq1.␣D↵2.␣L␣\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
\fBkeep_newlines\fP \-\- When \fITrue\fP, transform newline characters into \(dq↵\en\(dq, or
into just \(dq↵\(dq otherwise.
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIstr\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.OmniSanitizer(repl=b\(aq.\(aq)
Bases: \fI\%OmniMapper\fP
.sp
Input type: \fIstr\fP, \fIbytes\fP\&. Replace every control character and every non\-ASCII
character (0x80\-0xFF) with \(dq.\(dq, or with specified char. Note that the replacement
should be a single ASCII character, because \fBOmni\-\fP filters are designed to work
with \fIstr\fP inputs and \fIbytes\fP inputs on equal terms.
.INDENT 7.0
.TP
.B Parameters
\fBrepl\fP \-\- Value to replace control/non\-ascii characters with. Should be strictly 1
character long.
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp, extra=None)
Apply the filter to input \fIstr\fP or \fIbytes\fP\&.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBinp\fP (\fIIT\fP) \-\- input string
.IP \(bu 2
\fBextra\fP (\fIOptional\fP\fI[\fP\fIAny\fP\fI]\fP) \-\- additional options
.UNINDENT
.TP
.B Returns
transformed string; the type can match the input type,
as well as be different \-\- that depends on filter type.
.TP
.B Return type
\fIIT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilstr.apply_filters(string, *args)
Method for applying dynamic filter list to a target string/bytes.
Example (will replace all \fBESC\fP control characters to \fBE\fP and
thus make SGR params visible):
.sp
.nf
.ft C
>>> from pytermor import SeqIndex
>>> apply_filters(f\(aq{SeqIndex.RED}test{SeqIndex.COLOR_OFF}\(aq, SgrStringReplacer(r\(aqE\(aq))
\(aqE[31mtestE[39m\(aq
.ft P
.fi
.sp
Note that type of \fBs\fP argument must be same as \fBStringFilter\fP parameterized
type, i.e. \fBReplaceNonAsciiBytes\fP is \fBStringFilter\fP type, so
you can apply it only to bytes\-type strings.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIIT\fP) \-\- String to filter.
.IP \(bu 2
\fBargs\fP (\fIUnion\fP\fI[\fP\fIOmniFilter\fP\fI, \fP\fIType\fP\fI[\fP\fIOmniFilter\fP\fI]\fP\fI]\fP) \-\- \fBOmniFilter\fP instance(s) or \fBOmniFilter\fP type(s).
.UNINDENT
.TP
.B Returns
Filtered \fBs\fP\&.
.TP
.B Return type
\fIOT\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilstr.dump(data, label=None, max_len_shift=None)
.INDENT 7.0
.INDENT 3.5
.SS Todo
.INDENT 0.0
.IP \(bu 2
format selection
.IP \(bu 2
special handling of one\-line input
.IP \(bu 2
squash repeating lines
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Return type
str | None
.UNINDENT
.UNINDENT
.SH CHANGELOG
.SS v2.23\-dev
.INDENT 0.0
.IP \(bu 2
Extracted \fI\%resolve\fP, \fI\%approximate\fP, \fI\%find_closest\fP from \fBColor\fP class to module\-level.
.IP \(bu 2
As well as color transform functions.
.IP \(bu 2
Add missing \fI\%hsv_to_rgb\fP function.
.IP \(bu 2
\fBGenericPrniter\fP and \fI\%OmniMapper\fP\&.
.IP \(bu 2
\fI\%StringDumper\fP and \fI\%StringUcpDumper\fP\&.
.IP \(bu 2
\fI\%SgrRenderer\fP support for custom I/O streams.
.IP \(bu 2
\fI\%FrozenText\fP class.
.UNINDENT
.SS v2.18\-dev
.INDENT 0.0
.IP \(bu 2
\fI\%cval\fP autobuild.
.IP \(bu 2
\fBArgCountError\fP migrated from \fBes7s/core\fP\&.
.IP \(bu 2
\fBblack\fP code style.
.IP \(bu 2
Add \fBOmniHexPrinter\fP and \fI\%chunk()\fP helper.
.IP \(bu 2
Typehinting.
.IP \(bu 2
Disabled automatic rendering of \fI\%echo()\fP and \fI\%render()\fP\&.
.UNINDENT
.SS v2.14\-dev
.sp
Dec 22
.INDENT 0.0
.IP \(bu 2
\fI\%confirm()\fP helper command.
.IP \(bu 2
\fBEscapeSequenceStringReplacer\fP filter.
.IP \(bu 2
\fBexamples/terminal_benchmark\fP script.
.IP \(bu 2
\fBStringFilter\fP and \fBOmniFilter\fP classes.
.IP \(bu 2
Docs design fixes.
.IP \(bu 2
Minor core improvements.
.IP \(bu 2
Tests for \fI\%color\fP module.
.IP \(bu 2
RGB and variations full support.
.UNINDENT
.SS v2.6\-dev
.sp
Nov 22
.INDENT 0.0
.IP \(bu 2
Got rid of \fBSpan\fP class.
.IP \(bu 2
Rewrite of \fI\%color\fP module.
.IP \(bu 2
Changes in \fBConfigurableRenderer.force_styles\fP logic.
.IP \(bu 2
\fI\%Text\fP nesting.
.IP \(bu 2
\fBTemplateEngine\fP implementation.
.IP \(bu 2
Package reorganizing.
.UNINDENT
.SS v2.2\-dev
.sp
Oct 22
.INDENT 0.0
.IP \(bu 2
Named colors list.
.IP \(bu 2
IRenderable\(ga interface.
.IP \(bu 2
Color config.
.IP \(bu 2
\fI\%TmuxRenderer\fP
.IP \(bu 2
\fI\%wait_key()\fP input helper.
.UNINDENT
.SS v2.1\-dev
.sp
Aug 22
.INDENT 0.0
.IP \(bu 2
Color presets.
.IP \(bu 2
More unit tests for formatters.
.UNINDENT
.SS v2.0\-dev
.sp
Jul 22
.INDENT 0.0
.IP \(bu 2
Complete library rewrite.
.IP \(bu 2
High\-level abstractions \fBColor\fP, \fI\%Renderer\fP and \fI\%Style\fP\&.
.IP \(bu 2
Unit tests for formatters and new modules.
.IP \(bu 2
\fBpytest\fP and \fBcoverage\fP integration.
.IP \(bu 2
\fBsphinx\fP and \fBreadthedocs\fP integraton.
.UNINDENT
.SS v1.8
.sp
Jun 22
.INDENT 0.0
.IP \(bu 2
\fBformat_prefixed_unit\fP extended for working with decimal and binary metric prefixes.
.IP \(bu 2
\fI\%format_time_delta\fP extended with new settings.
.IP \(bu 2
Value rounding transferred from  \fI\%format_auto_float\fP to \fBformat_prefixed_unit\fP\&.
.IP \(bu 2
Utility classes reorganization.
.IP \(bu 2
Unit tests output formatting.
.IP \(bu 2
\fBsequence.NOOP\fP SGR sequence and \fBspan.NOOP\fP format.
.IP \(bu 2
Max decimal points for \fBauto_float\fP extended from (2) to (max\-2).
.UNINDENT
.SS v1.7.4
.INDENT 0.0
.IP \(bu 2
Added 3 formatters: \fBformat_prefixed_unit\fP, \fI\%format_time_delta\fP, \fI\%format_auto_float\fP\&.
.UNINDENT
.SS v1.7.3
.sp
May 22
.INDENT 0.0
.IP \(bu 2
Added \fBspan.BG_BLACK\fP format.
.UNINDENT
.SS v1.7.2
.INDENT 0.0
.IP \(bu 2
Added \fI\%ljust_sgr\fP, \fI\%rjust_sgr\fP, \fI\%center_sgr\fP util functions to align strings with SGRs correctly.
.UNINDENT
.SS v1.7.1
.INDENT 0.0
.IP \(bu 2
Print reset sequence as \fB\ee[m\fP instead of \fB\ee[0m\fP\&.
.UNINDENT
.SS v1.7
.INDENT 0.0
.IP \(bu 2
\fBSpan\fP constructor can be called without arguments.
.IP \(bu 2
Added SGR code lists.
.UNINDENT
.SS v1.6.2
.INDENT 0.0
.IP \(bu 2
Excluded \fBtests\fP dir from distribution package.
.UNINDENT
.SS v1.6.1
.INDENT 0.0
.IP \(bu 2
Ridded of \fBEmptyFormat\fP and \fBAbstractFormat\fP classes.
.IP \(bu 2
Renamed \fBcode\fP module to \fBsgr\fP because of conflicts in PyCharm debugger (\fBpydevd_console_integration.py\fP).
.UNINDENT
.SS v1.5
.INDENT 0.0
.IP \(bu 2
Removed excessive \fBEmptySequenceSGR\fP \-\- default \fBSGR\fP class was specifically implemented to print out as empty string instead of \fB\ee[m\fP if constructed without params.
.UNINDENT
.SS v1.4
.INDENT 0.0
.IP \(bu 2
\fBSpan.wrap()\fP now accepts any type of argument, not only \fIstr\fP\&.
.IP \(bu 2
Rebuilt \fBSequence\fP inheritance tree.
.IP \(bu 2
Added equality methods for \fI\%SequenceSGR\fP and \fBSpan\fP classes/subclasses.
.IP \(bu 2
Added some tests for \fBfmt.*\fP and \fBseq.*\fP classes.
.UNINDENT
.SS v1.3.2
.INDENT 0.0
.IP \(bu 2
Added \fBspan.GRAY\fP and \fBspan.BG_GRAY\fP format presets.
.UNINDENT
.SS v1.3.1
.INDENT 0.0
.IP \(bu 2
Interface revisioning.
.UNINDENT
.SS v1.2.1
.INDENT 0.0
.IP \(bu 2
\fBopening_seq\fP and \fBclosing_seq\fP properties for \fBSpan\fP class.
.UNINDENT
.SS v1.2
.INDENT 0.0
.IP \(bu 2
\fBEmptySequenceSGR\fP and \fBEmptyFormat\fP classes.
.UNINDENT
.SS v1.1
.sp
Apr 22
.INDENT 0.0
.IP \(bu 2
Autoformat feature.
.UNINDENT
.SS v1.0
.INDENT 0.0
.IP \(bu 2
First public version.
.UNINDENT
.SS v0.90
.sp
Mar 22
.INDENT 0.0
.IP \(bu 2
First commit.
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.sp
This project uses Semantic Versioning \-\- \fI\%https://semver.org\fP \fI(starting from 2.0)\fP
.SH LICENSE
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MIT License

Copyright (c) 2022 Aleksandr Shavykin

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \(dqSoftware\(dq), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \(dqAS IS\(dq, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


.ft P
.fi
.UNINDENT
.UNINDENT
.SH AUTHOR
Alexandr Shavykin
.SH COPYRIGHT
2022, Alexandr Shavykin
.\" Generated by docutils manpage writer.
.
