.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "TODO" "1" "Nov 27, 2022" "2.11.0-dev2" "pytermor"
.SH NAME
Todo \- pytermor 2.11.0-dev2
.sp
\fI(yet another)\fP Python library designed for formatting terminal output using ANSI escape codes. Implements automatic \fI\%\(dqsoft\(dq\fP format termination. Provides a registry of low\-level SGR \fI\%sequences\fP and formatting \fBspans\fP (or combined sequences). Also includes a set of formatters for pretty output.
.sp
Key feature of this library is providing necessary abstractions for building complex text sections with lots of formatting, while keeping the application code clear and readable.
.sp
No dependencies besides Python Standard Library are required \fI(there are some for testing and docs building, though).\fP
.INDENT 0.0
.INDENT 3.5
.sp
This is how you \fBshould\fP format examples:
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 2.5
[image]
\fI\%https://chrisyeh96.github.io/2020/03/28/terminal\-colors.html#color\-schemes\fP.UNINDENT
.UNINDENT
.SH GUIDE
.SS Getting started
.SS Installation
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
pip install pytermor
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Structure
.TS
center;
|l|l|l|l|.
_
T{
A L
T}	T{
Module
T}	T{
Class(es)
T}	T{
Purpose
T}
_
T{
Hi
T}	T{
\fI\%text\fP
T}	T{
\fI\%Text\fP
T}	T{
Container consisting of text pieces each with attached \fBStyle\fP\&.
Renders into specified format keeping all the formatting.
T}
_
T{
\fBStyle\fP
\fI\%Styles\fP
T}	T{
Reusable abstractions defining colors and text attributes (text
color, bg color, \fIbold\fP attribute, \fIunderlined\fP attribute etc).
T}
_
T{
\fI\%SgrRenderer\fP
\fI\%HtmlRenderer\fP
\fI\%TmuxRenderer\fP etc.
T}	T{
\fBSgrRenderer\fP transforms \fBStyle\fP instances into \fBColor\fP, \fBSpan\fP
and \fBSequenceSGR\fP instances and assembles it all up. There are
several other implementations depending on what output
format is required.
T}
_
T{
\fI\%color\fP
T}	T{
\fI\%Color16\fP
\fI\%Color256\fP
\fI\%ColorRGB\fP
T}	T{
Abstractions for color operations in different color modes
(default 16\-color, 256\-color, RGB). Tools for color approximation
and transformations.
T}
_
T{
\fI\%pytermor\fP
T}	T{
Color registry.
T}
_
T{
Lo
T}	T{
\fI\%ansi\fP
T}	T{
\fBSpan\fP
T}	T{
Abstraction consisting of \(dqopening\(dq SGR sequence defined by the
developer (or taken from preset list) and complementary \(dqclosing\(dq
SGR sequence that is built automatically.
T}
_
T{
\fBSpans\fP
T}	T{
Registry of predefined instances in case the developer doesn\(aqt need dynamic
output formatting and just wants to colorize an error message.
T}
_
T{
\fI\%SequenceSGR\fP
\fI\%SeqIndex\fP
T}	T{
Abstractions for manipulating ANSI control sequences and
classes\-factories, plus a registry of preset SGRs.
T}
_
T{
\fBIntCodes\fP
T}	T{
Registry of escape control sequence parameters.
T}
_
T{
\fButil\fP
T}	T{
*
T}	T{
Additional formatters and common methods for manipulating strings with
SGRs inside.
T}
_
.TE
.SS Features
.sp
One of the core concepts of the library is \fBSpan\fP class. \fBSpan\fP is a combination of two control sequences;
it wraps specified string with pre\-defined leading and trailing SGR definitions.
.sp
Example code:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import Spans

print(Spans.RED(\(aqFeat\(aq) + Spans.BOLD(\(aqures\(aq))

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Content\-aware format nesting
.sp
Compose text spans with automatic content\-aware span termination. Preset spans can safely overlap with each
other (as long as they require different \fIbreaker\fP sequences to reset).
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import Span

span1 = Span(\(aqblue\(aq, \(aqbold\(aq)
span2 = Span(\(aqcyan\(aq, \(aqinversed\(aq, \(aqunderlined\(aq, \(aqitalic\(aq)

msg = span1(f\(aqContent{span2(\(dq\-aware format\(dq)} nesting\(aq)
print(msg)

.ft P
.fi
.UNINDENT
.UNINDENT
[image]
.sp
Flexible sequence builder
.sp
Create your own \fI\%SGR sequences\fP using default constructor, which accepts color/attribute keys,
integer codes and even existing \fISGRs\fP, in any amount and in any order. Key resolving is case\-insensitive.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import SeqIndex, SequenceSGR

seq1 = SequenceSGR(\(aqhi_blue\(aq, 1)  # keys or integer codes
seq2 = SequenceSGR(seq1, SeqIndex.ITALIC)  # existing SGRs
seq3 = SequenceSGR(\(aqunderlined\(aq, \(aqYELLOW\(aq)  # case\-insensitive

msg = f\(aq{seq1}Flexible{SeqIndex.RESET} \(aq + \e
      f\(aq{seq2}sequence{SeqIndex.RESET} \(aq + \e
      str(seq3) + \(aqbuilder\(aq + str(SeqIndex.RESET)
print(msg)

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
256 colors / True Color support
.sp
The library supports extended color modes:
.INDENT 0.0
.IP \(bu 2
XTerm 256 colors indexed mode (see \fI\%Preset list\fP);
.IP \(bu 2
True Color RGB mode (16M colors).
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import SequenceSGR, SeqIndex

start_color = 41
for idx, c in enumerate(range(start_color, start_color+(36*6), 36)):
    print(f\(aq{SequenceSGR.new_color_256(c)}███{SeqIndex.COLOR_OFF}\(aq, end=\(aq\(aq)

print(\(aq\en\(aq)
for idx, c in enumerate(range(0, 256, 256//17)):
    r = max(0, 255\-c)
    g = max(0, min(255, 127\-(c*2)))
    b = c
    print(f\(aq{SequenceSGR.new_color_rgb(r, g, b)}█{SeqIndex.COLOR_OFF}\(aq, end=\(aq\(aq)

.ft P
.fi
.UNINDENT
.UNINDENT
[image]
.sp
Customizable output formats
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
@TODOTODO
.UNINDENT
.UNINDENT
.sp
String and number formatters
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
@TODOTODO
.UNINDENT
.UNINDENT
.SS High\-level abstractions
.SS ColorIndex and Styles
.SS Output format control
.SS Color mode fallbacks
.SS Core API
.sp
@EXAMPLES
.SS Low\-level abstractions
.sp
So, what\(aqs happening under the hood?
.SS Format soft reset
.sp
There are two ways to manage color and attribute termination:
.INDENT 0.0
.IP \(bu 2
hard reset (SGR\-0 or \fBESC [0m\fP)
.IP \(bu 2
soft reset (SGR\-22, 23, 24 etc.)
.UNINDENT
.sp
The main difference between them is that \fIhard\fP reset disables all formatting after itself, while \fIsoft\fP
reset disables only actually necessary attributes (i.e. used as opening sequence in \fBSpan\fP instance\(aqs context)
and keeps the other.
.sp
That\(aqs what \fBSpan\fP class is designed for: to simplify creation of soft\-resetting text spans, so that developer
doesn\(aqt have to restore all previously applied formats after every closing sequence.
.sp
Example
.sp
We are given a text span which is initially \fIbold\fP and \fIunderlined\fP\&. We want to recolor a few words inside of this
span. By default this will result in losing all the formatting to the right of updated text span (because
\fI\%RESET\fP, or \fBESC [0m\fP, clears all text attributes).
.sp
However, there is an option to specify what attributes should be disabled or let the library do that for you:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import Span, Spans, SeqIndex

# implicitly:
span_warn = Span(93, 4)
# or explicitly:
span_warn = Span.init_explicit(
    SeqIndex.HI_YELLOW + SeqIndex.UNDERLINED,  # sequences can be summed up, remember?
    SeqIndex.COLOR_OFF + SeqIndex.UNDERLINED_OFF,  # \(dqcounteractive\(dq sequences
    hard_reset_after=False
)

orig_text = Spans.BOLD(f\(aqthis is {SeqIndex.BG_GRAY}the original{SeqIndex.RESET} string\(aq)
updated_text = orig_text.replace(\(aqoriginal\(aq, span_warn(\(aqupdated\(aq), 1)
print(orig_text, \(aq\en\(aq, updated_text)

.ft P
.fi
.UNINDENT
.UNINDENT
[image]
.sp
As you can see, the update went well \-\- we kept all the previously applied formatting. Of course, this method
cannot be 100% applicable; for example, imagine that original text was colored blue. After the update \(dqstring\(dq
word won\(aqt be blue anymore, as we used \fBSeqIndex.COLOR_OFF\fP escape sequence to neutralize our own yellow color.
But it still can be helpful for a majority of cases (especially when text is generated and formatted by the same
program and in one go).
.SS Working with Spans
.sp
Use \fBSpan\fP constructor to create new instance with specified control sequence(s) as a opening/starter sequence
and \fBautomatically composed\fP closing sequence that will terminate attributes defined in opening sequence while
keeping the others (soft reset).
.sp
Resulting sequence params\(aq order is the same as argument\(aqs order.
.sp
Each sequence param can be specified as:
.INDENT 0.0
.IP \(bu 2
string key (see \fI\%Preset list\fP);
.IP \(bu 2
integer param value;
.IP \(bu 2
existing \fI\%SequenceSGR\fP instance (params will be extracted).
.UNINDENT
.sp
It\(aqs also possible to avoid auto\-composing mechanism and create \fBSpan\fP with
explicitly set parameters using \fBSpan.init_explicit()\fP\&.
.SS Creating and applying SGRs
.sp
You can use any of predefined sequences from \fI\%SeqIndex\fP registry or create your own via standard constructor. Valid
argument values as well as preset constants are described in \fI\%Preset list\fP page.
.sp
\fBIMPORTANT:\fP
.INDENT 0.0
.INDENT 3.5
\fBSequenceSGR\fP with zero params was specifically implemented to translate into an empty string and not
into \fBESC [m\fP, which would make sense, but also could be very entangling, as terminal emulators interpret
that sequence as \fBESC [0m\fP, which is \fIhard\fP reset sequence.
.UNINDENT
.UNINDENT
.sp
There is also a set of methods for dynamic \fBSequenceSGR\fP creation:
.INDENT 0.0
.IP \(bu 2
\fI\%make_color_256()\fP will produce sequence operating in 256\-colors mode (for a complete list
see \fI\%Preset list\fP);
.IP \(bu 2
\fI\%make_color_rgb()\fP will create a sequence capable of setting the colors in True Color 16M mode (however, some terminal emulators doesn\(aqt
support it).
.UNINDENT
.sp
To get the resulting sequence chars use \fI\%assemble()\fP method or cast instance to \fIstr\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import SequenceSGR

seq = SequenceSGR(4, 7)
msg = f\(aq({seq})\(aq

print(msg + f\(aq{SequenceSGR(0).assemble()}\(aq)
print(str(msg.assemble()))
print(msg.assemble().hex(\(aq:\(aq))

.ft P
.fi
.UNINDENT
.UNINDENT
[image]
.INDENT 0.0
.IP \(bu 2
First line is the string with encoded escape sequence;
.IP \(bu 2
Second line shows up the string in raw mode, as if sequences were ignored by the terminal;
.IP \(bu 2
Third line is hexadecimal string representation.
.UNINDENT
.SS SGR sequence structure
.INDENT 0.0
.IP 1. 3
\fBESC \(ga\(ga is escape *control character*, which opens a control sequence (can also be
written as \(ga\(ga\ex1b\fP, \fB\e033\fP or \fB\ee\fP).
.IP 2. 3
\fB[\fP is sequence \fIintroducer\fP; it determines the type of control sequence (in this case
it\(aqs CSI).
.IP 3. 3
\fB4\fP and \fB7\fP are \fIparameters\fP of the escape sequence; they mean \(dqunderlined\(dq and \(dqinversed\(dq
attributes respectively. Those parameters must be separated by \fB;\fP\&.
.IP 4. 3
\fBm\fP is sequence \fIterminator\fP; it also determines the sub\-type of sequence, in our
case SGR\&. Sequences of this kind are most commonly encountered.
.UNINDENT
.SS Combining SGRs
.sp
One instance of \fI\%SequenceSGR\fP can be added to another. This will result in a new \fBSequenceSGR\fP with combined params.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
from pytermor import SequenceSGR, SeqIndex

combined = SequenceSGR(1, 31) + SequenceSGR(4)
print(f\(aq{combined}combined{SeqIndex.RESET}\(aq, str(combined).assemble())

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Core API
.SS Preset list
.sp
Preset lists are omitted from API docs to avoid unnesessary duplication;
summary list of all presets defined in the library (not including
\fButil.*\fP) is displayed here.
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
USAGE \- list all memthods that accept string keys of those prsets.
.UNINDENT
.UNINDENT
.sp
There are two types of color palettes used in modern terminals \-\- first one
containing 16 colors (\fI\%Color16\fP), and second one consisting of 256 colors
(\fI\%Color256\fP). There is also True Color mode (referenced as \fIRGB\fP mode),
but it is not palette\-based.
.IP "System Message: ERROR/3 (/home/a.shavykin/dl/pytermor/docs/guide/presets.rst:, line 26)"
Duplicate substitution definition name: \(dqnbsp\(dq.
.SS Meta, attributes, resetters
.TS
center;
|l|l|l|l|l|l|l|l|.
_
T{
T}	T{
\fBName\fP
T}	T{
int
T}	T{
seq
T}	T{
spn
T}	T{
clr
T}	T{
sty
T}	T{
\fBDescription\fP
T}
_
T{
Meta
T}
_
T{
T}	T{
\fBNOOP\fP
T}	T{
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
No\-operation; always assembled as empty string
T}
_
T{
T}	T{
\fBRESET\fP
T}	T{
\fB0\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Reset all attributes and colors
T}
_
T{
Attributes
T}
_
T{
T}	T{
\fBBOLD\fP
T}	T{
\fB1\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fBV\fP\ [1]
T}	T{
Bold or increased intensity
T}
_
T{
T}	T{
\fBDIM\fP
T}	T{
\fB2\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fBV\fP
T}	T{
Faint, decreased intensity
T}
_
T{
T}	T{
\fBITALIC\fP
T}	T{
\fB3\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fBV\fP
T}	T{
Italic; \fInot widely supported\fP
T}
_
T{
T}	T{
\fBUNDERLINED\fP
T}	T{
\fB4\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fBV\fP
T}	T{
Underline
T}
_
T{
T}	T{
\fBBLINK_SLOW\fP
T}	T{
\fB5\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
\fBV\fP\ [2]
T}	T{
Set blinking to < 150 cpm
T}
_
T{
T}	T{
\fBBLINK_FAST\fP
T}	T{
\fB6\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Set blinking to 150+ cpm; \fInot widely supported\fP
T}
_
T{
T}	T{
\fBINVERSED\fP
T}	T{
\fB7\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fBV\fP
T}	T{
Swap foreground and background colors
T}
_
T{
T}	T{
\fBHIDDEN\fP
T}	T{
\fB8\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Conceal characters; \fInot widely supported\fP
T}
_
T{
T}	T{
\fBCROSSLINED\fP
T}	T{
\fB9\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
Strikethrough
T}
_
T{
T}	T{
\fBDOUBLE_UNDERLINED\fP
T}	T{
\fB21\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Double\-underline; \fIon several terminals disables\fP \fBBOLD\fP \fIinstead\fP
T}
_
T{
T}	T{
\fBCOLOR_EXTENDED\fP
T}	T{
\fB38\fP
T}	T{
T}	T{
T}	T{
T}	T{
T}	T{
Set foreground color [\fIindexed\fP/\fIRGB\fP mode];
\fIuse\fP \fI\%make_color_256\fP \fIand\fP \fI\%make_color_rgb\fP \fIinstead\fP
T}
_
T{
T}	T{
\fBBG_COLOR_EXTENDED\fP
T}	T{
\fB48\fP
T}	T{
T}	T{
T}	T{
T}	T{
T}	T{
Set background color [\fIindexed\fP/\fIRGB\fP mode];
\fIuse\fP \fI\%make_color_256\fP \fIand\fP \fI\%make_color_rgb\fP \fIinstead\fP
T}
_
T{
T}	T{
\fBOVERLINED\fP
T}	T{
\fB53\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fBV\fP
T}	T{
Overline; \fInot widely supported\fP
T}
_
T{
Resetters
T}
_
T{
T}	T{
\fBBOLD_DIM_OFF\fP
T}	T{
\fB22\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Disable \fBBOLD\fP and \fBDIM\fP attributes. \fISpecial aspects... It\(aqs
impossible to reliably disable them on a separate basis.\fP
T}
_
T{
T}	T{
\fBITALIC_OFF\fP
T}	T{
\fB23\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Disable italic
T}
_
T{
T}	T{
\fBUNDERLINED_OFF\fP
T}	T{
\fB24\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Disable underlining
T}
_
T{
T}	T{
\fBBLINK_OFF\fP
T}	T{
\fB25\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Disable blinking
T}
_
T{
T}	T{
\fBINVERSED_OFF\fP
T}	T{
\fB27\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Disable inversing
T}
_
T{
T}	T{
\fBHIDDEN_OFF\fP
T}	T{
\fB28\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Disable conecaling
T}
_
T{
T}	T{
\fBCROSSLINED_OFF\fP
T}	T{
\fB29\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Disable strikethrough
T}
_
T{
T}	T{
\fBCOLOR_OFF\fP
T}	T{
\fB39\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Reset foreground color
T}
_
T{
T}	T{
\fBBG_COLOR_OFF\fP
T}	T{
\fB49\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Reset background color
T}
_
T{
T}	T{
\fBOVERLINED_OFF\fP
T}	T{
\fB55\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
T}	T{
T}	T{
Disable overlining
T}
_
T{
.IP [1] 5
for this and subsequent items in \(dqAttributes\(dq section: as boolean flags.
.IP [2] 5
as \fBblink\fP\&.
T}
_
.TE
.SS Default colors
.TS
center;
|l|l|l|l|l|l|l|l|l|.
_
T{
T}	T{
\fBName\fP
T}	T{
int
T}	T{
seq
T}	T{
spn
T}	T{
clr
T}	T{
sty
T}	T{
\fBRGB code\fP
T}	T{
\fBXTerm name\fP
T}
_
T{
Foreground \fIdefault\fP colors
T}
_
T{
[image]
T}	T{
\fBBLACK\fP
T}	T{
\fB30\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#000000\fP
T}	T{
Black
T}
_
T{
[image]
T}	T{
\fBRED\fP
T}	T{
\fB31\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#800000\fP
T}	T{
Maroon
T}
_
T{
[image]
T}	T{
\fBGREEN\fP
T}	T{
\fB32\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#008000\fP
T}	T{
Green
T}
_
T{
[image]
T}	T{
\fBYELLOW\fP
T}	T{
\fB33\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#808000\fP
T}	T{
Olive
T}
_
T{
[image]
T}	T{
\fBBLUE\fP
T}	T{
\fB34\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#000080\fP
T}	T{
Navy
T}
_
T{
[image]
T}	T{
\fBMAGENTA\fP
T}	T{
\fB35\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#800080\fP
T}	T{
Purple
T}
_
T{
[image]
T}	T{
\fBCYAN\fP
T}	T{
\fB36\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#008080\fP
T}	T{
Teal
T}
_
T{
[image]
T}	T{
\fBWHITE\fP
T}	T{
\fB37\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#c0c0c0\fP
T}	T{
Silver
T}
_
T{
Background \fIdefault\fP colors
T}
_
T{
[image]
T}	T{
\fBBG_BLACK\fP
T}	T{
\fB40\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#000000\fP
T}	T{
Black
T}
_
T{
[image]
T}	T{
\fBBG_RED\fP
T}	T{
\fB41\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#800000\fP
T}	T{
Maroon
T}
_
T{
[image]
T}	T{
\fBBG_GREEN\fP
T}	T{
\fB42\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#008000\fP
T}	T{
Green
T}
_
T{
[image]
T}	T{
\fBBG_YELLOW\fP
T}	T{
\fB43\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#808000\fP
T}	T{
Olive
T}
_
T{
[image]
T}	T{
\fBBG_BLUE\fP
T}	T{
\fB44\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#000080\fP
T}	T{
Navy
T}
_
T{
[image]
T}	T{
\fBBG_MAGENTA\fP
T}	T{
\fB45\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#800080\fP
T}	T{
Purple
T}
_
T{
[image]
T}	T{
\fBBG_CYAN\fP
T}	T{
\fB46\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#008080\fP
T}	T{
Teal
T}
_
T{
[image]
T}	T{
\fBBG_WHITE\fP
T}	T{
\fB47\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#c0c0c0\fP
T}	T{
Silver
T}
_
T{
High\-intensity foreground \fIdefault\fP colors
T}
_
T{
[image]
T}	T{
\fBGRAY\fP
T}	T{
\fB90\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#808080\fP
T}	T{
Grey
T}
_
T{
[image]
T}	T{
\fBHI_RED\fP
T}	T{
\fB91\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff0000\fP
T}	T{
Red
T}
_
T{
[image]
T}	T{
\fBHI_GREEN\fP
T}	T{
\fB92\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ff00\fP
T}	T{
Lime
T}
_
T{
[image]
T}	T{
\fBHI_YELLOW\fP
T}	T{
\fB93\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffff00\fP
T}	T{
Yellow
T}
_
T{
[image]
T}	T{
\fBHI_BLUE\fP
T}	T{
\fB94\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0000ff\fP
T}	T{
Blue
T}
_
T{
[image]
T}	T{
\fBHI_MAGENTA\fP
T}	T{
\fB95\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff00ff\fP
T}	T{
Fuchsia
T}
_
T{
[image]
T}	T{
\fBHI_CYAN\fP
T}	T{
\fB96\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ffff\fP
T}	T{
Aqua
T}
_
T{
[image]
T}	T{
\fBHI_WHITE\fP
T}	T{
\fB97\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffffff\fP
T}	T{
White
T}
_
T{
High\-intensity background \fIdefault\fP colors
T}
_
T{
[image]
T}	T{
\fBBG_GRAY\fP
T}	T{
\fB100\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#808080\fP
T}	T{
Grey
T}
_
T{
[image]
T}	T{
\fBBG_HI_RED\fP
T}	T{
\fB101\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff0000\fP
T}	T{
Red
T}
_
T{
[image]
T}	T{
\fBBG_HI_GREEN\fP
T}	T{
\fB102\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ff00\fP
T}	T{
Lime
T}
_
T{
[image]
T}	T{
\fBBG_HI_YELLOW\fP
T}	T{
\fB103\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffff00\fP
T}	T{
Yellow
T}
_
T{
[image]
T}	T{
\fBBG_HI_BLUE\fP
T}	T{
\fB104\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0000ff\fP
T}	T{
Blue
T}
_
T{
[image]
T}	T{
\fBBG_HI_MAGENTA\fP
T}	T{
\fB105\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff00ff\fP
T}	T{
Fuchsia
T}
_
T{
[image]
T}	T{
\fBBG_HI_CYAN\fP
T}	T{
\fB106\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ffff\fP
T}	T{
Aqua
T}
_
T{
[image]
T}	T{
\fBBG_HI_WHITE\fP
T}	T{
\fB107\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffffff\fP
T}	T{
White
T}
_
.TE
.SS Indexed colors
.TS
center;
|l|l|l|l|l|l|l|l|l|.
_
T{
T}	T{
\fBName\fP
T}	T{
int
T}	T{
seq
T}	T{
spn
T}	T{
clr
T}	T{
sty
T}	T{
\fBRGB code\fP
T}	T{
\fBXTerm name\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_BLACK\fP [3]
T}	T{
\fB0\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#000000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MAROON\fP
T}	T{
\fB1\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#800000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREEN\fP
T}	T{
\fB2\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#008000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_OLIVE\fP
T}	T{
\fB3\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#808000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_NAVY\fP
T}	T{
\fB4\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#000080\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PURPLE_5\fP
T}	T{
\fB5\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#800080\fP
T}	T{
\fBPurple\fP [4]
T}
_
T{
[image]
T}	T{
\fBXTERM_TEAL\fP
T}	T{
\fB6\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#008080\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SILVER\fP
T}	T{
\fB7\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#c0c0c0\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY\fP
T}	T{
\fB8\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#808080\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_RED\fP
T}	T{
\fB9\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff0000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIME\fP
T}	T{
\fB10\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ff00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_YELLOW\fP
T}	T{
\fB11\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffff00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_BLUE\fP
T}	T{
\fB12\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0000ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_FUCHSIA\fP
T}	T{
\fB13\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff00ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_AQUA\fP
T}	T{
\fB14\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ffff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_WHITE\fP
T}	T{
\fB15\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffffff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_0\fP
T}	T{
\fB16\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#000000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_NAVY_BLUE\fP
T}	T{
\fB17\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00005f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_BLUE\fP
T}	T{
\fB18\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#000087\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_BLUE_3\fP
T}	T{
\fB19\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0000af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_BLUE_2\fP
T}	T{
\fB20\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0000d7\fP
T}	T{
\fBBlue3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_BLUE_1\fP
T}	T{
\fB21\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0000ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_GREEN\fP
T}	T{
\fB22\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#005f00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_SKY_BLUE_7\fP
T}	T{
\fB23\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#005f5f\fP
T}	T{
\fBDeepSkyBlue4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_SKY_BLUE_6\fP
T}	T{
\fB24\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#005f87\fP
T}	T{
\fBDeepSkyBlue4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_SKY_BLUE_5\fP
T}	T{
\fB25\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#005faf\fP
T}	T{
\fBDeepSkyBlue4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DODGER_BLUE_3\fP
T}	T{
\fB26\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#005fd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DODGER_BLUE_2\fP
T}	T{
\fB27\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#005fff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREEN_5\fP
T}	T{
\fB28\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#008700\fP
T}	T{
\fBGreen4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SPRING_GREEN_4\fP
T}	T{
\fB29\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00875f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_TURQUOISE_4\fP
T}	T{
\fB30\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#008787\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_SKY_BLUE_4\fP
T}	T{
\fB31\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0087af\fP
T}	T{
\fBDeepSkyBlue3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_SKY_BLUE_3\fP
T}	T{
\fB32\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0087d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DODGER_BLUE_1\fP
T}	T{
\fB33\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#0087ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREEN_4\fP
T}	T{
\fB34\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00af00\fP
T}	T{
\fBGreen3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SPRING_GREEN_5\fP
T}	T{
\fB35\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00af5f\fP
T}	T{
\fBSpringGreen3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_CYAN\fP
T}	T{
\fB36\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00af87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SEA_GREEN\fP
T}	T{
\fB37\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00afaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_SKY_BLUE_2\fP
T}	T{
\fB38\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00afd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_SKY_BLUE_1\fP
T}	T{
\fB39\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00afff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREEN_3\fP
T}	T{
\fB40\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00d700\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SPRING_GREEN_3\fP
T}	T{
\fB41\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00d75f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SPRING_GREEN_6\fP
T}	T{
\fB42\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00d787\fP
T}	T{
\fBSpringGreen2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_CYAN_3\fP
T}	T{
\fB43\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00d7af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_TURQUOISE\fP
T}	T{
\fB44\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00d7d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_TURQUOISE_2\fP
T}	T{
\fB45\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00d7ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREEN_2\fP
T}	T{
\fB46\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ff00\fP
T}	T{
\fBGreen1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SPRING_GREEN_2\fP
T}	T{
\fB47\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ff5f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SPRING_GREEN_1\fP
T}	T{
\fB48\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ff87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_SPRING_GREEN\fP
T}	T{
\fB49\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ffaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CYAN_2\fP
T}	T{
\fB50\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ffd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CYAN_1\fP
T}	T{
\fB51\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#00ffff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_RED_2\fP
T}	T{
\fB52\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f0000\fP
T}	T{
\fBDarkRed\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_PINK_8\fP
T}	T{
\fB53\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f005f\fP
T}	T{
\fBDeepPink4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PURPLE_6\fP
T}	T{
\fB54\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f0087\fP
T}	T{
\fBPurple4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PURPLE_4\fP
T}	T{
\fB55\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f00af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PURPLE_3\fP
T}	T{
\fB56\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f00d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_BLUE_VIOLET\fP
T}	T{
\fB57\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f00ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_ORANGE_4\fP
T}	T{
\fB58\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f5f00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_37\fP
T}	T{
\fB59\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f5f5f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_PURPLE_7\fP
T}	T{
\fB60\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f5f87\fP
T}	T{
\fBMediumPurple4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SLATE_BLUE_3\fP
T}	T{
\fB61\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f5faf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SLATE_BLUE_2\fP
T}	T{
\fB62\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f5fd7\fP
T}	T{
\fBSlateBlue3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_ROYAL_BLUE_1\fP
T}	T{
\fB63\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f5fff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CHARTREUSE_6\fP
T}	T{
\fB64\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f8700\fP
T}	T{
\fBChartreuse4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_9\fP
T}	T{
\fB65\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f875f\fP
T}	T{
\fBDarkSeaGreen4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PALE_TURQUOISE_4\fP
T}	T{
\fB66\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f8787\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_STEEL_BLUE\fP
T}	T{
\fB67\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f87af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_STEEL_BLUE_3\fP
T}	T{
\fB68\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f87d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CORNFLOWER_BLUE\fP
T}	T{
\fB69\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5f87ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CHARTREUSE_5\fP
T}	T{
\fB70\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5faf00\fP
T}	T{
\fBChartreuse3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_8\fP
T}	T{
\fB71\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5faf5f\fP
T}	T{
\fBDarkSeaGreen4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_CADET_BLUE_2\fP
T}	T{
\fB72\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5faf87\fP
T}	T{
\fBCadetBlue\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_CADET_BLUE\fP
T}	T{
\fB73\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fafaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SKY_BLUE_3\fP
T}	T{
\fB74\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fafd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_STEEL_BLUE_2\fP
T}	T{
\fB75\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fafff\fP
T}	T{
\fBSteelBlue1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_CHARTREUSE_4\fP
T}	T{
\fB76\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fd700\fP
T}	T{
\fBChartreuse3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PALE_GREEN_4\fP
T}	T{
\fB77\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fd75f\fP
T}	T{
\fBPaleGreen3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SEA_GREEN_3\fP
T}	T{
\fB78\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fd787\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_AQUAMARINE_3\fP
T}	T{
\fB79\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fd7af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_TURQUOISE\fP
T}	T{
\fB80\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fd7d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_STEEL_BLUE_1\fP
T}	T{
\fB81\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fd7ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CHARTREUSE_2\fP
T}	T{
\fB82\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fff00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SEA_GREEN_4\fP
T}	T{
\fB83\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fff5f\fP
T}	T{
\fBSeaGreen2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SEA_GREEN_2\fP
T}	T{
\fB84\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fff87\fP
T}	T{
\fBSeaGreen1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SEA_GREEN_1\fP
T}	T{
\fB85\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fffaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_AQUAMARINE_2\fP
T}	T{
\fB86\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fffd7\fP
T}	T{
\fBAquamarine1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SLATE_GRAY_2\fP
T}	T{
\fB87\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#5fffff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_RED\fP
T}	T{
\fB88\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#870000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_PINK_7\fP
T}	T{
\fB89\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87005f\fP
T}	T{
\fBDeepPink4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_MAGENTA_2\fP
T}	T{
\fB90\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#870087\fP
T}	T{
\fBDarkMagenta\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_MAGENTA\fP
T}	T{
\fB91\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#8700af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_VIOLET_2\fP
T}	T{
\fB92\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#8700d7\fP
T}	T{
\fBDarkViolet\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PURPLE_2\fP
T}	T{
\fB93\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#8700ff\fP
T}	T{
\fBPurple\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_ORANGE_3\fP
T}	T{
\fB94\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#875f00\fP
T}	T{
\fBOrange4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_PINK_3\fP
T}	T{
\fB95\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#875f5f\fP
T}	T{
\fBLightPink4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PLUM_4\fP
T}	T{
\fB96\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#875f87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_PURPLE_6\fP
T}	T{
\fB97\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#875faf\fP
T}	T{
\fBMediumPurple3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_PURPLE_5\fP
T}	T{
\fB98\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#875fd7\fP
T}	T{
\fBMediumPurple3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SLATE_BLUE_1\fP
T}	T{
\fB99\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#875fff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_YELLOW_6\fP
T}	T{
\fB100\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#878700\fP
T}	T{
\fBYellow4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_WHEAT_4\fP
T}	T{
\fB101\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87875f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_53\fP
T}	T{
\fB102\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#878787\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SLATE_GREY\fP
T}	T{
\fB103\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#8787af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_PURPLE_4\fP
T}	T{
\fB104\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#8787d7\fP
T}	T{
\fBMediumPurple\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SLATE_BLUE\fP
T}	T{
\fB105\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#8787ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_YELLOW_4\fP
T}	T{
\fB106\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87af00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_6\fP
T}	T{
\fB107\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87af5f\fP
T}	T{
\fBDarkOliveGreen3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_7\fP
T}	T{
\fB108\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87af87\fP
T}	T{
\fBDarkSeaGreen\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SKY_BLUE_3\fP
T}	T{
\fB109\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87afaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SKY_BLUE_2\fP
T}	T{
\fB110\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87afd7\fP
T}	T{
\fBLightSkyBlue3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_SKY_BLUE_2\fP
T}	T{
\fB111\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87afff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CHARTREUSE_3\fP
T}	T{
\fB112\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87d700\fP
T}	T{
\fBChartreuse2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_4\fP
T}	T{
\fB113\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87d75f\fP
T}	T{
\fBDarkOliveGreen3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PALE_GREEN_3\fP
T}	T{
\fB114\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87d787\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_5\fP
T}	T{
\fB115\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87d7af\fP
T}	T{
\fBDarkSeaGreen3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SLATE_GRAY_3\fP
T}	T{
\fB116\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87d7d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SKY_BLUE_1\fP
T}	T{
\fB117\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87d7ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CHARTREUSE_1\fP
T}	T{
\fB118\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87ff00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_GREEN_2\fP
T}	T{
\fB119\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87ff5f\fP
T}	T{
\fBLightGreen\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_GREEN\fP
T}	T{
\fB120\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87ff87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PALE_GREEN_1\fP
T}	T{
\fB121\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87ffaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_AQUAMARINE_1\fP
T}	T{
\fB122\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87ffd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SLATE_GRAY_1\fP
T}	T{
\fB123\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#87ffff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_RED_4\fP
T}	T{
\fB124\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af0000\fP
T}	T{
\fBRed3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_PINK_6\fP
T}	T{
\fB125\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af005f\fP
T}	T{
\fBDeepPink4\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_VIOLET_RED\fP
T}	T{
\fB126\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af0087\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MAGENTA_6\fP
T}	T{
\fB127\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af00af\fP
T}	T{
\fBMagenta3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_VIOLET\fP
T}	T{
\fB128\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af00d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PURPLE\fP
T}	T{
\fB129\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af00ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_ORANGE_3\fP
T}	T{
\fB130\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af5f00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_INDIAN_RED_4\fP
T}	T{
\fB131\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af5f5f\fP
T}	T{
\fBIndianRed\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_HOT_PINK_5\fP
T}	T{
\fB132\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af5f87\fP
T}	T{
\fBHotPink3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_ORCHID_4\fP
T}	T{
\fB133\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af5faf\fP
T}	T{
\fBMediumOrchid3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_ORCHID_3\fP
T}	T{
\fB134\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af5fd7\fP
T}	T{
\fBMediumOrchid\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_PURPLE_2\fP
T}	T{
\fB135\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af5fff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_GOLDENROD\fP
T}	T{
\fB136\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af8700\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SALMON_3\fP
T}	T{
\fB137\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af875f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_ROSY_BROWN\fP
T}	T{
\fB138\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af8787\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_63\fP
T}	T{
\fB139\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af87af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_PURPLE_3\fP
T}	T{
\fB140\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af87d7\fP
T}	T{
\fBMediumPurple2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_PURPLE_1\fP
T}	T{
\fB141\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#af87ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GOLD_3\fP
T}	T{
\fB142\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afaf00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_KHAKI\fP
T}	T{
\fB143\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afaf5f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_NAVAJO_WHITE_3\fP
T}	T{
\fB144\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afaf87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_69\fP
T}	T{
\fB145\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afafaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_STEEL_BLUE_3\fP
T}	T{
\fB146\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afafd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_STEEL_BLUE_2\fP
T}	T{
\fB147\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afafff\fP
T}	T{
\fBLightSteelBlue\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_YELLOW_5\fP
T}	T{
\fB148\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afd700\fP
T}	T{
\fBYellow3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_5\fP
T}	T{
\fB149\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afd75f\fP
T}	T{
\fBDarkOliveGreen3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_6\fP
T}	T{
\fB150\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afd787\fP
T}	T{
\fBDarkSeaGreen3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_4\fP
T}	T{
\fB151\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afd7af\fP
T}	T{
\fBDarkSeaGreen2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_CYAN_3\fP
T}	T{
\fB152\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afd7d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SKY_BLUE_1\fP
T}	T{
\fB153\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afd7ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREEN_YELLOW\fP
T}	T{
\fB154\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afff00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_3\fP
T}	T{
\fB155\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afff5f\fP
T}	T{
\fBDarkOliveGreen2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PALE_GREEN_2\fP
T}	T{
\fB156\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afff87\fP
T}	T{
\fBPaleGreen1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_3\fP
T}	T{
\fB157\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afffaf\fP
T}	T{
\fBDarkSeaGreen2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_1\fP
T}	T{
\fB158\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afffd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PALE_TURQUOISE_1\fP
T}	T{
\fB159\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#afffff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_RED_3\fP
T}	T{
\fB160\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d70000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_PINK_5\fP
T}	T{
\fB161\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7005f\fP
T}	T{
\fBDeepPink3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_PINK_3\fP
T}	T{
\fB162\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d70087\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MAGENTA_3\fP
T}	T{
\fB163\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d700af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MAGENTA_5\fP
T}	T{
\fB164\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d700d7\fP
T}	T{
\fBMagenta3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_MAGENTA_4\fP
T}	T{
\fB165\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d700ff\fP
T}	T{
\fBMagenta2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_ORANGE_2\fP
T}	T{
\fB166\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d75f00\fP
T}	T{
\fBDarkOrange3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_INDIAN_RED_3\fP
T}	T{
\fB167\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d75f5f\fP
T}	T{
\fBIndianRed\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_HOT_PINK_4\fP
T}	T{
\fB168\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d75f87\fP
T}	T{
\fBHotPink3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_HOT_PINK_3\fP
T}	T{
\fB169\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d75faf\fP
T}	T{
\fBHotPink2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_ORCHID_3\fP
T}	T{
\fB170\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d75fd7\fP
T}	T{
\fBOrchid\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_ORCHID_2\fP
T}	T{
\fB171\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d75fff\fP
T}	T{
\fBMediumOrchid1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_ORANGE_2\fP
T}	T{
\fB172\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d78700\fP
T}	T{
\fBOrange3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SALMON_2\fP
T}	T{
\fB173\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7875f\fP
T}	T{
\fBLightSalmon3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_PINK_2\fP
T}	T{
\fB174\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d78787\fP
T}	T{
\fBLightPink3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_PINK_3\fP
T}	T{
\fB175\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d787af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PLUM_3\fP
T}	T{
\fB176\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d787d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_VIOLET\fP
T}	T{
\fB177\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d787ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GOLD_2\fP
T}	T{
\fB178\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7af00\fP
T}	T{
\fBGold3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_GOLDENROD_5\fP
T}	T{
\fB179\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7af5f\fP
T}	T{
\fBLightGoldenrod3\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_TAN\fP
T}	T{
\fB180\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7af87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MISTY_ROSE_3\fP
T}	T{
\fB181\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7afaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_THISTLE_3\fP
T}	T{
\fB182\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7afd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PLUM_2\fP
T}	T{
\fB183\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7afff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_YELLOW_3\fP
T}	T{
\fB184\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7d700\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_KHAKI_3\fP
T}	T{
\fB185\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7d75f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_GOLDENROD_3\fP
T}	T{
\fB186\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7d787\fP
T}	T{
\fBLightGoldenrod2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_YELLOW_3\fP
T}	T{
\fB187\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7d7af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_84\fP
T}	T{
\fB188\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7d7d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_STEEL_BLUE_1\fP
T}	T{
\fB189\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7d7ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_YELLOW_2\fP
T}	T{
\fB190\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7ff00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_2\fP
T}	T{
\fB191\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7ff5f\fP
T}	T{
\fBDarkOliveGreen1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_OLIVE_GREEN_1\fP
T}	T{
\fB192\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7ff87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_SEA_GREEN_2\fP
T}	T{
\fB193\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7ffaf\fP
T}	T{
\fBDarkSeaGreen1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_HONEYDEW_2\fP
T}	T{
\fB194\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7ffd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_CYAN_1\fP
T}	T{
\fB195\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d7ffff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_RED_1\fP
T}	T{
\fB196\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff0000\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_PINK_4\fP
T}	T{
\fB197\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff005f\fP
T}	T{
\fBDeepPink2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_PINK_2\fP
T}	T{
\fB198\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff0087\fP
T}	T{
\fBDeepPink1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_DEEP_PINK_1\fP
T}	T{
\fB199\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff00af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MAGENTA_2\fP
T}	T{
\fB200\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff00d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MAGENTA_1\fP
T}	T{
\fB201\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff00ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_ORANGE_RED_1\fP
T}	T{
\fB202\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff5f00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_INDIAN_RED_1\fP
T}	T{
\fB203\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff5f5f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_INDIAN_RED_2\fP
T}	T{
\fB204\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff5f87\fP
T}	T{
\fBIndianRed1\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_HOT_PINK_2\fP
T}	T{
\fB205\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff5faf\fP
T}	T{
\fBHotPink\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_HOT_PINK\fP
T}	T{
\fB206\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff5fd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MEDIUM_ORCHID_1\fP
T}	T{
\fB207\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff5fff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_DARK_ORANGE\fP
T}	T{
\fB208\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff8700\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SALMON_1\fP
T}	T{
\fB209\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff875f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_CORAL\fP
T}	T{
\fB210\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff8787\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PALE_VIOLET_RED_1\fP
T}	T{
\fB211\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff87af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_ORCHID_2\fP
T}	T{
\fB212\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff87d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_ORCHID_1\fP
T}	T{
\fB213\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ff87ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_ORANGE_1\fP
T}	T{
\fB214\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffaf00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_SANDY_BROWN\fP
T}	T{
\fB215\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffaf5f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_SALMON_1\fP
T}	T{
\fB216\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffaf87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_PINK_1\fP
T}	T{
\fB217\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffafaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PINK_1\fP
T}	T{
\fB218\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffafd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_PLUM_1\fP
T}	T{
\fB219\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffafff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GOLD_1\fP
T}	T{
\fB220\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffd700\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_GOLDENROD_4\fP
T}	T{
\fB221\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffd75f\fP
T}	T{
\fBLightGoldenrod2\fP
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_GOLDENROD_2\fP
T}	T{
\fB222\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffd787\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_NAVAJO_WHITE_1\fP
T}	T{
\fB223\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffd7af\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_MISTY_ROSE_1\fP
T}	T{
\fB224\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffd7d7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_THISTLE_1\fP
T}	T{
\fB225\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffd7ff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_YELLOW_1\fP
T}	T{
\fB226\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffff00\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_LIGHT_GOLDENROD_1\fP
T}	T{
\fB227\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffff5f\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_KHAKI_1\fP
T}	T{
\fB228\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffff87\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_WHEAT_1\fP
T}	T{
\fB229\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffffaf\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_CORNSILK_1\fP
T}	T{
\fB230\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffffd7\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_100\fP
T}	T{
\fB231\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#ffffff\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_3\fP
T}	T{
\fB232\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#080808\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_7\fP
T}	T{
\fB233\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#121212\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_11\fP
T}	T{
\fB234\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#1c1c1c\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_15\fP
T}	T{
\fB235\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#262626\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_19\fP
T}	T{
\fB236\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#303030\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_23\fP
T}	T{
\fB237\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#3a3a3a\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_27\fP
T}	T{
\fB238\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#444444\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_30\fP
T}	T{
\fB239\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#4e4e4e\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_35\fP
T}	T{
\fB240\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#585858\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_39\fP
T}	T{
\fB241\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#626262\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_42\fP
T}	T{
\fB242\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#6c6c6c\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_46\fP
T}	T{
\fB243\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#767676\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_50\fP
T}	T{
\fB244\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#808080\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_54\fP
T}	T{
\fB245\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#8a8a8a\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_58\fP
T}	T{
\fB246\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#949494\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_62\fP
T}	T{
\fB247\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#9e9e9e\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_66\fP
T}	T{
\fB248\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#a8a8a8\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_70\fP
T}	T{
\fB249\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#b2b2b2\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_74\fP
T}	T{
\fB250\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#bcbcbc\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_78\fP
T}	T{
\fB251\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#c6c6c6\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_82\fP
T}	T{
\fB252\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#d0d0d0\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_85\fP
T}	T{
\fB253\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#dadada\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_89\fP
T}	T{
\fB254\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#e4e4e4\fP
T}	T{
T}
_
T{
[image]
T}	T{
\fBXTERM_GREY_93\fP
T}	T{
\fB255\fP
T}	T{
T}	T{
T}	T{
\fBV\fP
T}	T{
T}	T{
\fB#eeeeee\fP
T}	T{
T}
_
T{
.IP [3] 5
First 16 colors are effectively the same as colors in \fIdefault\fP 16\-color mode and share with them the same color values (and depend on terminal color scheme as well).
.IP [4] 5
XTerm name list contains duplicates; variable names for these were slightly modified (different numbers at the end) to avoid namespace conflicts. Every changed name is displayed with \fBbold\fP font.
T}
_
.TE

.sp
.ce
----

.ce 0
.sp
.sp
Sources
.INDENT 0.0
.IP 1. 3
\fI\%https://en.wikipedia.org/wiki/ANSI_escape_code\fP
.IP 2. 3
\fI\%https://www.ditig.com/256\-colors\-cheat\-sheet\fP
.UNINDENT
.SS Color palette
.sp
Actual colors of \fIdefault\fP palette depend on user\(aqs terminal settings, i.e.
the result color of \fI\%Color16\fP is not guaranteed to exactly match the
corresponding color listed below. What\(aqs more, note that \fIdefault\fP palette
is actually a part of \fIindexed\fP one (first 16 colors of 256\-color table).
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
\fB(Verify)\fP The approximation algomanrithm was explicitly made to ignore these colors because
otherwise the results of transforming \fIRGB\fP values into \fIindexed\fP ones would be
unpredictable, in addition to different results for different users, depending
on their terminal emulator setup.
.UNINDENT
.UNINDENT
.sp
However, it doesn\(aqt mean that \fI\%Color16\fP is useless. Just the opposite \-\- it\(aqs
ideal for situtations when you don\(aqt actually \fBhave to\fP set exact values and
it\(aqs easier to specify estimation of desired color. I.e. setting color to \fB\(aqred\(aq\fP
is usually more than enough for displaying an error message \-\- we don\(aqt really care
of precise hue or brightness values for it.
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
Approximation algorithm is as simple as iterating through all colors in the
\fIlookup table\fP (which contains all possible ...
.UNINDENT
.UNINDENT

.sp
.ce
----

.ce 0
.sp

.sp
.ce
----

.ce 0
.sp
.sp
Sources
.INDENT 0.0
.IP 1. 3
\fI\%https://www.tweaking4all.com/software/linux\-software/xterm\-color\-cheat\-sheet/\fP
.UNINDENT
.SS Formatters and Filters
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
The library contains @TODO
.UNINDENT
.UNINDENT
.SS Auto\-float formatter
.SS Prefixed\-unit formatter
.SS Time delta formatter
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import pytermor.utilnum
from pytermor import RendererManager, SgrRenderer
from pytermor.util import time_delta

seconds_list = [2, 10, 60, 2700, 32340, 273600, 4752000, 864000000]
max_len_list = [3, 6, 10]

for max_len in max_len_list:
    formatter = pytermor.utilnum.registry.find_matching(max_len)

RendererManager.set_default(SgrRenderer)
for seconds in seconds_list:
    for max_len in max_len_list:
        formatter = pytermor.utilnum.registry.get_by_max_len(max_len)
        print(formatter.format(seconds, True), end=\(aq \(aq)
    print()

.ft P
.fi
.UNINDENT
.UNINDENT
[image]
.SS String filters
.SS Standard Library extensions
.INDENT 0.0
.INDENT 3.5
.SS Todo
.sp
@TODO
.UNINDENT
.UNINDENT
.SS Documentation guidelines
.sp
\fI(mostly as a reminder for myself)\fP
.INDENT 0.0
.IP \(bu 2
Basic types and built\-in values should be surrounded with asterisks:
.INDENT 2.0
.INDENT 3.5
\fB*True*\fP → \fITrue\fP
.sp
\fB*None*\fP → \fINone\fP
.sp
\fB*int*\fP → \fIint\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
Library classes, methods, etc. should be enclosed in single backticks in order to become a hyperlinks:
.INDENT 2.0
.INDENT 3.5
\fB\(gaSgrRenderer.render()\(ga\fP → \fI\%SgrRenderer.render()\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
Parameter names and string literals that include escape sequences or their fragments should be wrapped in double backticks:
.INDENT 2.0
.INDENT 3.5
\fB\(ga\(gaparam1\(ga\(ga\fP → \fBparam1\fP
.sp
\fB\(ga\(gaESC\ [31m\(ga\(ga\fP → \fBESC [31m\fP
.UNINDENT
.UNINDENT
.sp
On the top of that, ASCII control chars should be padded with spaces for better readability. Also this will allow to apply custom styles to them.
.UNINDENT
.SH API REFERENCE
.SS ansi
.sp
Module contains definitions for low\-level ANSI escape sequences building.
Can be used for creating a variety of sequences including:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
SGR sequences (text and background
coloring, other text formatting and effects);
.IP \(bu 2
CSI sequences (cursor management,
selective screen cleraing);
.IP \(bu 2
OSC sequences (varoius system commands).
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBIMPORTANT:\fP
.INDENT 0.0
.INDENT 3.5
blah\-blah\-blah low\-level @TODO
.UNINDENT
.UNINDENT
.sp
The module doesn’t distinguish “single\-instruction” sequences from several
ones merged together, e.g. \fBStyle(fg=\(aqred\(aq, bold=True)\fP produces only one
opening SequenceSGR instance:
.sp
.nf
.ft C
>>> SequenceSGR(IntCode.BOLD, IntCode.RED).assemble()
\(aq\ex1b[1;31m\(aq
.ft P
.fi
.sp
…although generally speaking it is two of them (\fBESC [1m\fP and
\fBESC [31m\fP). However, the module can automatically match terminating
sequences for any form of input SGRs and translate it to specified format.
.INDENT 0.0
.TP
\fBXTerm Control Sequences\fP
\fI\%https://invisible\-island.net/xterm/ctlseqs/ctlseqs.html\fP
.TP
\fBECMA\-48 specification\fP
\fI\%https://www.ecma\-international.org/publications\-and\-standards/standards/ecma\-48/\fP
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.Sequence(*params)
Bases: \fBSized\fP, \fBABC\fP
.sp
Abstract ancestor of all escape sequences.
.INDENT 7.0
.TP
.B assemble()
Build up actual byte sequence and return
as an ASCII\-encoded string.
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  params:  t.List[int  |  str]
Return internal params as array.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SequenceFe(*params)
Bases: \fI\%Sequence\fP, \fBABC\fP
.sp
Wide range of sequence types that includes \fI\%CSI\fP,
\fI\%OSC\fP and more.
.sp
All subtypes of this sequence start with \fBESC\fP plus ASCII byte
from \fB0x40\fP to \fB0x5F\fP (\fB@\fP, \fB[\fP, \fB\e\fP, \fB]\fP, \fB_\fP, \fB^\fP and
capital letters \fBA\fP\-\fBZ\fP).
.INDENT 7.0
.TP
.B assemble()
Build up actual byte sequence and return
as an ASCII\-encoded string.
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  params:  t.List[int  |  str]
Return internal params as array.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SequenceST(*params)
Bases: \fI\%SequenceFe\fP
.sp
String Terminator sequence (ST). Terminates strings in other control
sequences. Encoded as \fBESC \e\fP (\fB0x1B\fP \fB0x5C\fP).
.INDENT 7.0
.TP
.B assemble()
Build up actual byte sequence and return
as an ASCII\-encoded string.
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  params:  t.List[int  |  str]
Return internal params as array.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SequenceOSC(*params)
Bases: \fI\%SequenceFe\fP
.sp
OSC\-type sequence. Starts a control
string for the operating system to use. Encoded as \fBESC ]\fP, plus params
separated by \fB;\fP, and terminated with \fI\%SequenceST\fP\&.
.INDENT 7.0
.TP
.B assemble()
Build up actual byte sequence and return
as an ASCII\-encoded string.
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  params:  t.List[int  |  str]
Return internal params as array.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SequenceCSI(terminator, short_name, *params)
Bases: \fI\%SequenceFe\fP
.sp
Class representing CSI\-type ANSI
escape sequence. All subtypes of this sequence start with \fBESC [\fP\&.
.sp
Sequences of this type are used to control text formatting,
change cursor position, erase screen and more.
.sp
.nf
.ft C
>>> make_erase_in_line().assemble()
\(aq\ex1b[0K\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBterminator\fP – 
.IP \(bu 2
\fBshort_name\fP – 
.IP \(bu 2
\fBparams\fP – 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B assemble()
Build up actual byte sequence and return
as an ASCII\-encoded string.
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  params:  t.List[int  |  str]
Return internal params as array.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SequenceSGR(*args)
Bases: \fI\%SequenceCSI\fP
.sp
Class representing SGR\-type escape sequence
with varying amount of parameters. SGR sequences allow to change the color
of text or/and terminal background (in 3 different color spaces) as well
as set decorate text with italic style, underlining, overlining, cross\-lining,
making it bold or blinking etc.
.sp
When cast to \fIstr\fP, as all other sequences, invokes \fI\%assemble()\fP method
and transforms into encoded control sequence string. It is possible to add
of one SGR sequence to another, resulting in a new one with merged params
(see examples).
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%SequenceSGR\fP with zero params was specifically implemented to
translate into empty string and not into \fBESC [m\fP, which would have
made sense, but also would be entangling, as this sequence is the equivalent
of \fBESC [0m\fP – hard reset sequence. The empty\-string\-sequence is
predefined at module level as \fI\%NOOP_SEQ\fP\&.
.UNINDENT
.UNINDENT
.sp
.nf
.ft C
>>> SequenceSGR(IntCode.HI_CYAN, \(aqunderlined\(aq, 1)
<SGR[96,4,1]>
>>> SequenceSGR(31) + SequenceSGR(1) == SequenceSGR(31, 1)
True
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBargs\fP – 
.sp
Sequence params. Resulting param order is the same as an
argument order. Each argument can be specified as:
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fIstr\fP – any of \fI\%IntCode\fP names, case\-insensitive
.IP \(bu 2
\fIint\fP – \fI\%IntCode\fP instance or plain integer
.IP \(bu 2
\fI\%SequenceSGR\fP instance (params will be extracted)
.UNINDENT
.UNINDENT
.UNINDENT

.IP \(bu 2
\fBterminator\fP – 
.IP \(bu 2
\fBshort_name\fP – 
.IP \(bu 2
\fBparams\fP – 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B assemble()
Build up actual byte sequence and return
as an ASCII\-encoded string.
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  params:  List[int]
.INDENT 7.0
.TP
.B Returns
Sequence params as integers or \fI\%IntCode\fP instances.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.CurlyUnderlinedSequenceSGR
Bases: \fI\%SequenceSGR\fP
.sp
Registered as a separate class, because this is the one and only SGR in the
package, which is identified by “4:3” string (in contrast with all the other
sequences entirely made of digits and semicolon separators).
.INDENT 7.0
.TP
.B assemble()
Build up actual byte sequence and return
as an ASCII\-encoded string.
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.NOOP_SEQ  =  <SGR[NOP]>
Special sequence in case you \fIhave to\fP provide one or another SGR, but do 
not want any control sequences to be actually included in the output. 
\fBNOOP_SEQ.assemble()\fP returns empty string, \fBNOOP_SEQ.params\fP 
returns empty list.
.sp
.nf
.ft C
>>> pt.NOOP_SEQ.assemble()
\(aq\(aq
>>> pt.NOOP_SEQ.params
[]
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.IntCode(value)
Bases: \fBIntEnum\fP
.sp
Complete or almost complete list of reliably working SGR param integer codes.
Fully interchangeable with plain \fIint\fP\&. Suitable for \fI\%SequenceSGR\fP
default constructor.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%IntCode\fP predefined constants are omitted from documentation to avoid
useless repeats and save space, as most of the time “next level” class
\fI\%SeqIndex\fP is more appropriate, and on top of that, the constant
names are literally the same for \fI\%SeqIndex\fP and \fI\%IntCode\fP\&.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  resolve(name)
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\fIstr\fP) – 
.TP
.B Returns

.TP
.B Return type
\fI\%IntCode\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.ansi.SeqIndex
Registry of static sequence presets.
.INDENT 7.0
.TP
.B RESET  =  <SGR[0]>
Hard reset sequence.
.UNINDENT
.INDENT 7.0
.TP
.B BOLD  =  <SGR[1]>
Bold or increased intensity.
.UNINDENT
.INDENT 7.0
.TP
.B DIM  =  <SGR[2]>
Faint, decreased intensity.
.UNINDENT
.INDENT 7.0
.TP
.B ITALIC  =  <SGR[3]>
Italic \fI(not widely supported)\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B UNDERLINED  =  <SGR[4]>
Underline.
.UNINDENT
.INDENT 7.0
.TP
.B BLINK_SLOW  =  <SGR[5]>
Set blinking to < 150 cpm.
.UNINDENT
.INDENT 7.0
.TP
.B BLINK_FAST  =  <SGR[6]>
Set blinking to 150+ cpm \fI(not widely supported)\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B INVERSED  =  <SGR[7]>
Swap foreground and background colors.
.UNINDENT
.INDENT 7.0
.TP
.B HIDDEN  =  <SGR[8]>
Conceal characters \fI(not widely supported)\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B CROSSLINED  =  <SGR[9]>
Strikethrough.
.UNINDENT
.INDENT 7.0
.TP
.B DOUBLE_UNDERLINED  =  <SGR[21]>
Double\-underline. \fIOn several terminals disables\fP \fI\%BOLD\fP \fIinstead\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B OVERLINED  =  <SGR[53]>
Overline \fI(not widely supported)\fP\&.
.UNINDENT
.INDENT 7.0
.TP
.B BOLD_DIM_OFF  =  <SGR[22]>
Disable \fBBOLD\fP and \fBDIM\fP attributes.
.sp
\fISpecial aspects… It’s impossible to reliably disable them on a separate basis.\fP
.UNINDENT
.INDENT 7.0
.TP
.B ITALIC_OFF  =  <SGR[23]>
Disable italic.
.UNINDENT
.INDENT 7.0
.TP
.B UNDERLINED_OFF  =  <SGR[24]>
Disable underlining.
.UNINDENT
.INDENT 7.0
.TP
.B BLINK_OFF  =  <SGR[25]>
Disable blinking.
.UNINDENT
.INDENT 7.0
.TP
.B INVERSED_OFF  =  <SGR[27]>
Disable inversing.
.UNINDENT
.INDENT 7.0
.TP
.B HIDDEN_OFF  =  <SGR[28]>
Disable conecaling.
.UNINDENT
.INDENT 7.0
.TP
.B CROSSLINED_OFF  =  <SGR[29]>
Disable strikethrough.
.UNINDENT
.INDENT 7.0
.TP
.B OVERLINED_OFF  =  <SGR[55]>
Disable overlining.
.UNINDENT
.INDENT 7.0
.TP
.B BLACK  =  <SGR[30]>
Set text color to 0x000000.
.UNINDENT
.INDENT 7.0
.TP
.B RED  =  <SGR[31]>
Set text color to 0x800000.
.UNINDENT
.INDENT 7.0
.TP
.B GREEN  =  <SGR[32]>
Set text color to 0x008000.
.UNINDENT
.INDENT 7.0
.TP
.B YELLOW  =  <SGR[33]>
Set text color to 0x808000.
.UNINDENT
.INDENT 7.0
.TP
.B BLUE  =  <SGR[34]>
Set text color to 0x000080.
.UNINDENT
.INDENT 7.0
.TP
.B MAGENTA  =  <SGR[35]>
Set text color to 0x800080.
.UNINDENT
.INDENT 7.0
.TP
.B CYAN  =  <SGR[36]>
Set text color to 0x008080.
.UNINDENT
.INDENT 7.0
.TP
.B WHITE  =  <SGR[37]>
Set text color to 0xc0c0c0.
.UNINDENT
.INDENT 7.0
.TP
.B COLOR_OFF  =  <SGR[39]>
Reset foreground color.
.UNINDENT
.INDENT 7.0
.TP
.B BG_BLACK  =  <SGR[40]>
Set background color to 0x000000.
.UNINDENT
.INDENT 7.0
.TP
.B BG_RED  =  <SGR[41]>
Set background color to 0x800000.
.UNINDENT
.INDENT 7.0
.TP
.B BG_GREEN  =  <SGR[42]>
Set background color to 0x008000.
.UNINDENT
.INDENT 7.0
.TP
.B BG_YELLOW  =  <SGR[43]>
Set background color to 0x808000.
.UNINDENT
.INDENT 7.0
.TP
.B BG_BLUE  =  <SGR[44]>
Set background color to 0x000080.
.UNINDENT
.INDENT 7.0
.TP
.B BG_MAGENTA  =  <SGR[45]>
Set background color to 0x800080.
.UNINDENT
.INDENT 7.0
.TP
.B BG_CYAN  =  <SGR[46]>
Set background color to 0x008080.
.UNINDENT
.INDENT 7.0
.TP
.B BG_WHITE  =  <SGR[47]>
Set background color to 0xc0c0c0.
.UNINDENT
.INDENT 7.0
.TP
.B BG_COLOR_OFF  =  <SGR[49]>
Reset background color.
.UNINDENT
.INDENT 7.0
.TP
.B GRAY  =  <SGR[90]>
Set text color to 0x808080.
.UNINDENT
.INDENT 7.0
.TP
.B HI_RED  =  <SGR[91]>
Set text color to 0xff0000.
.UNINDENT
.INDENT 7.0
.TP
.B HI_GREEN  =  <SGR[92]>
Set text color to 0x00ff00.
.UNINDENT
.INDENT 7.0
.TP
.B HI_YELLOW  =  <SGR[93]>
Set text color to 0xffff00.
.UNINDENT
.INDENT 7.0
.TP
.B HI_BLUE  =  <SGR[94]>
Set text color to 0x0000ff.
.UNINDENT
.INDENT 7.0
.TP
.B HI_MAGENTA  =  <SGR[95]>
Set text color to 0xff00ff.
.UNINDENT
.INDENT 7.0
.TP
.B HI_CYAN  =  <SGR[96]>
Set text color to 0x00ffff.
.UNINDENT
.INDENT 7.0
.TP
.B HI_WHITE  =  <SGR[97]>
Set text color to 0xffffff.
.UNINDENT
.INDENT 7.0
.TP
.B BG_GRAY  =  <SGR[100]>
Set background color to 0x808080.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_RED  =  <SGR[101]>
Set background color to 0xff0000.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_GREEN  =  <SGR[102]>
Set background color to 0x00ff00.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_YELLOW  =  <SGR[103]>
Set background color to 0xffff00.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_BLUE  =  <SGR[104]>
Set background color to 0x0000ff.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_MAGENTA  =  <SGR[105]>
Set background color to 0xff00ff.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_CYAN  =  <SGR[106]>
Set background color to 0x00ffff.
.UNINDENT
.INDENT 7.0
.TP
.B BG_HI_WHITE  =  <SGR[107]>
Set background color to 0xffffff.
.UNINDENT
.INDENT 7.0
.TP
.B HYPERLINK  =  <OSC[8]>
Create a hyperlink in the text \fI(supported by limited amount of terminals)\fP\&.
Note that for a working hyperlink you’ll need two sequences, not just one.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\%make_hyperlink_part()\fP and \fI\%assemble_hyperlink()\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.get_closing_seq(opening_seq)
.INDENT 7.0
.TP
.B Parameters
\fBopening_seq\fP (\fI\%SequenceSGR\fP) – 
.TP
.B Returns

.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.enclose(opening_seq, string)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBopening_seq\fP (\fI\%SequenceSGR\fP) – 
.IP \(bu 2
\fBstring\fP (\fIstr\fP) – 
.UNINDENT
.TP
.B Returns

.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_set_cursor_x_abs(x=1)
Create CHA sequence that sets
cursor horizontal position, or column, to \fBx\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBx\fP (\fIint\fP) – New cursor horizontal position.
.TP
.B Example
\fBESC [1G\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_erase_in_line(mode=0)
Create EL sequence that erases a part of the line
or the entire line. Cursor position does not change.
.INDENT 7.0
.TP
.B Parameters
\fBmode\fP (\fIint\fP) – 
.sp
Sequence operating mode.
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
If set to 0, clear from cursor to the end of the line.
.IP \(bu 2
If set to 1, clear from cursor to beginning of the line.
.IP \(bu 2
If set to 2, clear the entire line.
.UNINDENT
.UNINDENT
.UNINDENT

.TP
.B Example
\fBESC [0K\fP
.TP
.B Return type
\fI\%SequenceCSI\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_color_256(code, bg=False)
Wrapper for creation of \fI\%SequenceSGR\fP that sets foreground
(or background) to one of 256\-color palette value.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcode\fP (\fIint\fP) – Index of the color in the palette, 0 – 255.
.IP \(bu 2
\fBbg\fP (\fIbool\fP) – Set to \fITrue\fP to change the background color
(default is foreground).
.UNINDENT
.TP
.B Example
\fBESC [38;5;141m\fP
.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_color_rgb(r, g, b, bg=False)
Wrapper for creation of \fI\%SequenceSGR\fP operating in True Color mode (16M).
Valid values for \fBr\fP, \fBg\fP and \fBb\fP are in range of [0; 255]. This range
linearly translates into [0x00; 0xFF] for each channel. The result
value is composed as “0xRRGGBB”. For example, sequence with color of
0xFF3300 can be created with:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
make_color_rgb(255, 51, 0)
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBr\fP (\fIint\fP) – Red channel value, 0 – 255.
.IP \(bu 2
\fBg\fP (\fIint\fP) – Blue channel value, 0 – 255.
.IP \(bu 2
\fBb\fP (\fIint\fP) – Green channel value, 0 – 255.
.IP \(bu 2
\fBbg\fP (\fIbool\fP) – Set to \fITrue\fP to change the background color (default is foreground).
.UNINDENT
.TP
.B Example
\fBESC [38;2;255;51;0m\fP
.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.make_hyperlink_part(url=None)
.INDENT 7.0
.TP
.B Parameters
\fBurl\fP (\fIOptional\fP\fI[\fP\fIstr\fP\fI]\fP) – 
.TP
.B Example
\fBESC ]8;;http://localhost ESC \e\fP
.TP
.B Return type
\fI\%SequenceOSC\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.ansi.assemble_hyperlink(url, label)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBurl\fP (\fIstr\fP) – 
.IP \(bu 2
\fBlabel\fP (\fIstr\fP) – 
.UNINDENT
.TP
.B Example
\fBESC ]8;;http://localhost ESC \eText ESC ]8;; ESC \e\fP
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.SS color
.INDENT 0.0
.TP
.B pytermor.color.ColorType
.INDENT 7.0
.UNINDENT
.sp
alias of TypeVar(‘ColorType’, Color16, Color256, ColorRGB)
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.color.ApproximationResult(color, distance)
Bases: \fBGeneric\fP[\fI\%ColorType\fP]
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBcolor\fP – \fI\%Color\fP instance.
.IP \(bu 2
\fBdistance\fP – Squared sRGB distance from this instance to
the approximation target.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  distance_real:  float
Actual distance from instance to target: Sqrt(distance).
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.color.Color(*args, **kwargs)
Abstract superclass for other \fBColors\fP\&.
.INDENT 7.0
.TP
.B to_hsv()
.INDENT 7.0
.TP
.B Returns

.TP
.B Return type
\fITuple\fP[float, float, float]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_rgb()
.INDENT 7.0
.TP
.B Returns

.TP
.B Return type
\fITuple\fP[int, int, int]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B format_value(prefix=\(aq0x\(aq)
.INDENT 7.0
.TP
.B Parameters
\fBprefix\fP (\fIstr\fP) – 
.TP
.B Returns

.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  hex_value:  int
.INDENT 7.0
.TP
.B Returns

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  name:  str  |  None
.INDENT 7.0
.TP
.B Returns

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  base:  ColorType  |  None
.INDENT 7.0
.TP
.B Returns

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  variations:  Dict[str,  ColorType]
.INDENT 7.0
.TP
.B Returns

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B abstract  to_sgr(bg, upper_bound=None)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbg\fP (\fIbool\fP) – 
.IP \(bu 2
\fBupper_bound\fP (\fIOptional\fP\fI[\fP\fIType\fP\fI[\fP\fI\%Color\fP\fI]\fP\fI]\fP) – 
.UNINDENT
.TP
.B Returns

.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B abstract  to_tmux(bg)
.INDENT 7.0
.TP
.B Parameters
\fBbg\fP (\fIbool\fP) – 
.TP
.B Returns

.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  get_by_code(code)
.INDENT 7.0
.TP
.B Parameters
\fBcode\fP (\fIint\fP) – 
.TP
.B Returns

.TP
.B Return type
\fIColorType\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  resolve(name)
Case\-insensitive search through registry contents. Type of the
result depends on invoked class:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fBColor16.resolve(..)\fP \-> \fI\%Color16\fP
.IP \(bu 2
\fBColor256.resolve(..)\fP \-> \fI\%Color256\fP
.IP \(bu 2
\fBColorRGB.resolve(..)\fP \-> \fI\%ColorRGB\fP
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Invoking the method of \fI\%Color\fP itself is a special case. The search
will be first performed in the registry of \fI\%Color16\fP class, then –
in \fI\%Color256\fP, and, if previous two were unsuccessful, in the
largest \fI\%ColorRGB\fP registry.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBname\fP (\fIstr\fP) – name of the color to look up for.
.TP
.B Raises
\fBLookupError\fP – if no color with specified name is registered.
.TP
.B Returns
\fI\%Color\fP instance.
.TP
.B Return type
\fIColorType\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  find_closest(hex_value)
Search and return the nearset color to \fBhex_value\fP\&. Depending on
the desired result type and current color mode you might use either of:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fBColor16.find_closest(..)\fP \-> \fI\%Color16\fP
.IP \(bu 2
\fBColor256.find_closest(..)\fP \-> \fI\%Color256\fP
.IP \(bu 2
\fBColorRGB.find_closest(..)\fP \-> \fI\%ColorRGB\fP
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Invoking the method of \fI\%Color\fP itself is equivalent to
calling \fBColor256.find_closest()\fP\&.
.UNINDENT
.UNINDENT
.sp
Method is useful for finding applicable color alternatives if user’s
terminal is incapable of operating in more advanced mode.
.sp
This method caches the results, i.e., the same search query will from then
onward result in the same return value without the necessity of iterating
through the color index. If that’s not applicable, use similar method
\fI\%approximate()\fP, which is unaware of caching mechanism altogether.
.INDENT 7.0
.TP
.B Parameters
\fBhex_value\fP (\fIint\fP) – Target color RGB value.
.TP
.B Returns
Nearest to \fBhex_value\fP instance of \fI\%Color\fP found. Type will
be the same as the class of called method.
.TP
.B Return type
\fIColorType\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B classmethod  approximate(hex_value, max_results=1)
Search for nearest colors to \fBhex_value\fP and return the first
\fBmax_results\fP of them. This method is similar to the \fI\%find_closest()\fP,
although they differ in some aspects:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%approximate()\fP can return more than one result;
.IP \(bu 2
\fI\%approximate()\fP returns not just \fI\%Color\fP instances, but also a
number equal to squared distance to the target color for each of them;
.IP \(bu 2
\fI\%find_closest()\fP caches the results, while \fI\%approximate()\fP ignores
the cache completely.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The type of \fI\%Color\fP instances in the result will be the same as the
\fI\%Color\fP class the called method is originating from (same as for method’s
sibling):
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fBColor16.approximate(..)\fP \-> [ApproximationResult[\fI\%Color16\fP], …]
.IP \(bu 2
\fBColor256.approximate(..)\fP \-> [ApproximationResult[\fI\%Color256\fP], …]
.IP \(bu 2
\fBColorRGB.approximate(..)\fP \-> [ApproximationResult[\fI\%ColorRGB\fP], …]
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Invoking the method of \fI\%Color\fP itself is equivalent to
calling \fBColor256.find_closest()\fP\&.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP (\fIint\fP) – Target color RGB value.
.IP \(bu 2
\fBmax_results\fP (\fIint\fP) – Return no more than \fBmax_results\fP items.
.UNINDENT
.TP
.B Returns
Pairs of closest \fI\%Color\fP instance(s) found with their distances
to the target color, sorted by distance descending, i.e., element
at index 0 is the closest color found, paired with its distance
to the target; element with index 1 is second\-closest color
(if any) and corresponding distance value, etc.
.TP
.B Return type
\fIList\fP[\fI\%ApproximationResult\fP[\fIColorType\fP]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B static  hex_to_hsv(hex_value)
Transforms \fBhex_value\fP in 0xFFFFFF format into a tuple of three numbers
corresponding to \fBhue\fP, \fBsaturation\fP and \fBvalue\fP channel values respectively.
Hue is within [0, 359] range, both saturation and value are within [0; 1] range.
.INDENT 7.0
.TP
.B Return type
\fITuple\fP[float, float, float]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B static  hex_to_rgb(hex_value)
Transforms \fBhex_value\fP in 0xFFFFFF format into a tuple of three
integers corresponding to \fBred\fP, \fBblue\fP and \fBgreen\fP channel value
respectively. Values are within [0; 255] range.
.INDENT 7.0
.TP
.B Parameters
\fBhex_value\fP (\fIint\fP) – Color RGB value.
.TP
.B Return type
\fITuple\fP[int, int, int]
.UNINDENT
.sp
Usage:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
>>> Color.hex_to_rgb(0x80ff80)
(128, 255, 128)
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B static  rgb_to_hex(r, g, b)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBr\fP (\fIint\fP) – 
.IP \(bu 2
\fBg\fP (\fIint\fP) – 
.IP \(bu 2
\fBb\fP (\fIint\fP) – 
.UNINDENT
.TP
.B Returns

.TP
.B Return type
int
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.color.Color16(*args, **kwargs)
Bases: \fI\%Color\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP – 
.IP \(bu 2
\fBcode_fg\fP – 
.IP \(bu 2
\fBcode_bg\fP – 
.IP \(bu 2
\fBname\fP – 
.IP \(bu 2
\fBaliases\fP – 
.IP \(bu 2
\fBvariation_map\fP – 
.IP \(bu 2
\fBregister\fP – 
.IP \(bu 2
\fBindex\fP – 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_sgr(bg, upper_bound=None)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbg\fP (\fIbool\fP) – 
.IP \(bu 2
\fBupper_bound\fP (\fIOptional\fP\fI[\fP\fIType\fP\fI[\fP\fI\%Color\fP\fI]\fP\fI]\fP) – 
.UNINDENT
.TP
.B Returns

.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_tmux(bg)
.INDENT 7.0
.TP
.B Parameters
\fBbg\fP (\fIbool\fP) – 
.TP
.B Returns

.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  code_fg:  int
.INDENT 7.0
.TP
.B Returns

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  code_bg:  int
.INDENT 7.0
.TP
.B Returns

.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.color.Color256(*args, **kwargs)
Bases: \fI\%Color\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP – 
.IP \(bu 2
\fBcode\fP – 
.IP \(bu 2
\fBname\fP – 
.IP \(bu 2
\fBaliases\fP – 
.IP \(bu 2
\fBvariation_map\fP – 
.IP \(bu 2
\fBcolor16_equiv\fP – 
.IP \(bu 2
\fBregister\fP – 
.IP \(bu 2
\fBindex\fP – 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_sgr(bg, upper_bound=None)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbg\fP (\fIbool\fP) – 
.IP \(bu 2
\fBupper_bound\fP (\fIOptional\fP\fI[\fP\fIType\fP\fI[\fP\fI\%Color\fP\fI]\fP\fI]\fP) – 
.UNINDENT
.TP
.B Returns

.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_tmux(bg)
.INDENT 7.0
.TP
.B Parameters
\fBbg\fP (\fIbool\fP) – 
.TP
.B Returns

.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  code:  int
.INDENT 7.0
.TP
.B Returns

.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.color.ColorRGB(*args, **kwargs)
Bases: \fI\%Color\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBhex_value\fP – 
.IP \(bu 2
\fBname\fP – 
.IP \(bu 2
\fBaliases\fP – 
.IP \(bu 2
\fBvariation_map\fP – 
.IP \(bu 2
\fBregister\fP – 
.IP \(bu 2
\fBindex\fP – 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_sgr(bg, upper_bound=None)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbg\fP (\fIbool\fP) – 
.IP \(bu 2
\fBupper_bound\fP (\fIOptional\fP\fI[\fP\fIType\fP\fI[\fP\fI\%Color\fP\fI]\fP\fI]\fP) – 
.UNINDENT
.TP
.B Returns

.TP
.B Return type
\fI\%SequenceSGR\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_tmux(bg)
.INDENT 7.0
.TP
.B Parameters
\fBbg\fP (\fIbool\fP) – 
.TP
.B Returns

.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.color.NOOP_COLOR  =  <_NoopColor[NOP]>
Special \fI\%Color\fP instance always rendering into empty string.
.UNINDENT
.INDENT 0.0
.TP
.B exception  pytermor.color.ColorNameConflictError(tokens, existing_color, new_color)
Bases: \fBException\fP
.INDENT 7.0
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B exception  pytermor.color.ColorCodeConflictError(code, existing_color, new_color)
Bases: \fBException\fP
.INDENT 7.0
.UNINDENT
.UNINDENT
.SS common
.INDENT 0.0
.TP
.B pytermor.common.T
\fBt.Any\fP
.sp
alias of TypeVar(‘T’)
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.common.StrType
\fI\%StrType\fP in a method signature usually means that regular strings as well as 
\fI\%Renderable\fP implementations are supported, can be intermixed, and:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
return type will be \fIstr\fP if and only if type of all arguments is \fIstr\fP;
.IP \(bu 2
otherwise return type will be \fI\%Renderable\fP – \fIstr\fP arguments, if any, will
be transformed into \fI\%Renderable\fP and concatenated.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
alias of TypeVar(‘StrType’, bound=\fBUnion\fP[\fBstr\fP, \fBRenderable\fP])
.UNINDENT
.INDENT 0.0
.TP
.B exception  pytermor.common.LogicError
Bases: \fBException\fP
.UNINDENT
.INDENT 0.0
.TP
.B exception  pytermor.common.ConflictError
Bases: \fBException\fP
.UNINDENT
.INDENT 0.0
.TP
.B exception  pytermor.common.ArgTypeError(actual_type, arg_name=None, fn=None)
Bases: \fBException\fP
.INDENT 7.0
.UNINDENT
.UNINDENT
.SS cval
.sp
Color preset list.
.INDENT 0.0
.TP
.B class  pytermor.cval.CValues
.INDENT 7.0
.TP
.B BLACK  =  <Color16[#30,000000?,black]>
.UNINDENT
.INDENT 7.0
.TP
.B RED  =  <Color16[#31,800000?,red]>
.UNINDENT
.INDENT 7.0
.TP
.B GREEN  =  <Color16[#32,008000?,green]>
.UNINDENT
.INDENT 7.0
.TP
.B YELLOW  =  <Color16[#33,808000?,yellow]>
.UNINDENT
.INDENT 7.0
.TP
.B BLUE  =  <Color16[#34,000080?,blue]>
.UNINDENT
.INDENT 7.0
.TP
.B MAGENTA  =  <Color16[#35,800080?,magenta]>
.UNINDENT
.INDENT 7.0
.TP
.B CYAN  =  <Color16[#36,008080?,cyan]>
.UNINDENT
.INDENT 7.0
.TP
.B WHITE  =  <Color16[#37,C0C0C0?,white]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY  =  <Color16[#90,808080?,gray]>
.UNINDENT
.INDENT 7.0
.TP
.B HI_RED  =  <Color16[#91,FF0000?,hi\-red]>
.UNINDENT
.INDENT 7.0
.TP
.B HI_GREEN  =  <Color16[#92,00FF00?,hi\-green]>
.UNINDENT
.INDENT 7.0
.TP
.B HI_YELLOW  =  <Color16[#93,FFFF00?,hi\-yellow]>
.UNINDENT
.INDENT 7.0
.TP
.B HI_BLUE  =  <Color16[#94,0000FF?,hi\-blue]>
.UNINDENT
.INDENT 7.0
.TP
.B HI_MAGENTA  =  <Color16[#95,FF00FF?,hi\-magenta]>
.UNINDENT
.INDENT 7.0
.TP
.B HI_CYAN  =  <Color16[#96,00FFFF?,hi\-cyan]>
.UNINDENT
.INDENT 7.0
.TP
.B HI_WHITE  =  <Color16[#97,FFFFFF?,hi\-white]>
.UNINDENT
.INDENT 7.0
.TP
.B AQUAMARINE_1  =  <Color256[#122,87FFD7,aquamarine\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B AQUAMARINE_2  =  <Color256[#86,5FFFD7,aquamarine\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B AQUAMARINE_3  =  <Color256[#79,5FD7AF,aquamarine\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B BLUE_1  =  <Color256[#21,0000FF,blue\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B BLUE_2  =  <Color256[#20,0000D7,blue\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B BLUE_3  =  <Color256[#19,0000AF,blue\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B BLUE_VIOLET  =  <Color256[#57,5F00FF,blue\-violet]>
.UNINDENT
.INDENT 7.0
.TP
.B CADET_BLUE  =  <Color256[#73,5FAFAF,cadet\-blue]>
.UNINDENT
.INDENT 7.0
.TP
.B CADET_BLUE_2  =  <Color256[#72,5FAF87,cadet\-blue\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B CHARTREUSE_1  =  <Color256[#118,87FF00,chartreuse\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B CHARTREUSE_2  =  <Color256[#82,5FFF00,chartreuse\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B CHARTREUSE_3  =  <Color256[#112,87D700,chartreuse\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B CHARTREUSE_4  =  <Color256[#76,5FD700,chartreuse\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B CHARTREUSE_5  =  <Color256[#70,5FAF00,chartreuse\-5]>
.UNINDENT
.INDENT 7.0
.TP
.B CHARTREUSE_6  =  <Color256[#64,5F8700,chartreuse\-6]>
.UNINDENT
.INDENT 7.0
.TP
.B CORNFLOWER_BLUE  =  <Color256[#69,5F87FF,cornflower\-blue]>
.UNINDENT
.INDENT 7.0
.TP
.B CORNSILK_1  =  <Color256[#230,FFFFD7,cornsilk\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B CYAN_1  =  <Color256[#51,00FFFF,cyan\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B CYAN_2  =  <Color256[#50,00FFD7,cyan\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B CYAN_3  =  <Color256[#43,00D7AF,cyan\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_BLUE  =  <Color256[#18,000087,dark\-blue]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_CYAN  =  <Color256[#36,00AF87,dark\-cyan]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_GOLDENROD  =  <Color256[#136,AF8700,dark\-goldenrod]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_GREEN  =  <Color256[#22,005F00,dark\-green]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_KHAKI  =  <Color256[#143,AFAF5F,dark\-khaki]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_MAGENTA  =  <Color256[#91,8700AF,dark\-magenta]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_MAGENTA_2  =  <Color256[#90,870087,dark\-magenta\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_OLIVE_GREEN_1  =  <Color256[#192,D7FF87,dark\-olive\-green\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_OLIVE_GREEN_2  =  <Color256[#191,D7FF5F,dark\-olive\-green\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_OLIVE_GREEN_3  =  <Color256[#155,AFFF5F,dark\-olive\-green\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_OLIVE_GREEN_4  =  <Color256[#113,87D75F,dark\-olive\-green\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_OLIVE_GREEN_5  =  <Color256[#149,AFD75F,dark\-olive\-green\-5]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_OLIVE_GREEN_6  =  <Color256[#107,87AF5F,dark\-olive\-green\-6]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_ORANGE  =  <Color256[#208,FF8700,dark\-orange]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_ORANGE_2  =  <Color256[#166,D75F00,dark\-orange\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_ORANGE_3  =  <Color256[#130,AF5F00,dark\-orange\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_RED  =  <Color256[#88,870000,dark\-red]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_RED_2  =  <Color256[#52,5F0000,dark\-red\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_SEA_GREEN_1  =  <Color256[#158,AFFFD7,dark\-sea\-green\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_SEA_GREEN_2  =  <Color256[#193,D7FFAF,dark\-sea\-green\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_SEA_GREEN_3  =  <Color256[#157,AFFFAF,dark\-sea\-green\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_SEA_GREEN_4  =  <Color256[#151,AFD7AF,dark\-sea\-green\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_SEA_GREEN_5  =  <Color256[#115,87D7AF,dark\-sea\-green\-5]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_SEA_GREEN_6  =  <Color256[#150,AFD787,dark\-sea\-green\-6]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_SEA_GREEN_7  =  <Color256[#108,87AF87,dark\-sea\-green\-7]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_SEA_GREEN_8  =  <Color256[#71,5FAF5F,dark\-sea\-green\-8]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_SEA_GREEN_9  =  <Color256[#65,5F875F,dark\-sea\-green\-9]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_SLATE_GRAY_1  =  <Color256[#123,87FFFF,dark\-slate\-gray\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_SLATE_GRAY_2  =  <Color256[#87,5FFFFF,dark\-slate\-gray\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_SLATE_GRAY_3  =  <Color256[#116,87D7D7,dark\-slate\-gray\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_TURQUOISE  =  <Color256[#44,00D7D7,dark\-turquoise]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_VIOLET  =  <Color256[#128,AF00D7,dark\-violet]>
.UNINDENT
.INDENT 7.0
.TP
.B DARK_VIOLET_2  =  <Color256[#92,8700D7,dark\-violet\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B DEEP_PINK_1  =  <Color256[#199,FF00AF,deep\-pink\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B DEEP_PINK_2  =  <Color256[#198,FF0087,deep\-pink\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B DEEP_PINK_3  =  <Color256[#162,D70087,deep\-pink\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B DEEP_PINK_4  =  <Color256[#197,FF005F,deep\-pink\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B DEEP_PINK_5  =  <Color256[#161,D7005F,deep\-pink\-5]>
.UNINDENT
.INDENT 7.0
.TP
.B DEEP_PINK_6  =  <Color256[#125,AF005F,deep\-pink\-6]>
.UNINDENT
.INDENT 7.0
.TP
.B DEEP_PINK_7  =  <Color256[#89,87005F,deep\-pink\-7]>
.UNINDENT
.INDENT 7.0
.TP
.B DEEP_PINK_8  =  <Color256[#53,5F005F,deep\-pink\-8]>
.UNINDENT
.INDENT 7.0
.TP
.B DEEP_SKY_BLUE_1  =  <Color256[#39,00AFFF,deep\-sky\-blue\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B DEEP_SKY_BLUE_2  =  <Color256[#38,00AFD7,deep\-sky\-blue\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B DEEP_SKY_BLUE_3  =  <Color256[#32,0087D7,deep\-sky\-blue\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B DEEP_SKY_BLUE_4  =  <Color256[#31,0087AF,deep\-sky\-blue\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B DEEP_SKY_BLUE_5  =  <Color256[#25,005FAF,deep\-sky\-blue\-5]>
.UNINDENT
.INDENT 7.0
.TP
.B DEEP_SKY_BLUE_6  =  <Color256[#24,005F87,deep\-sky\-blue\-6]>
.UNINDENT
.INDENT 7.0
.TP
.B DEEP_SKY_BLUE_7  =  <Color256[#23,005F5F,deep\-sky\-blue\-7]>
.UNINDENT
.INDENT 7.0
.TP
.B DODGER_BLUE_1  =  <Color256[#33,0087FF,dodger\-blue\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B DODGER_BLUE_2  =  <Color256[#27,005FFF,dodger\-blue\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B DODGER_BLUE_3  =  <Color256[#26,005FD7,dodger\-blue\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B GOLD_1  =  <Color256[#220,FFD700,gold\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B GOLD_2  =  <Color256[#178,D7AF00,gold\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B GOLD_3  =  <Color256[#142,AFAF00,gold\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_0  =  <Color256[#16,000000,gray\-0]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_100  =  <Color256[#231,FFFFFF,gray\-100]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_11  =  <Color256[#234,1C1C1C,gray\-11]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_15  =  <Color256[#235,262626,gray\-15]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_19  =  <Color256[#236,303030,gray\-19]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_23  =  <Color256[#237,3A3A3A,gray\-23]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_27  =  <Color256[#238,444444,gray\-27]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_3  =  <Color256[#232,080808,gray\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_30  =  <Color256[#239,4E4E4E,gray\-30]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_35  =  <Color256[#240,585858,gray\-35]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_37  =  <Color256[#59,5F5F5F,gray\-37]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_39  =  <Color256[#241,626262,gray\-39]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_42  =  <Color256[#242,6C6C6C,gray\-42]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_46  =  <Color256[#243,767676,gray\-46]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_50  =  <Color256[#244,808080,gray\-50]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_53  =  <Color256[#102,878787,gray\-53]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_54  =  <Color256[#245,8A8A8A,gray\-54]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_58  =  <Color256[#246,949494,gray\-58]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_62  =  <Color256[#247,9E9E9E,gray\-62]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_63  =  <Color256[#139,AF87AF,gray\-63]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_66  =  <Color256[#248,A8A8A8,gray\-66]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_69  =  <Color256[#145,AFAFAF,gray\-69]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_7  =  <Color256[#233,121212,gray\-7]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_70  =  <Color256[#249,B2B2B2,gray\-70]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_74  =  <Color256[#250,BCBCBC,gray\-74]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_78  =  <Color256[#251,C6C6C6,gray\-78]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_82  =  <Color256[#252,D0D0D0,gray\-82]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_84  =  <Color256[#188,D7D7D7,gray\-84]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_85  =  <Color256[#253,DADADA,gray\-85]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_89  =  <Color256[#254,E4E4E4,gray\-89]>
.UNINDENT
.INDENT 7.0
.TP
.B GRAY_93  =  <Color256[#255,EEEEEE,gray\-93]>
.UNINDENT
.INDENT 7.0
.TP
.B GREEN_2  =  <Color256[#46,00FF00,green\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B GREEN_3  =  <Color256[#40,00D700,green\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B GREEN_4  =  <Color256[#34,00AF00,green\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B GREEN_5  =  <Color256[#28,008700,green\-5]>
.UNINDENT
.INDENT 7.0
.TP
.B GREEN_YELLOW  =  <Color256[#154,AFFF00,green\-yellow]>
.UNINDENT
.INDENT 7.0
.TP
.B HONEYDEW_2  =  <Color256[#194,D7FFD7,honeydew\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B HOT_PINK  =  <Color256[#206,FF5FD7,hot\-pink]>
.UNINDENT
.INDENT 7.0
.TP
.B HOT_PINK_2  =  <Color256[#205,FF5FAF,hot\-pink\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B HOT_PINK_3  =  <Color256[#169,D75FAF,hot\-pink\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B HOT_PINK_4  =  <Color256[#168,D75F87,hot\-pink\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B HOT_PINK_5  =  <Color256[#132,AF5F87,hot\-pink\-5]>
.UNINDENT
.INDENT 7.0
.TP
.B INDIAN_RED_1  =  <Color256[#203,FF5F5F,indian\-red\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B INDIAN_RED_2  =  <Color256[#204,FF5F87,indian\-red\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B INDIAN_RED_3  =  <Color256[#167,D75F5F,indian\-red\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B INDIAN_RED_4  =  <Color256[#131,AF5F5F,indian\-red\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B KHAKI_1  =  <Color256[#228,FFFF87,khaki\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B KHAKI_3  =  <Color256[#185,D7D75F,khaki\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_CORAL  =  <Color256[#210,FF8787,light\-coral]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_CYAN_1  =  <Color256[#195,D7FFFF,light\-cyan\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_CYAN_3  =  <Color256[#152,AFD7D7,light\-cyan\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_GOLDENROD_1  =  <Color256[#227,FFFF5F,light\-goldenrod\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_GOLDENROD_2  =  <Color256[#222,FFD787,light\-goldenrod\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_GOLDENROD_3  =  <Color256[#186,D7D787,light\-goldenrod\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_GOLDENROD_4  =  <Color256[#221,FFD75F,light\-goldenrod\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_GOLDENROD_5  =  <Color256[#179,D7AF5F,light\-goldenrod\-5]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_GREEN  =  <Color256[#120,87FF87,light\-green]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_GREEN_2  =  <Color256[#119,87FF5F,light\-green\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_PINK_1  =  <Color256[#217,FFAFAF,light\-pink\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_PINK_2  =  <Color256[#174,D78787,light\-pink\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_PINK_3  =  <Color256[#95,875F5F,light\-pink\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_SALMON_1  =  <Color256[#216,FFAF87,light\-salmon\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_SALMON_2  =  <Color256[#173,D7875F,light\-salmon\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_SALMON_3  =  <Color256[#137,AF875F,light\-salmon\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_SEA_GREEN  =  <Color256[#37,00AFAF,light\-sea\-green]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_SKY_BLUE_1  =  <Color256[#153,AFD7FF,light\-sky\-blue\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_SKY_BLUE_2  =  <Color256[#110,87AFD7,light\-sky\-blue\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_SKY_BLUE_3  =  <Color256[#109,87AFAF,light\-sky\-blue\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_SLATE_BLUE  =  <Color256[#105,8787FF,light\-slate\-blue]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_SLATE_GRAY  =  <Color256[#103,8787AF,light\-slate\-gray]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_STEEL_BLUE_1  =  <Color256[#189,D7D7FF,light\-steel\-blue\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_STEEL_BLUE_2  =  <Color256[#147,AFAFFF,light\-steel\-blue\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_STEEL_BLUE_3  =  <Color256[#146,AFAFD7,light\-steel\-blue\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B LIGHT_YELLOW_3  =  <Color256[#187,D7D7AF,light\-yellow\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B MAGENTA_1  =  <Color256[#201,FF00FF,magenta\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B MAGENTA_2  =  <Color256[#200,FF00D7,magenta\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B MAGENTA_3  =  <Color256[#163,D700AF,magenta\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B MAGENTA_4  =  <Color256[#165,D700FF,magenta\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B MAGENTA_5  =  <Color256[#164,D700D7,magenta\-5]>
.UNINDENT
.INDENT 7.0
.TP
.B MAGENTA_6  =  <Color256[#127,AF00AF,magenta\-6]>
.UNINDENT
.INDENT 7.0
.TP
.B MEDIUM_ORCHID_1  =  <Color256[#207,FF5FFF,medium\-orchid\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B MEDIUM_ORCHID_2  =  <Color256[#171,D75FFF,medium\-orchid\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B MEDIUM_ORCHID_3  =  <Color256[#134,AF5FD7,medium\-orchid\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B MEDIUM_ORCHID_4  =  <Color256[#133,AF5FAF,medium\-orchid\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B MEDIUM_PURPLE_1  =  <Color256[#141,AF87FF,medium\-purple\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B MEDIUM_PURPLE_2  =  <Color256[#135,AF5FFF,medium\-purple\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B MEDIUM_PURPLE_3  =  <Color256[#140,AF87D7,medium\-purple\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B MEDIUM_PURPLE_4  =  <Color256[#104,8787D7,medium\-purple\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B MEDIUM_PURPLE_5  =  <Color256[#98,875FD7,medium\-purple\-5]>
.UNINDENT
.INDENT 7.0
.TP
.B MEDIUM_PURPLE_6  =  <Color256[#97,875FAF,medium\-purple\-6]>
.UNINDENT
.INDENT 7.0
.TP
.B MEDIUM_PURPLE_7  =  <Color256[#60,5F5F87,medium\-purple\-7]>
.UNINDENT
.INDENT 7.0
.TP
.B MEDIUM_SPRING_GREEN  =  <Color256[#49,00FFAF,medium\-spring\-green]>
.UNINDENT
.INDENT 7.0
.TP
.B MEDIUM_TURQUOISE  =  <Color256[#80,5FD7D7,medium\-turquoise]>
.UNINDENT
.INDENT 7.0
.TP
.B MEDIUM_VIOLET_RED  =  <Color256[#126,AF0087,medium\-violet\-red]>
.UNINDENT
.INDENT 7.0
.TP
.B MISTY_ROSE_1  =  <Color256[#224,FFD7D7,misty\-rose\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B MISTY_ROSE_3  =  <Color256[#181,D7AFAF,misty\-rose\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B NAVAJO_WHITE_1  =  <Color256[#223,FFD7AF,navajo\-white\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B NAVAJO_WHITE_3  =  <Color256[#144,AFAF87,navajo\-white\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B NAVY_BLUE  =  <Color256[#17,00005F,navy\-blue]>
.UNINDENT
.INDENT 7.0
.TP
.B ORANGE_1  =  <Color256[#214,FFAF00,orange\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B ORANGE_2  =  <Color256[#172,D78700,orange\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B ORANGE_3  =  <Color256[#94,875F00,orange\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B ORANGE_4  =  <Color256[#58,5F5F00,orange\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B ORANGE_RED_1  =  <Color256[#202,FF5F00,orange\-red\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B ORCHID_1  =  <Color256[#213,FF87FF,orchid\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B ORCHID_2  =  <Color256[#212,FF87D7,orchid\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B ORCHID_3  =  <Color256[#170,D75FD7,orchid\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B PALE_GREEN_1  =  <Color256[#121,87FFAF,pale\-green\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B PALE_GREEN_2  =  <Color256[#156,AFFF87,pale\-green\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B PALE_GREEN_3  =  <Color256[#114,87D787,pale\-green\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B PALE_GREEN_4  =  <Color256[#77,5FD75F,pale\-green\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B PALE_TURQUOISE_1  =  <Color256[#159,AFFFFF,pale\-turquoise\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B PALE_TURQUOISE_4  =  <Color256[#66,5F8787,pale\-turquoise\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B PALE_VIOLET_RED_1  =  <Color256[#211,FF87AF,pale\-violet\-red\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B PINK_1  =  <Color256[#218,FFAFD7,pink\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B PINK_3  =  <Color256[#175,D787AF,pink\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B PLUM_1  =  <Color256[#219,FFAFFF,plum\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B PLUM_2  =  <Color256[#183,D7AFFF,plum\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B PLUM_3  =  <Color256[#176,D787D7,plum\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B PLUM_4  =  <Color256[#96,875F87,plum\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B PURPLE  =  <Color256[#129,AF00FF,purple]>
.UNINDENT
.INDENT 7.0
.TP
.B PURPLE_2  =  <Color256[#93,8700FF,purple\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B PURPLE_3  =  <Color256[#56,5F00D7,purple\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B PURPLE_4  =  <Color256[#55,5F00AF,purple\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B PURPLE_6  =  <Color256[#54,5F0087,purple\-6]>
.UNINDENT
.INDENT 7.0
.TP
.B RED_1  =  <Color256[#196,FF0000,red\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B RED_3  =  <Color256[#160,D70000,red\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B RED_4  =  <Color256[#124,AF0000,red\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B ROSY_BROWN  =  <Color256[#138,AF8787,rosy\-brown]>
.UNINDENT
.INDENT 7.0
.TP
.B ROYAL_BLUE_1  =  <Color256[#63,5F5FFF,royal\-blue\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B SALMON_1  =  <Color256[#209,FF875F,salmon\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B SANDY_BROWN  =  <Color256[#215,FFAF5F,sandy\-brown]>
.UNINDENT
.INDENT 7.0
.TP
.B SEA_GREEN_1  =  <Color256[#85,5FFFAF,sea\-green\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B SEA_GREEN_2  =  <Color256[#84,5FFF87,sea\-green\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B SEA_GREEN_3  =  <Color256[#78,5FD787,sea\-green\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B SEA_GREEN_4  =  <Color256[#83,5FFF5F,sea\-green\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B SKY_BLUE_1  =  <Color256[#117,87D7FF,sky\-blue\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B SKY_BLUE_2  =  <Color256[#111,87AFFF,sky\-blue\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B SKY_BLUE_3  =  <Color256[#74,5FAFD7,sky\-blue\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B SLATE_BLUE_1  =  <Color256[#99,875FFF,slate\-blue\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B SLATE_BLUE_2  =  <Color256[#62,5F5FD7,slate\-blue\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B SLATE_BLUE_3  =  <Color256[#61,5F5FAF,slate\-blue\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B SPRING_GREEN_1  =  <Color256[#48,00FF87,spring\-green\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B SPRING_GREEN_2  =  <Color256[#47,00FF5F,spring\-green\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B SPRING_GREEN_3  =  <Color256[#41,00D75F,spring\-green\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B SPRING_GREEN_4  =  <Color256[#29,00875F,spring\-green\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B SPRING_GREEN_5  =  <Color256[#35,00AF5F,spring\-green\-5]>
.UNINDENT
.INDENT 7.0
.TP
.B SPRING_GREEN_6  =  <Color256[#42,00D787,spring\-green\-6]>
.UNINDENT
.INDENT 7.0
.TP
.B STEEL_BLUE  =  <Color256[#67,5F87AF,steel\-blue]>
.UNINDENT
.INDENT 7.0
.TP
.B STEEL_BLUE_1  =  <Color256[#81,5FD7FF,steel\-blue\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B STEEL_BLUE_2  =  <Color256[#75,5FAFFF,steel\-blue\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B STEEL_BLUE_3  =  <Color256[#68,5F87D7,steel\-blue\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B TAN  =  <Color256[#180,D7AF87,tan]>
.UNINDENT
.INDENT 7.0
.TP
.B THISTLE_1  =  <Color256[#225,FFD7FF,thistle\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B THISTLE_3  =  <Color256[#182,D7AFD7,thistle\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B TURQUOISE_2  =  <Color256[#45,00D7FF,turquoise\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B TURQUOISE_4  =  <Color256[#30,008787,turquoise\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B VIOLET  =  <Color256[#177,D787FF,violet]>
.UNINDENT
.INDENT 7.0
.TP
.B WHEAT_1  =  <Color256[#229,FFFFAF,wheat\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B WHEAT_4  =  <Color256[#101,87875F,wheat\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B YELLOW_1  =  <Color256[#226,FFFF00,yellow\-1]>
.UNINDENT
.INDENT 7.0
.TP
.B YELLOW_2  =  <Color256[#190,D7FF00,yellow\-2]>
.UNINDENT
.INDENT 7.0
.TP
.B YELLOW_3  =  <Color256[#184,D7D700,yellow\-3]>
.UNINDENT
.INDENT 7.0
.TP
.B YELLOW_4  =  <Color256[#106,87AF00,yellow\-4]>
.UNINDENT
.INDENT 7.0
.TP
.B YELLOW_5  =  <Color256[#148,AFD700,yellow\-5]>
.UNINDENT
.INDENT 7.0
.TP
.B YELLOW_6  =  <Color256[#100,878700,yellow\-6]>
.UNINDENT
.UNINDENT
.SS renderer
.sp
Module with output formatters. Default global renderer type is \fI\%SgrRenderer\fP\&.
.sp
Customizing of rendering mode can be accomplished in two ways:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP a. 3
Method \fBRendererManager.set_default()\fP sets the default renderer globally.
After that calling \fI\%text.render()\fP will automatically invoke a said renderer
and all formatting will be applied.
.IP b. 3
Alternatively, you can use renderer’s own instance method \fBrender()\fP
directly and avoid messing up with the manager:
\fI\%HtmlRenderer.render()\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Generally speaking, if you need to invoke a custom renderer just once, it’s
convenient to use the second method for this case and use the global one
in all the others.
.sp
On the contrary, if there is a necessity to use more than one renderer
alternatingly, it’s better to avoid using the global one at all, and just
instantiate and invoke two _get_renderers independently.
.sp
TL;DR
.sp
To unconditionally print formatted message to standard output, do something like
this:
.sp
.nf
.ft C
>>> from pytermor import render, RendererManager, Styles
>>> RendererManager.set_default_to_force_formatting()
>>> render(\(aqWarning: AAAA\(aq, Styles.WARNING)
\(aq\ex1b[33mWarning: AAAA\ex1b[39m\(aq
.ft P
.fi
.INDENT 0.0
.TP
.B class  pytermor.renderer.AbstractRenderer
Renderer interface.
.INDENT 7.0
.TP
.B abstract  property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B abstract  render(string, fmt=<Style[NOP]>)
Apply colors and attributes described in \fBfmt\fP argument to
\fBstring\fP and return the result. Output format depends on renderer’s
class, which defines the implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIt.Any\fP) – String to format.
.IP \(bu 2
\fBfmt\fP (\fI\%Color\fP\fI | \fP\fIStyle\fP) – Style or color to apply. If \fBfmt\fP is a \fI\%Color\fP instance,
it is assumed to be a foreground color.
.UNINDENT
.TP
.B Returns
String with formatting applied, or without it, depending on
renderer settings.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.OutputMode(value)
Bases: \fBEnum\fP
.sp
Determines what types of SGR sequences are allowed to use in the output.
.INDENT 7.0
.TP
.B NO_ANSI  =  \(aqno_ansi\(aq
The renderer discards all color and format information completely.
.UNINDENT
.INDENT 7.0
.TP
.B XTERM_16  =  \(aqxterm_16\(aq
16\-colors mode. Enforces the renderer to approximate all color types
to \fI\%Color16\fP and render them as basic mode selection SGR sequences
(\fBESC [31m\fP, \fBESC [42m\fP etc). See \fI\%Color.approximate()\fP for approximation
algorithm details.
.UNINDENT
.INDENT 7.0
.TP
.B XTERM_256  =  \(aqxterm_256\(aq
256\-colors mode. Allows the renderer to use either \fI\%Color16\fP or \fI\%Color256\fP 
(but RGB will be approximated to 256\-color pallette).
.UNINDENT
.INDENT 7.0
.TP
.B TRUE_COLOR  =  \(aqtrue_color\(aq
RGB color mode. Does not apply restrictions to color rendering.
.UNINDENT
.INDENT 7.0
.TP
.B AUTO  =  \(aqauto\(aq
Lets the renderer select the most suitable mode by itself.
See \fI\%SgrRenderer\fP constructor documentation for the details.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.SgrRenderer(output_mode=OutputMode.AUTO)
Bases: \fI\%AbstractRenderer\fP
.INDENT 7.0
.INDENT 3.5
.SS Todo
.sp
make render() protected (?)
.UNINDENT
.UNINDENT
.sp
Default renderer invoked by \fBText.render()\fP\&. Transforms \fI\%Color\fP instances
defined in \fBstyle\fP into ANSI control sequence bytes and merges them with
input string. Type of resulting \fI\%SequenceSGR\fP depends on type of \fI\%Color\fP
instances in \fBstyle\fP argument and current output mode of the renderer.
.INDENT 7.0
.IP 1. 3
\fI\%ColorRGB\fP can be rendered as True Color sequence, 256\-color sequence
or 16\-color sequence depending on specified \fI\%OutputMode\fP\&.
.IP 2. 3
\fI\%Color256\fP can be rendered as 256\-color sequence or 16\-color
sequence.
.IP 3. 3
\fI\%Color16\fP will be rendered as 16\-color sequence.
.IP 4. 3
Nothing of the above will happen and all formatting will be discarded
completely if output device is not a terminal emulator or if the developer
explicitly set up the renderer to do so (\fI\%OutputMode.NO_ANSI\fP).
.UNINDENT
.sp
Renderer approximates RGB colors to closest \fBindexed\fP colors if terminal doesn’t
support RGB output. In case terminal doesn’t support even 256 colors, it
falls back to 16\-color palette and picks closest samples again the same way.
See \fI\%OutputMode\fP documentation for exact mappings.
.sp
.nf
.ft C
>>> SgrRenderer(OutputMode.XTERM_256).render(\(aqtext\(aq, Styles.WARNING_LABEL)
\(aq\ex1b[1;33mtext\ex1b[22;39m\(aq
>>> SgrRenderer(OutputMode.NO_ANSI).render(\(aqtext\(aq, Styles.WARNING_LABEL)
\(aqtext\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
\fBoutput_mode\fP (\fI\%OutputMode\fP) – 
.sp
SGR output mode to use. Valid values are listed in \fI\%OutputMode\fP enum.
.sp
With \fI\%OutputMode.AUTO\fP the renderer will first check if the output
device is a terminal emulator, and use \fI\%OutputMode.NO_ANSI\fP when it
is not. Otherwise, the renderer will read \fBTERM\fP environment
variable and follow these rules:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fI\%OutputMode.NO_ANSI\fP if \fBTERM\fP is set to \fBxterm\fP\&.
.IP \(bu 2
\fI\%OutputMode.XTERM_16\fP if \fBTERM\fP is set to \fBxterm\-color\fP\&.
.IP \(bu 2
\fI\%OutputMode.XTERM_256\fP in all other cases.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Special case is when \fBTERM\fP equals to \fBxterm\-256color\fP \fBand\fP
\fBCOLORTERM\fP is either \fBtruecolor\fP or  \fB24bit\fP, then
\fI\%OutputMode.TRUE_COLOR\fP will be used.

.UNINDENT
.INDENT 7.0
.TP
.B property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(string, fmt=<Style[NOP]>)
Apply colors and attributes described in \fBfmt\fP argument to
\fBstring\fP and return the result. Output format depends on renderer’s
class, which defines the implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIt.Any\fP) – String to format.
.IP \(bu 2
\fBfmt\fP (\fI\%Color\fP\fI | \fP\fIStyle\fP) – Style or color to apply. If \fBfmt\fP is a \fI\%Color\fP instance,
it is assumed to be a foreground color.
.UNINDENT
.TP
.B Returns
String with formatting applied, or without it, depending on
renderer settings.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.TmuxRenderer
Bases: \fI\%AbstractRenderer\fP
.sp
tmux
.sp
.nf
.ft C
>>> TmuxRenderer().render(\(aqtext\(aq,  Style(fg=\(aqblue\(aq, bold=True))
\(aq#[fg=blue bold]text#[fg=default nobold]\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(string, fmt=<Style[NOP]>)
Apply colors and attributes described in \fBfmt\fP argument to
\fBstring\fP and return the result. Output format depends on renderer’s
class, which defines the implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIt.Any\fP) – String to format.
.IP \(bu 2
\fBfmt\fP (\fI\%Color\fP\fI | \fP\fIStyle\fP) – Style or color to apply. If \fBfmt\fP is a \fI\%Color\fP instance,
it is assumed to be a foreground color.
.UNINDENT
.TP
.B Returns
String with formatting applied, or without it, depending on
renderer settings.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.NoOpRenderer
Bases: \fI\%AbstractRenderer\fP
.sp
Special renderer type that does nothing with the input string and just
returns it as is. That’s true only when it _is_ a str beforehand;
otherwise argument will be casted to str and then returned.
.sp
.nf
.ft C
>>> NoOpRenderer().render(\(aqtext\(aq, Style(fg=\(aqgreen\(aq, bold=True))
\(aqtext\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(string, fmt=<Style[NOP]>)
Apply colors and attributes described in \fBfmt\fP argument to
\fBstring\fP and return the result. Output format depends on renderer’s
class, which defines the implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIt.Any\fP) – String to format.
.IP \(bu 2
\fBfmt\fP (\fI\%Color\fP\fI | \fP\fIStyle\fP) – Style or color to apply. If \fBfmt\fP is a \fI\%Color\fP instance,
it is assumed to be a foreground color.
.UNINDENT
.TP
.B Returns
String with formatting applied, or without it, depending on
renderer settings.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.HtmlRenderer
Bases: \fI\%AbstractRenderer\fP
.sp
html
.sp
.nf
.ft C
>>> HtmlRenderer().render(\(aqtext\(aq, Style(fg=\(aqred\(aq, bold=True))
\(aq<span style=\(dqcolor: #800000; font\-weight: 700\(dq>text</span>\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(string, fmt=<Style[NOP]>)
Apply colors and attributes described in \fBfmt\fP argument to
\fBstring\fP and return the result. Output format depends on renderer’s
class, which defines the implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIt.Any\fP) – String to format.
.IP \(bu 2
\fBfmt\fP (\fI\%Color\fP\fI | \fP\fIStyle\fP) – Style or color to apply. If \fBfmt\fP is a \fI\%Color\fP instance,
it is assumed to be a foreground color.
.UNINDENT
.TP
.B Returns
String with formatting applied, or without it, depending on
renderer settings.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.renderer.SgrRendererDebugger(output_mode=OutputMode.AUTO)
Bases: \fI\%SgrRenderer\fP
.sp
.nf
.ft C
>>> SgrRendererDebugger(OutputMode.XTERM_16).render(\(aqtext\(aq, Style(fg=\(aqred\(aq, bold=True))
\(aq|ǝ1;31|text|ǝ22;39|\(aq
.ft P
.fi
.INDENT 7.0
.UNINDENT
.INDENT 7.0
.TP
.B property  is_format_allowed:  bool
.INDENT 7.0
.TP
.B Returns

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B render(string, fmt=<Style[NOP]>)
Apply colors and attributes described in \fBfmt\fP argument to
\fBstring\fP and return the result. Output format depends on renderer’s
class, which defines the implementation.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIt.Any\fP) – String to format.
.IP \(bu 2
\fBfmt\fP (\fI\%Color\fP\fI | \fP\fIStyle\fP) – Style or color to apply. If \fBfmt\fP is a \fI\%Color\fP instance,
it is assumed to be a foreground color.
.UNINDENT
.TP
.B Returns
String with formatting applied, or without it, depending on
renderer settings.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.SS style
.INDENT 0.0
.TP
.B pytermor.style.NOOP_STYLE  =  <Style[NOP]>
Special style passing the text through without any modifications.
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.style.Styles
Some ready\-to\-use styles. Can be used as examples.
.UNINDENT
.SS text
.INDENT 0.0
.TP
.B class  pytermor.text.Renderable(*args, **kwds)
Bases: \fBSized\fP
.sp
Renderable abstract class. Can be inherited when the default style
overlaps resolution mechanism implemented in \fI\%Text\fP is not good enough.
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.text.Text(string=\(aq\(aq, fmt=<Style[NOP]>, close_this=True, close_prev=False)
Bases: \fI\%Renderable\fP
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.text.render(string, fmt=<Style[NOP]>, renderer=None, parse_template=False)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIt.Any\fP) – 
.IP \(bu 2
\fBfmt\fP (\fI\%Color\fP\fI | \fP\fIStyle\fP) – 
.IP \(bu 2
\fBrenderer\fP (\fI\%AbstractRenderer\fP) – 
.IP \(bu 2
\fBparse_template\fP (\fIbool\fP) – 
.UNINDENT
.TP
.B Returns

.TP
.B Return type
str | t.List[str]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.text.echo(string=\(aq\(aq, fmt=<Style[NOP]>, renderer=None, parse_template=False, nl=True, file=<_io.TextIOWrapper name=\(aq<stdout>\(aq mode=\(aqw\(aq encoding=\(aqutf\-8\(aq>, flush=True, wrap=False, indent_first=0, indent_subseq=0)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIt.Any\fP) – 
.IP \(bu 2
\fBfmt\fP (\fI\%Color\fP\fI | \fP\fIStyle\fP) – 
.IP \(bu 2
\fBrenderer\fP (\fI\%AbstractRenderer\fP) – 
.IP \(bu 2
\fBparse_template\fP (\fIbool\fP) – 
.IP \(bu 2
\fBnl\fP (\fIbool\fP) – 
.IP \(bu 2
\fBfile\fP (\fIt.IO\fP) – 
.IP \(bu 2
\fBflush\fP (\fIbool\fP) – 
.IP \(bu 2
\fBwrap\fP (\fIbool\fP\fI | \fP\fIint\fP) – 
.IP \(bu 2
\fBindent_first\fP (\fIint\fP) – 
.IP \(bu 2
\fBindent_subseq\fP (\fIint\fP) – 
.UNINDENT
.UNINDENT
.UNINDENT
.SS utilnum
.INDENT 0.0
.TP
.B pytermor.utilnum.format_auto_float(value, req_len, allow_exponent_notation=True)
Dynamically adjust decimal digit amount and format
to fill up the output string with as many significant
digits as possible, and keep the output length
strictly equal to \fBreq_len\fP  at the same time.
.sp
.nf
.ft C
>>> format_auto_float(0.016789, 5)
\(aq0.017\(aq
>>> format_auto_float(0.167891, 5)
\(aq0.168\(aq
>>> format_auto_float(1.567891, 5)
\(aq1.568\(aq
>>> format_auto_float(12.56789, 5)
\(aq12.57\(aq
>>> format_auto_float(123.5678, 5)
\(aq123.6\(aq
>>> format_auto_float(1234.567, 5)
\(aq 1235\(aq
>>> format_auto_float(12345.67, 5)
\(aq12346\(aq
.ft P
.fi
.sp
For cases when it\(aqs impossible to fit a number in the required length
and rounding doesn\(aqt help (e.g. 12 500 000 and 5 chars) algorithm
switches to scientific notation and the result looks like \(aq1.2e7\(aq.
.sp
When exponent form is disabled, there are two options for value that cannot
fit into required length:
.INDENT 7.0
.IP 1. 3
if absolute value is less than 1, zeros will be displayed (\(aq0.0000\(aq);
.IP 2. 3
in case of big numbers (like 10\s-2\u9\d\s0) ValueError will be raised instead.
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvalue\fP (\fIfloat\fP) \-\- Value to format
.IP \(bu 2
\fBreq_len\fP (\fIint\fP) \-\- Required output string length
.IP \(bu 2
\fBallow_exponent_notation\fP (\fIbool\fP) \-\- Enable/disable exponent form.
.UNINDENT
.TP
.B Returns
Formatted string of required length
.TP
.B Raises
\fBValueError\fP \-\- 
.TP
.B Return type
str
.UNINDENT
.sp
New in version 1.7.

.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilnum.format_si_metric(value, unit=\(aqm\(aq, join=True)
Format \fBvalue\fP as meters with SI\-prefixes, max result length is
7 chars: 4 for value plus 3 for default unit, prefix and
separator. Base is 1000. Unit can be customized.
Suitable for formatting any SI unit with values
from approximately 10^\-27 to 10^27.
.sp
.nf
.ft C
>>> format_si_metric(1010, \(aqm²\(aq)
\(aq1.01 km²\(aq
>>> format_si_metric(0.0319, \(aqg\(aq)
\(aq31.9 mg\(aq
>>> format_si_metric(1213531546, \(aqW\(aq)  # great scott
\(aq1.21 GW\(aq
>>> format_si_metric(1.26e\-9, \(aqeV\(aq)
\(aq1.26 neV\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvalue\fP (\fIfloat\fP) \-\- Input value (unitless).
.IP \(bu 2
\fBunit\fP (\fIstr\fP) \-\- Value unit, printed right after the prefix.
.IP \(bu 2
\fBjoin\fP (\fIbool\fP) \-\- Return the result as a string if set to \fITrue\fP,
or as a (num, sep, unit) tuple otherwise.
.UNINDENT
.TP
.B Returns
Formatted string with SI\-prefix if necessary.
.TP
.B Return type
str | Tuple[str, str, str]
.UNINDENT
.sp
New in version 2.0.

.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilnum.format_si_binary(value, unit=\(aqb\(aq, join=True)
Format \fBvalue\fP as binary size (bytes, kbytes, Mbytes), max
result length is 8 chars: 5 for value plus 3 for default unit,
prefix and separator. Base is 1024. Unit can be customized.
.sp
.nf
.ft C
>>> format_si_binary(1010)  # 1010 b < 1 kb
\(aq1010 b\(aq
>>> format_si_binary(1080)
\(aq1.055 kb\(aq
>>> format_si_binary(45200)
\(aq44.14 kb\(aq
>>> format_si_binary(1.258 * pow(10, 6), \(aqbps\(aq)
\(aq1.200 Mbps\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvalue\fP (\fIfloat\fP) \-\- Input value in bytes.
.IP \(bu 2
\fBunit\fP (\fIstr\fP) \-\- Value unit, printed right after the prefix.
.IP \(bu 2
\fBjoin\fP (\fIbool\fP) \-\- Return the result as a string if set to \fITrue\fP,
or as a (num, sep, unit) tuple otherwise.
.UNINDENT
.TP
.B Returns
Formatted string with SI\-prefix if necessary.
.TP
.B Return type
str | Tuple[str, str, str]
.UNINDENT
.sp
New in version 2.0.

.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilnum.PrefixedUnitFormatter(max_value_len, truncate_frac=False, unit=None, unit_separator=None, mcoef=1000.0, prefixes=None, prefix_zero_idx=None)
Formats \fBvalue\fP using settings passed to constructor. The main idea of this class
is to fit into specified string length as much significant digits as it\(aqs
theoretically possible by using multipliers and unit prefixes to
indicate them.
.sp
You can create your own formatters if you need fine tuning of the
output and customization. If that\(aqs not the case, there are facade
methods \fI\%format_si_metric()\fP and \fI\%format_si_binary()\fP,
which will invoke predefined formatters and doesn\(aqt require setting up.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmax_value_len\fP (\fIint\fP) \-\- 
.IP \(bu 2
\fBtruncate_frac\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBunit\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBunit_separator\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBmcoef\fP (\fIfloat\fP) \-\- 
.IP \(bu 2
\fBprefixes\fP (\fIList\fP\fI[\fP\fIstr\fP\fI | \fP\fINone\fP\fI]\fP) \-\- 
.IP \(bu 2
\fBprefix_zero_idx\fP (\fIint\fP) \-\- Index of prefix which will be used as default, i.e. without multiplying coefficients.
.UNINDENT
.UNINDENT
.sp
New in version 1.7.

.INDENT 7.0
.TP
.B property  max_len:  int
.INDENT 7.0
.TP
.B Returns
Maximum length of the result. Note that constructor argument
is \fBmax_value_len\fP, which is a different parameter.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B format(value, unit=None, join=True)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvalue\fP (\fIfloat\fP) \-\- Input value
.IP \(bu 2
\fBunit\fP (\fIstr\fP) \-\- Unit override
.IP \(bu 2
\fBjoin\fP (\fIbool\fP) \-\- Return the result as a string if set to \fITrue\fP,
or as a (num, sep, unit) tuple otherwise.
.UNINDENT
.TP
.B Returns
Formatted value
.TP
.B Return type
str | Tuple[str, str, str]
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilnum.PREFIXES_SI  =  [\(aqy\(aq, \(aqz\(aq, \(aqa\(aq, \(aqf\(aq, \(aqp\(aq, \(aqn\(aq, \(aqμ\(aq, \(aqm\(aq, None, \(aqk\(aq, \(aqM\(aq, \(aqG\(aq, \(aqT\(aq, \(aqP\(aq, \(aqE\(aq, \(aqZ\(aq, \(aqY\(aq]
Prefix presets used by default module formatters. Can be
useful if you are building your own formatter.
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilnum.PREFIX_ZERO_SI  =  8
Index of prefix which will be used as default, i.e. without 
multiplying coefficients.
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilnum._formatter_si_metric  =  PrefixedUnitFormatter
Configuration example, used by \fI\%format_si_binary\fP\&.
.sp
\fBmax_value_len\fP must be at least 4, because it\(aqs a
minimum requirement for formatting values from 999 to \-999.
Next number to 999 is 1000, which will be formatted as \(dq1k\(dq.
.sp
Total maximum length is \fBmax_value_len + 3\fP, which is 7
(+3 is from separator, unit and prefix, assuming all of them
have 1\-char width). Without unit (default) it\(aqs 6.
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilnum._formatter_si_binary  =  PrefixedUnitFormatter
Configuration example, used by \fI\%format_si_metric\fP\&.
.sp
While being similar to \fI\%_formatter_si_metric\fP, this formatter 
differs in one aspect.  Given a variable with default value = 995,
formatting it\(aqs value results in \(dq995 b\(dq. After increasing it
by 20 we\(aqll have 1015, but it\(aqs still not enough to become
a kilobyte \-\- so returned value will be \(dq1015 b\(dq. Only after one
more increase (at 1024 and more) the value will be in a form
of \(dq1.00 kb\(dq.
.sp
So, in this case \fBmax_value_len\fP must be at least 5 (not 4),
because it\(aqs a minimum requirement for formatting values from 1023
to \-1023.
.sp
Total maximum length is \fBmax_value_len + 3\fP = 8 (+3 is from separator,
unit and prefix, assuming all of them have 1\-char width).
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilnum.format_time_delta(seconds, max_len=None)
Format time delta using suitable format (which depends on
\fBmax_len\fP argument). Key feature of this formatter is
ability to combine two units and display them simultaneously,
e.g. return \(dq3h 48min\(dq instead of \(dq228 mins\(dq or \(dq3 hours\(dq,
.sp
There are predefined formatters with output length of 3, 4,
6 and 10 characters. Therefore, you can pass in any value
from 3 inclusive and it\(aqs guarenteed that result\(aqs length
will be less or equal to required length. If \fI\%max_len\fP is
omitted, longest registred formatter will be used.
.sp
.nf
.ft C
>>> format_time_delta(10, 3)
\(aq10s\(aq
>>> format_time_delta(10, 6)
\(aq10 sec\(aq
>>> format_time_delta(15350, 4)
\(aq4 h\(aq
>>> format_time_delta(15350)
\(aq4h 15min\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBseconds\fP (\fIfloat\fP) \-\- Value to format
.IP \(bu 2
\fBmax_len\fP (\fIOptional\fP\fI[\fP\fIint\fP\fI]\fP) \-\- Maximum output string length (total)
.UNINDENT
.TP
.B Returns
Formatted string
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilnum.TimeDeltaFormatter(units, allow_negative, unit_separator=None, plural_suffix=None, overflow_msg=\(aqOVERFLOW\(aq)
Formatter for time intervals. Key feature of this formatter is
ability to combine two units and display them simultaneously,
e.g. return \(dq3h 48min\(dq instead of \(dq228 mins\(dq or \(dq3 hours\(dq, etc.
.sp
You can create your own formatters if you need fine tuning of the
output and customization. If that\(aqs not the case, there is a
facade method \fI\%format_time_delta()\fP which will select appropriate
formatter automatically.
.sp
Example output:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
\(dq10 secs\(dq, \(dq5 mins\(dq, \(dq4h 15min\(dq, \(dq5d 22h\(dq
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBunits\fP (\fIList\fP\fI[\fP\fI\%TimeUnit\fP\fI]\fP) \-\- 
.IP \(bu 2
\fBallow_negative\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBunit_separator\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBplural_suffix\fP (\fIstr\fP) \-\- 
.IP \(bu 2
\fBoverflow_msg\fP (\fIstr\fP) \-\- 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B property  max_len:  int
This property cannot be set manually, it is
computed on initialization automatically.
.INDENT 7.0
.TP
.B Returns
Maximum possible output string length.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B format(seconds, always_max_len=False)
Pretty\-print difference between two moments in time.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBseconds\fP (\fIfloat\fP) \-\- Input value.
.IP \(bu 2
\fBalways_max_len\fP (\fIbool\fP) \-\- If result string is less than \fI\%max_len\fP it will be returned
as is, unless this flag is set to \fITrue\fP\&. In that case output
string will be padded with spaces on the left side so that
resulting length would be always equal to maximum length.
.UNINDENT
.TP
.B Returns
Formatted string.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B format_raw(seconds)
Pretty\-print difference between two moments in time, do not replace
the output with \(dqOVERFLOW\(dq warning message.
.INDENT 7.0
.TP
.B Parameters
\fBseconds\fP (\fIfloat\fP) \-\- Input value.
.TP
.B Returns
Formatted string or \fINone\fP on overflow (if input
value is too big for the current formatter to handle).
.TP
.B Return type
str | None
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilnum.TimeUnit(name:  \(aqstr\(aq, in_next:  \(aqint\(aq  =  None, custom_short:  \(aqstr\(aq  =  None, collapsible_after:  \(aqint\(aq  =  None, overflow_afer:  \(aqint\(aq  =  None)
.INDENT 7.0
.UNINDENT
.UNINDENT
.SS utilstr
.sp
Package containing a set of formatters for prettier output, as well as utility classes for removing
some of the boilerplate code when dealing with escape sequences.
.INDENT 0.0
.TP
.B pytermor.utilstr.format_thousand_sep(value, separator=\(aq \(aq)
Returns input \fBvalue\fP with integer part split into groups of three digits,
joined then with \fBseparator\fP string.
.sp
.nf
.ft C
>>> format_thousand_sep(260341)
\(aq260 341\(aq
>>> format_thousand_sep(\-9123123123.55, \(aq,\(aq)
\(aq\-9,123,123,123.55\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvalue\fP (\fIint\fP\fI | \fP\fIfloat\fP) \-\- 
.IP \(bu 2
\fBseparator\fP (\fIstr\fP) \-\- 
.UNINDENT
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilstr.distribute_padded(values, max_len, pad_before=False, pad_after=False)
.INDENT 7.0
.INDENT 3.5
.SS Todo
.sp
todo
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvalues\fP (\fIList\fP\fI[\fP\fIStrType\fP\fI]\fP) \-\- 
.IP \(bu 2
\fBmax_len\fP (\fIint\fP) \-\- 
.IP \(bu 2
\fBpad_before\fP (\fIbool\fP) \-\- 
.IP \(bu 2
\fBpad_after\fP (\fIbool\fP) \-\- 
.UNINDENT
.TP
.B Returns

.TP
.B Return type
\fIStrType\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilstr.ljust_sgr(s, width, fillchar=\(aq \(aq, actual_len=None)
SGR\-formatting\-aware implementation of \fBstr.ljust\fP\&.
.sp
Return a left\-justified string of length \fBwidth\fP\&. Padding is done
using the specified fill character (default is a space).
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilstr.rjust_sgr(s, width, fillchar=\(aq \(aq, actual_len=None)
SGR\-formatting\-aware implementation of \fBstr.rjust\fP\&.
.sp
Return a right\-justified string of length \fBwidth\fP\&. Padding is done
using the specified fill character (default is a space).
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilstr.center_sgr(s, width, fillchar=\(aq \(aq, actual_len=None)
SGR\-formatting\-aware implementation of \fBstr.center\fP\&.
.sp
Return a centered string of length \fBwidth\fP\&. Padding is done using the
specified fill character (default is a space).
.INDENT 7.0
.INDENT 3.5
.SS Todo
.sp
поверить корректность работы в случае эмодзи (напр. 🔋)
если алгоритм поедет \-\- можно заменить на f\-стринги
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilstr.wrap_sgr(raw_input, width, indent_first=0, indent_subseq=0)
A workaround to make standard library \fBtextwrap.wrap()\fP more friendly
to an SGR\-formatted strings.
.sp
The main idea is
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBraw_input\fP (\fIstr\fP\fI | \fP\fIlist\fP\fI[\fP\fIstr\fP\fI]\fP) \-\- 
.IP \(bu 2
\fBwidth\fP (\fIint\fP) \-\- 
.UNINDENT
.TP
.B Returns

.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.OmniFilter(*args, **kwds)
Bases: \fBGeneric\fP[\fBIT\fP, \fBOT\fP]
.sp
Main idea is to provide a common interface for string filtering, that can make
possible working with filters like with objects rather than with functions/lambdas.
.INDENT 7.0
.TP
.B __call__(s)
Can be used instead of \fI\%apply()\fP
.INDENT 7.0
.TP
.B Return type
\fIOT\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B apply(inp)
.INDENT 7.0
.TP
.B Parameters
\fBinp\fP (\fIIT\fP) \-\- 
.TP
.B Returns

.TP
.B Return type
\fIOT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.NoopFilter(*args, **kwds)
Bases: \fI\%OmniFilter\fP[\fBIT\fP, \fBOT\fP]
.INDENT 7.0
.TP
.B apply(inp)
.INDENT 7.0
.TP
.B Parameters
\fBinp\fP (\fIIT\fP) \-\- 
.TP
.B Returns

.TP
.B Return type
\fIOT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.OmniDecoder(*args, **kwds)
Bases: \fI\%OmniFilter\fP[\fBIT\fP, \fBstr\fP]
.INDENT 7.0
.TP
.B apply(inp)
.INDENT 7.0
.TP
.B Parameters
\fBinp\fP (\fIIT\fP) \-\- 
.TP
.B Returns

.TP
.B Return type
str
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.OmniEncoder(*args, **kwds)
Bases: \fI\%OmniFilter\fP[\fBIT\fP, \fBbytes\fP]
.INDENT 7.0
.TP
.B apply(inp)
.INDENT 7.0
.TP
.B Parameters
\fBinp\fP (\fIIT\fP) \-\- 
.TP
.B Returns

.TP
.B Return type
bytes
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.OmniReplacer(pattern, repl)
Bases: \fI\%OmniFilter\fP[\fBIT\fP, \fBOT\fP]
.sp
\&.
.INDENT 7.0
.TP
.B apply(inp)
Apply filter to \fBs\fP string (or bytes).
.INDENT 7.0
.TP
.B Return type
\fIOT\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.StringReplacer(pattern, repl)
Bases: \fI\%OmniReplacer\fP[\fBstr\fP, \fBstr\fP]
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.BytesReplacer(pattern, repl)
Bases: \fI\%OmniReplacer\fP[\fBbytes\fP, \fBbytes\fP]
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.SgrStringReplacer(repl=\(aq\(aq)
Bases: \fI\%StringReplacer\fP
.sp
Find all SGR seqs (e.g. \fBESC\fP\fB[1;4m\fP) and replace with given string. More
specific version of \fBCsiReplacer\fP\&.
.INDENT 7.0
.TP
.B Parameters
\fBrepl\fP \-\- Replacement, can contain regexp groups (see \fI\%apply_filters()\fP).
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.CsiStringReplacer(repl=\(aq\(aq)
Bases: \fI\%StringReplacer\fP
.sp
Find all CSI seqs (i.e. starting with \fBESC\fP\fB[\fP) and replace with given
string. Less specific version of \fBSgrReplacer\fP, as CSI consists of SGR
and many other sequence subtypes.
.INDENT 7.0
.TP
.B Parameters
\fBrepl\fP \-\- Replacement, can contain regexp groups (see \fI\%apply_filters()\fP).
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.WhitespacesStringReplacer(repl=\(aq\(aq, keep_newlines=True)
Bases: \fI\%StringReplacer\fP
.sp
Replace every invisible character with \fBrepl\fP (default is \fB·\fP),
except newlines. Newlines are kept and get prepneded with same string by
default, but this behaviour can be disabled with \fBkeep_newlines\fP = \fIFalse\fP\&.
.sp
.nf
.ft C
>>> WhitespacesStringReplacer(\(dq·\(dq).apply(\(aqA  B  C\(aq)
\(aqA··B··C\(aq
>>> apply_filters(\(aq1. D\en2. L \(aq, WhitespacesStringReplacer(keep_newlines=False))
\(aq1.D2.L\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrepl\fP \-\- 
.IP \(bu 2
\fBkeep_newlines\fP \-\- 
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.ControlCharsStringReplacer(repl=\(aq\(aq)
Bases: \fI\%StringReplacer\fP
.sp
\&.
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.NonAsciiByteReplacer(repl=b\(aq\(aq)
Bases: \fI\%BytesReplacer\fP
.sp
Keep 7\-bit ASCII bytes [0x00\-0x7f], replace or remove (this is a default) others.
.sp
.nf
.ft C
>>> inp = bytes((0x60, 0x70, 0x80, 0x90, 0x50))
>>> NonAsciiByteReplacer().apply(inp)
b\(aq\(gapP\(aq
>>> NonAsciiByteReplacer(lambda m: b\(aq?\(aq*len(m.group())).apply(inp)
b\(aq\(gap??P\(aq
>>> NonAsciiByteReplacer(lambda m: f\(aq[{m.group().hex()}]\(aq.encode()).apply(inp)
b\(aq\(gap[8090]P\(aq
.ft P
.fi
.INDENT 7.0
.TP
.B Parameters
\fBrepl\fP \-\- Replacement byte\-string.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pytermor.utilstr.OmniSanitizer(repl=b\(aq\(aq)
Bases: \fI\%OmniReplacer\fP[\fBIT\fP, \fBbytes\fP]
.INDENT 7.0
.TP
.B apply(inp)
Apply filter to \fBs\fP string (or bytes).
.INDENT 7.0
.TP
.B Return type
bytes
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilstr.apply_filters(string, *args)
Method for applying dynamic filter list to a target string/bytes.
Example (will replace all \fBESC\fP control characters to \fBE\fP and
thus make SGR params visible):
.sp
.nf
.ft C
>>> apply_filters(f\(aq{SeqIndex.RED}test{SeqIndex.COLOR_OFF}\(aq, SgrStringReplacer(r\(aqE\e2\e3\e4\(aq))
\(aqE[31mtestE[39m\(aq
.ft P
.fi
.sp
Note that type of \fBs\fP argument must be same as \fBStringFilter\fP parameterized
type, i.e. \fBReplaceNonAsciiBytes\fP is \fBStringFilter\fP type, so
you can apply it only to bytes\-type strings.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBstring\fP (\fIIT\fP) \-\- String to filter.
.IP \(bu 2
\fBargs\fP (\fIUnion\fP\fI[\fP\fI\%OmniFilter\fP\fI[\fP\fIIT\fP\fI, \fP\fIOT\fP\fI]\fP\fI, \fP\fIType\fP\fI[\fP\fI\%OmniFilter\fP\fI[\fP\fIIT\fP\fI, \fP\fIOT\fP\fI]\fP\fI]\fP\fI]\fP) \-\- \fI\%OmniFilter\fP instance(s) or \fBOmniFilter\fP type(s).
.UNINDENT
.TP
.B Returns
Filtered \fBs\fP\&.
.TP
.B Return type
\fIOT\fP
.UNINDENT
.UNINDENT
.SS utilsys
.INDENT 0.0
.TP
.B pytermor.utilsys.get_terminal_width(default=80, padding=2)
.INDENT 7.0
.TP
.B Returns
terminal_width
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilsys.wait_key()
Wait for a key press on the console and return it.
.INDENT 7.0
.TP
.B Return type
t.AnyStr | None
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B pytermor.utilsys.total_size(o, handlers=None, verbose=False)
Returns the approximate memory footprint an object and all of its contents.
.sp
Automatically finds the contents of the following builtin containers and
their subclasses:  tuple, list, deque, dict, set and frozenset.
To search other containers, add handlers to iterate over their contents:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B handlers = {SomeContainerClass: iter,
OtherContainerClass: OtherContainerClass.get_elements}
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Return type
int
.UNINDENT
.UNINDENT
.SH CHANGELOG
.SS v2.0.0
.INDENT 0.0
.IP \(bu 2
Complete library rewrite.
.IP \(bu 2
High\-level abstractions \fI\%Color\fP, \fI\%Renderer\fP and \fBStyle\fP\&.
.IP \(bu 2
Unit tests for formatters and new modules.
.IP \(bu 2
\fBpytest\fP and \fBcoverage\fP integration.
.IP \(bu 2
\fBsphinx\fP and \fBreadthedocs\fP integraton.
.UNINDENT
.SS v1.8.0
.INDENT 0.0
.IP \(bu 2
\fBformat_prefixed_unit\fP extended for working with decimal and binary metric prefixes.
.IP \(bu 2
\fI\%format_time_delta\fP extended with new settings.
.IP \(bu 2
Value rounding transferred from  \fI\%format_auto_float\fP to \fBformat_prefixed_unit\fP\&.
.IP \(bu 2
Utility classes reorganization.
.IP \(bu 2
Unit tests output formatting.
.IP \(bu 2
\fBsequence.NOOP\fP SGR sequence and \fBspan.NOOP\fP format.
.IP \(bu 2
Max decimal points for \fBauto_float\fP extended from (2) to (max\-2).
.UNINDENT
.SS v1.7.4
.INDENT 0.0
.IP \(bu 2
Added 3 formatters: \fBformat_prefixed_unit\fP, \fI\%format_time_delta\fP, \fI\%format_auto_float\fP\&.
.UNINDENT
.SS v1.7.3
.INDENT 0.0
.IP \(bu 2
Added \fBspan.BG_BLACK\fP format.
.UNINDENT
.SS v1.7.2
.INDENT 0.0
.IP \(bu 2
Added \fI\%ljust_sgr\fP, \fI\%rjust_sgr\fP, \fI\%center_sgr\fP util functions to align strings with SGRs correctly.
.UNINDENT
.SS v1.7.1
.INDENT 0.0
.IP \(bu 2
Print reset sequence as \fB\ee[m\fP instead of \fB\ee[0m\fP\&.
.UNINDENT
.SS v1.7.0
.INDENT 0.0
.IP \(bu 2
\fBSpan\fP constructor can be called without arguments.
.IP \(bu 2
Added SGR code lists.
.UNINDENT
.SS v1.6.2
.INDENT 0.0
.IP \(bu 2
Excluded \fBtests\fP dir from distribution package.
.UNINDENT
.SS v1.6.1
.INDENT 0.0
.IP \(bu 2
Ridded of \fBEmptyFormat\fP and \fBAbstractFormat\fP classes.
.IP \(bu 2
Renamed \fBcode\fP module to \fBsgr\fP because of conflicts in PyCharm debugger (\fBpydevd_console_integration.py\fP).
.UNINDENT
.SS v1.5.0
.INDENT 0.0
.IP \(bu 2
Removed excessive \fBEmptySequenceSGR\fP \-\- default \fBSGR\fP class was specifically implemented to print out as empty string instead of \fB\ee[m\fP if constructed without params.
.UNINDENT
.SS v1.4.0
.INDENT 0.0
.IP \(bu 2
\fBSpan.wrap()\fP now accepts any type of argument, not only \fIstr\fP\&.
.IP \(bu 2
Rebuilt \fBSequence\fP inheritance tree.
.IP \(bu 2
Added equality methods for \fI\%SequenceSGR\fP and \fBSpan\fP classes/subclasses.
.IP \(bu 2
Added some tests for \fBfmt.*\fP and \fBseq.*\fP classes.
.UNINDENT
.SS v1.3.2
.INDENT 0.0
.IP \(bu 2
Added \fBspan.GRAY\fP and \fBspan.BG_GRAY\fP format presets.
.UNINDENT
.SS v1.3.1
.INDENT 0.0
.IP \(bu 2
Interface revisioning.
.UNINDENT
.SS v1.2.1
.INDENT 0.0
.IP \(bu 2
\fBopening_seq\fP and \fBclosing_seq\fP properties for \fBSpan\fP class.
.UNINDENT
.SS v1.2.0
.INDENT 0.0
.IP \(bu 2
\fBEmptySequenceSGR\fP and \fBEmptyFormat\fP classes.
.UNINDENT
.SS v1.1.0
.INDENT 0.0
.IP \(bu 2
Autoformat feature.
.UNINDENT
.SS v1.0.0
.INDENT 0.0
.IP \(bu 2
First public version.
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.sp
This project uses Semantic Versioning \-\- \fI\%https://semver.org\fP \fI(starting from 2.0.0)\fP
.SH LICENSE
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MIT License

Copyright (c) 2022 Aleksandr Shavykin

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \(dqSoftware\(dq), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \(dqAS IS\(dq, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


.ft P
.fi
.UNINDENT
.UNINDENT
.SH AUTHOR
Alexandr Shavykin
.SH COPYRIGHT
2022, Alexandr Shavykin
.\" Generated by docutils manpage writer.
.
